{"version":3,"sources":["Insurgent.tsx","Hegemon.tsx","PreviewHex.tsx","PreviewHegemonPlacement.tsx","PreviewHexes.tsx","PreviewHeightMove.tsx","PreviewPoint.tsx","PreviewInsurgentMovement.tsx","PreviewInsurgentPlacement.tsx","info-content/InfoGameplay.tsx","info-content/InfoIntelligence.tsx","info-content/InfoWinning.tsx","info-content/InfoHegemon.tsx","info-content/InfoInsurgents.tsx","Settings.tsx","sounds/interface-chirp-open.wav","sounds/interface-chirp-close.wav","sounds/click-1.wav","sounds/click-2.wav","sounds/beep-1.ogg","sounds/street.mp3","sounds/click-3.wav","sounds/click-4.wav","sounds/click-5.wav","sounds/step-1.wav","sounds/explosion.wav","sounds/click-6.wav","sounds/water.wav","sounds/step-2.wav","sounds/explosion-truck.wav","Board.tsx","sounds/tears-in-rain.mp3","index.tsx"],"names":["arePointsEqual","i1","i2","areHexesEqual","hex1","hex2","hex3","isInsurgentAdjacentToHex","i","h","sortHexesInsideInsurgent","ins","compareHexes","isPointOnWater","point","board","getCellValue","isPointOnRails","isPointValid","points","prev","selectedInsurgent","move","insurgents","distance","moves","firstCommon","secondCommon","piece","p","isPointBetweenThreeHegemons","hegemons","exists1","exists2","exists3","hegemon","listIncludesPoint","getInsurgentNeighbors","neighbors","push","id","uuidv4","railPoints","newNeighbors","JSON","parse","stringify","neighbor","col","right","row","orientation","leftUp","leftBottom","left","rightUp","rightDown","splice","getAllInsurgentsNeighbors","length","x","y","point1","point2","insurgent","isInList","isCellValid","h1","h2","getHegemonGroup","group","exists","getHexNeighbors","isHegemon","foundHegemon","heg","available","rightBottom","filter","hex","getAllHegemonPlaces","hexagons","intersects","getHexPoints","leftDown","PreviewHex","props","setHegemons","selectedHegemonAttack","setSelectedHegemonMovement","setSelectedHegemonAttack","game","setGame","setInsurgents","config","scale","color","explosion","hegemonMove","hegemonMoveWater","roundEnd","onClick","gameplayState","newHegemons","idx","findIndex","playSound","undefined","find","hegemonMoves","newGame","moveHegemon","newInsurgents","isInRange","attacked","willBeAttacked","deadInsurgents","insurgentsToDie","attackWithHegemon","startHegemons","placeHegemon","onContextMenu","e","preventDefault","className","style","position","opacity","cursor","zIndex","transform","top","float","borderRight","borderTop","borderBottom","width","height","backgroundColor","borderLeft","PreviewHegemonPlacement","hexes","emptyHegemon","hexPreviews","map","PreviewHexes","PreviewHeightMove","setSelectedInsurgent","stepLand","orientationToNumber","up","base","down","numberToOrientation","moveInsurgentHeight","choice","delta","Math","abs","toString","insurgentMoves","canMakeMove","canGoUp","canGoBase","canGoDown","display","flexDirection","alignItems","padding","borderRadius","margin","PreviewPoint","stepTransport","hegemonDeath","round","borderStyle","borderColor","moveInsurgent","startInsurgents","toDelete","hPoints","hPoint","markGroupForDeletion","includes","deadHegemons","hegemonsToDie","placeInsurgent","PreviewInsurgentMovement","pointPreviews","PreviewInsurgentPlacement","InfoGameplay","src","process","InfoIntelligence","city","InfoWinning","InfoHegemon","InfoInsurgents","Settings","closeSettings","sfx","ambientSound","backgroundMusic","React","useState","volume","sfxValue","setSfxValue","ambientSoundValue","setAmbientSoundValue","backgroundMusicValue","setBackgroundMusicValue","textAlign","Slider","value","onChange","event","newValue","effect","ratio","isNaN","min","aria-labelledby","interfaceOpen","Audio","interfaceOpenAudio","interfaceClose","interfaceCloseAudio","clickInfoMenu","clickInfoMenuAudio","clickButton","clickButtonAudio","roundEndAudio","clickHegemonAttack","clickHegemonAttackAudio","stepLandAudio","streetAmbience","streetAmbienceAudio","preload","loop","soundEffects","clickInsurgent","clickInsurgentAudio","clickHegemonMove","clickHegemonMoveAudio","explosionAudio","hegemonMoveAudio","hegemonMoveWaterAudio","stepTransportAudio","hegemonDeathAudio","sound","currentTime","play","Board","emptyInsurgent","infoMenu","setInfoMenu","selectedHegemonMovement","infoMenuToComponent","intelligence","title","gameplay","winning","showInsurgentMovement","closeInfo","info","document","getElementById","settings","body","getElementsByTagName","overflow","openInfo","focus","changeInfoMenu","menu","oldScrollValue","scrollTop","scrollIntoView","openSettings","endInsurgentsRound","endHegemonRound","hegemonPieces","index","topExtra","showHegemonMovement","indexOf","showHegemonAttack","insurgentPieces","avgRow","ReactDOM","render","onclick","onkeydown","ev","key","innerHTML","toUpperCase","year","preStart","insurgentStart","hegemonStart","insurgentMove","insurgentPlace","insurgentWin","hegemonWin","backgroundMusicAudio","autoplay","element","cellToColor","0","1","2","3","Display","layout","border","spacing","transpose","bg","draw","gameContainer","getContainer","boardDiv","appendChild","locations","location","createElement","textContent","name","fontFamily","fontWeight","fontSize","userSelect","rotate","renderBoard"],"mappings":"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","file":"static/js/main.70031e54.chunk.js","sourcesContent":["import { areHexesEqual, compareHexes, getCellValue } from \"./Hegemon\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { Hegemon, Hexagon, Insurgent, Point } from \"./types\";\r\n\r\nexport const isVertexValid = (\r\n  insurgent: Insurgent,\r\n  insurgents: Insurgent[],\r\n  board: number[][]\r\n) => {\r\n  if (\r\n    getCellValue(insurgent.hex1, board) === 1 &&\r\n    getCellValue(insurgent.hex2, board) === 1 &&\r\n    getCellValue(insurgent.hex3, board) === 1\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  if (\r\n    (getCellValue(insurgent.hex1, board) === 2 ||\r\n      getCellValue(insurgent.hex1, board) === 3 ||\r\n      getCellValue(insurgent.hex2, board) === 2 ||\r\n      getCellValue(insurgent.hex2, board) === 3 ||\r\n      getCellValue(insurgent.hex3, board) === 2 ||\r\n      getCellValue(insurgent.hex3, board) === 3) &&\r\n    insurgent.orientation !== \"base\"\r\n  ) {\r\n    return false;\r\n  }\r\n  for (const piece of insurgents) {\r\n    if (arePointsEqual(piece, insurgent)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const arePointsEqual = (\r\n  i1: Insurgent | Point,\r\n  i2: Insurgent | Point\r\n) => {\r\n  return (\r\n    areHexesEqual(i1.hex1, i2.hex1) &&\r\n    areHexesEqual(i1.hex2, i2.hex2) &&\r\n    areHexesEqual(i1.hex3, i2.hex3)\r\n  );\r\n};\r\n\r\nexport const isInsurgentAdjacentToHex = (\r\n  i: Insurgent,\r\n  h: Hegemon | Hexagon\r\n) => {\r\n  if (\r\n    areHexesEqual(i.hex1, h) ||\r\n    areHexesEqual(i.hex2, h) ||\r\n    areHexesEqual(i.hex3, h)\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport const sortHexesInsideInsurgent = (ins: Insurgent | Point) => {\r\n  // Sort hexes before checking\r\n  if (compareHexes(ins.hex1, ins.hex3)) {\r\n    [ins.hex1, ins.hex3] = [ins.hex3, ins.hex1];\r\n  }\r\n  if (compareHexes(ins.hex1, ins.hex2)) {\r\n    [ins.hex1, ins.hex2] = [ins.hex2, ins.hex1];\r\n  }\r\n  if (compareHexes(ins.hex2, ins.hex3)) {\r\n    [ins.hex2, ins.hex3] = [ins.hex3, ins.hex2];\r\n  }\r\n};\r\n\r\nexport const isPointOnWater = (point: Point, board: number[][]) => {\r\n  if (\r\n    getCellValue(point.hex1, board) === 1 &&\r\n    getCellValue(point.hex2, board) === 1 &&\r\n    getCellValue(point.hex3, board) === 1\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const isPointOnRails = (point: Point | Insurgent, board: number[][]) => {\r\n  if (\r\n    getCellValue(point.hex1, board) === 2 ||\r\n    getCellValue(point.hex2, board) === 2 ||\r\n    getCellValue(point.hex3, board) === 2 ||\r\n    getCellValue(point.hex1, board) === 3 ||\r\n    getCellValue(point.hex2, board) === 3 ||\r\n    getCellValue(point.hex3, board) === 3\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const isPointValid = (\r\n  point: Point,\r\n  points: Point[],\r\n  prev: Point,\r\n  selectedInsurgent: Insurgent,\r\n  move: number,\r\n  insurgents: Insurgent[],\r\n  board: number[][]\r\n) => {\r\n  // Prevent going on water\r\n  if (\r\n    getCellValue(point.hex1, board) === 1 &&\r\n    getCellValue(point.hex2, board) === 1 &&\r\n    getCellValue(point.hex3, board) === 1\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  // TODO\r\n  if (point.distance > selectedInsurgent.moves) {\r\n    return false;\r\n  }\r\n\r\n  // Prevent going over water\r\n  let firstCommon: Hexagon = point.hex1;\r\n  let secondCommon: Hexagon = point.hex2;\r\n\r\n  if (\r\n    !areHexesEqual(prev.hex1, point.hex1) &&\r\n    !areHexesEqual(prev.hex2, point.hex1) &&\r\n    !areHexesEqual(prev.hex3, point.hex1)\r\n  ) {\r\n    firstCommon = point.hex2;\r\n    secondCommon = point.hex3;\r\n  }\r\n\r\n  if (\r\n    !areHexesEqual(prev.hex1, point.hex2) &&\r\n    !areHexesEqual(prev.hex2, point.hex2) &&\r\n    !areHexesEqual(prev.hex3, point.hex2)\r\n  ) {\r\n    firstCommon = point.hex1;\r\n    secondCommon = point.hex3;\r\n  }\r\n\r\n  if (\r\n    !areHexesEqual(prev.hex1, point.hex3) &&\r\n    !areHexesEqual(prev.hex2, point.hex3) &&\r\n    !areHexesEqual(prev.hex3, point.hex3)\r\n  ) {\r\n    firstCommon = point.hex1;\r\n    secondCommon = point.hex2;\r\n  }\r\n\r\n  if (\r\n    getCellValue(firstCommon, board) === 1 &&\r\n    getCellValue(secondCommon, board) === 1\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  // Prevent going through other insurgents\r\n  for (const piece of insurgents) {\r\n    if (arePointsEqual(piece, point)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Prevent doubled points\r\n  for (const p of points) {\r\n    if (arePointsEqual(point, p)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const isPointBetweenThreeHegemons = (\r\n  point: Point,\r\n  hegemons: Hegemon[]\r\n) => {\r\n  let exists1 = false;\r\n  let exists2 = false;\r\n  let exists3 = false;\r\n\r\n  for (const hegemon of hegemons) {\r\n    if (areHexesEqual(hegemon, point.hex1)) {\r\n      exists1 = true;\r\n    }\r\n    if (areHexesEqual(hegemon, point.hex2)) {\r\n      exists2 = true;\r\n    }\r\n    if (areHexesEqual(hegemon, point.hex3)) {\r\n      exists3 = true;\r\n    }\r\n  }\r\n  return exists1 && exists2 && exists3;\r\n};\r\n\r\nconst listIncludesPoint = (points: Point[], point: Point) => {\r\n  for (var p of points) {\r\n    if (arePointsEqual(p, point)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const getInsurgentNeighbors = (\r\n  selectedInsurgent: Insurgent,\r\n  insurgents: Insurgent[],\r\n  board: number[][]\r\n) => {\r\n  let neighbors: Point[] = [];\r\n\r\n  // add the initial point\r\n  neighbors.push({\r\n    id: uuidv4(),\r\n    hex1: selectedInsurgent.hex1,\r\n    hex2: selectedInsurgent.hex2,\r\n    hex3: selectedInsurgent.hex3,\r\n    distance: 0,\r\n  });\r\n\r\n  const railPoints: Point[] = [];\r\n\r\n  for (let move = 1; move <= selectedInsurgent.moves; move++) {\r\n    // for each step, for each neighbor,\r\n    // \"reflect\" one of the hexes => 3 possible moves\r\n    // add it to the list if it does not exist\r\n    const newNeighbors = JSON.parse(JSON.stringify(neighbors));\r\n    for (const neighbor of neighbors) {\r\n      if (neighbor.hex1.col < neighbor.hex2.col) {\r\n        const right = {\r\n          id: uuidv4(),\r\n\r\n          hex1: {\r\n            id: uuidv4(),\r\n            col: neighbor.hex1.col + 2,\r\n            row: neighbor.hex1.row,\r\n          },\r\n          hex2: neighbor.hex2,\r\n          hex3: neighbor.hex3,\r\n          distance: neighbor.distance + 1,\r\n        };\r\n        sortHexesInsideInsurgent(right);\r\n        if (\r\n          isPointOnRails(right, board) &&\r\n          selectedInsurgent.orientation !== \"base\" &&\r\n          !listIncludesPoint(railPoints, right)\r\n        ) {\r\n          right.distance += 1;\r\n          railPoints.push(right);\r\n        }\r\n        if (\r\n          isPointValid(\r\n            right,\r\n            newNeighbors,\r\n            neighbor,\r\n            selectedInsurgent,\r\n            move,\r\n            insurgents,\r\n            board\r\n          )\r\n        )\r\n          newNeighbors.push(right);\r\n\r\n        const leftUp = {\r\n          id: uuidv4(),\r\n\r\n          hex1: neighbor.hex1,\r\n          hex2: neighbor.hex2,\r\n          hex3: {\r\n            id: uuidv4(),\r\n            col: neighbor.hex3.col - 1,\r\n            row:\r\n              neighbor.hex3.col % 2 === 0\r\n                ? neighbor.hex3.row - 2\r\n                : neighbor.hex3.row - 1,\r\n          },\r\n          distance: neighbor.distance + 1,\r\n        };\r\n        sortHexesInsideInsurgent(leftUp);\r\n        if (\r\n          isPointOnRails(leftUp, board) &&\r\n          selectedInsurgent.orientation !== \"base\" &&\r\n          !listIncludesPoint(railPoints, leftUp)\r\n        ) {\r\n          leftUp.distance += 1;\r\n          railPoints.push(leftUp);\r\n        }\r\n        if (\r\n          isPointValid(\r\n            leftUp,\r\n            newNeighbors,\r\n            neighbor,\r\n            selectedInsurgent,\r\n            move,\r\n            insurgents,\r\n            board\r\n          )\r\n        )\r\n          newNeighbors.push(leftUp);\r\n\r\n        const leftBottom = {\r\n          id: uuidv4(),\r\n\r\n          hex1: neighbor.hex1,\r\n          hex2: {\r\n            id: uuidv4(),\r\n            col: neighbor.hex2.col - 1,\r\n            row:\r\n              neighbor.hex2.col % 2 === 0\r\n                ? neighbor.hex2.row + 1\r\n                : neighbor.hex2.row + 2,\r\n          },\r\n          hex3: neighbor.hex3,\r\n          distance: neighbor.distance + 1,\r\n        };\r\n        sortHexesInsideInsurgent(leftBottom);\r\n        if (\r\n          isPointOnRails(leftBottom, board) &&\r\n          selectedInsurgent.orientation !== \"base\" &&\r\n          !listIncludesPoint(railPoints, leftBottom)\r\n        ) {\r\n          leftBottom.distance += 1;\r\n          railPoints.push(leftBottom);\r\n        }\r\n        if (\r\n          isPointValid(\r\n            leftBottom,\r\n            newNeighbors,\r\n            neighbor,\r\n            selectedInsurgent,\r\n            move,\r\n            insurgents,\r\n            board\r\n          )\r\n        )\r\n          newNeighbors.push(leftBottom);\r\n      } else if (neighbor.hex3.col > neighbor.hex2.col) {\r\n        const left = {\r\n          id: uuidv4(),\r\n\r\n          hex1: neighbor.hex1,\r\n          hex2: neighbor.hex2,\r\n          hex3: {\r\n            id: uuidv4(),\r\n            col: neighbor.hex3.col - 2,\r\n            row: neighbor.hex3.row,\r\n          },\r\n          distance: neighbor.distance + 1,\r\n        };\r\n        sortHexesInsideInsurgent(left);\r\n        if (\r\n          isPointOnRails(left, board) &&\r\n          selectedInsurgent.orientation !== \"base\" &&\r\n          !listIncludesPoint(railPoints, left)\r\n        ) {\r\n          left.distance += 1;\r\n          railPoints.push(left);\r\n        }\r\n        if (\r\n          isPointValid(\r\n            left,\r\n            newNeighbors,\r\n            neighbor,\r\n            selectedInsurgent,\r\n            move,\r\n            insurgents,\r\n            board\r\n          )\r\n        )\r\n          newNeighbors.push(left);\r\n\r\n        const rightUp = {\r\n          id: uuidv4(),\r\n\r\n          hex1: neighbor.hex1,\r\n          hex2: {\r\n            id: uuidv4(),\r\n            col: neighbor.hex2.col + 1,\r\n            row:\r\n              neighbor.hex2.col % 2 === 0\r\n                ? neighbor.hex2.row - 2\r\n                : neighbor.hex2.row - 1,\r\n          },\r\n          hex3: neighbor.hex3,\r\n          distance: neighbor.distance + 1,\r\n        };\r\n        sortHexesInsideInsurgent(rightUp);\r\n        if (\r\n          isPointOnRails(rightUp, board) &&\r\n          selectedInsurgent.orientation !== \"base\" &&\r\n          !listIncludesPoint(railPoints, rightUp)\r\n        ) {\r\n          rightUp.distance += 1;\r\n          railPoints.push(rightUp);\r\n        }\r\n        if (\r\n          isPointValid(\r\n            rightUp,\r\n            newNeighbors,\r\n            neighbor,\r\n            selectedInsurgent,\r\n            move,\r\n            insurgents,\r\n            board\r\n          )\r\n        )\r\n          newNeighbors.push(rightUp);\r\n\r\n        const rightDown = {\r\n          id: uuidv4(),\r\n\r\n          hex1: {\r\n            id: uuidv4(),\r\n            col: neighbor.hex1.col + 1,\r\n            row:\r\n              neighbor.hex1.col % 2 === 0\r\n                ? neighbor.hex1.row + 1\r\n                : neighbor.hex1.row + 2,\r\n          },\r\n          hex2: neighbor.hex2,\r\n          hex3: neighbor.hex3,\r\n          distance: neighbor.distance + 1,\r\n        };\r\n        sortHexesInsideInsurgent(rightDown);\r\n        if (\r\n          isPointOnRails(rightDown, board) &&\r\n          selectedInsurgent.orientation !== \"base\" &&\r\n          !listIncludesPoint(railPoints, rightDown)\r\n        ) {\r\n          rightDown.distance += 1;\r\n          railPoints.push(rightDown);\r\n        }\r\n\r\n        if (\r\n          isPointValid(\r\n            rightDown,\r\n            newNeighbors,\r\n            neighbor,\r\n            selectedInsurgent,\r\n            move,\r\n            insurgents,\r\n            board\r\n          )\r\n        )\r\n          newNeighbors.push(rightDown);\r\n      }\r\n    }\r\n    neighbors = JSON.parse(JSON.stringify(newNeighbors));\r\n  }\r\n\r\n  neighbors.splice(0, 1);\r\n  return neighbors;\r\n};\r\n\r\nexport const getAllInsurgentsNeighbors = (\r\n  insurgents: Insurgent[],\r\n  board: number[][]\r\n): Point[] => {\r\n  let points: Point[] = [];\r\n\r\n  if (insurgents.length === 0) {\r\n    for (let x = -1; x < board[0].length; x++) {\r\n      for (let y = -1; y < board.length / 2 + 1; y++) {\r\n        const point1: Point = {\r\n          id: uuidv4(),\r\n          hex1: { id: uuidv4(), col: x, row: y },\r\n          hex2: { id: uuidv4(), col: x + 1, row: y },\r\n          hex3: { id: uuidv4(), col: x, row: x % 2 === 0 ? y + 1 : y - 1 },\r\n          distance: 0,\r\n        };\r\n        if (!isPointOnWater(point1, board)) {\r\n          sortHexesInsideInsurgent(point1);\r\n          points.push(point1);\r\n        }\r\n\r\n        const point2: Point = {\r\n          id: uuidv4(),\r\n          hex1: { id: uuidv4(), col: x, row: y },\r\n          hex2: { id: uuidv4(), col: x - 1, row: y },\r\n          hex3: { id: uuidv4(), col: x, row: x % 2 === 0 ? y + 1 : y - 1 },\r\n          distance: 0,\r\n        };\r\n        if (!isPointOnWater(point2, board)) {\r\n          sortHexesInsideInsurgent(point2);\r\n          points.push(point2);\r\n        }\r\n      }\r\n    }\r\n    return points;\r\n    // should return all the possible points on the board\r\n  }\r\n\r\n  for (const insurgent of insurgents) {\r\n    const neighbors = getInsurgentNeighbors(insurgent, insurgents, board);\r\n    for (const neighbor of neighbors) {\r\n      let isInList = false;\r\n      for (const point of points) {\r\n        if (arePointsEqual(point, neighbor)) {\r\n          isInList = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!isInList) {\r\n        points.push(neighbor);\r\n      }\r\n    }\r\n  }\r\n\r\n  return points;\r\n};\r\n","import { v4 as uuidv4 } from \"uuid\";\r\nimport {\r\n  isInsurgentAdjacentToHex,\r\n  sortHexesInsideInsurgent,\r\n} from \"./Insurgent\";\r\nimport { Hegemon, Hexagon, Insurgent, Point } from \"./types\";\r\n\r\nexport const isCellValid = (\r\n  hegemon: Hegemon | Hexagon,\r\n  hegemons: Hegemon[],\r\n  board: number[][]\r\n) => {\r\n  if (\r\n    hegemon.row < 0 ||\r\n    hegemon.col < 0 ||\r\n    hegemon.row >= board.length / 2 ||\r\n    hegemon.col >= board[0].length\r\n  ) {\r\n    return false;\r\n  }\r\n  for (const piece of hegemons) {\r\n    if (piece.col === hegemon.col && piece.row === hegemon.row) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  if (board[(hegemon.col % 2) + hegemon.row * 2][hegemon.col] === 2) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const getCellValue = (hegemon: Hegemon | Hexagon, board: number[][]) => {\r\n  if (\r\n    hegemon.row < 0 ||\r\n    hegemon.col < 0 ||\r\n    hegemon.row >= board.length / 2 ||\r\n    hegemon.col >= board[0].length\r\n  ) {\r\n    return 1;\r\n  }\r\n  return board[(hegemon.col % 2) + hegemon.row * 2][hegemon.col];\r\n};\r\n\r\nexport const compareHexes = (h1: Hegemon | Hexagon, h2: Hegemon | Hexagon) => {\r\n  // Returns the bigger one\r\n  if (h1.col === h2.col) {\r\n    return h1.row > h2.row;\r\n  }\r\n\r\n  return h1.col > h2.col;\r\n};\r\n\r\nexport const areHexesEqual = (h1: Hegemon | Hexagon, h2: Hegemon | Hexagon) => {\r\n  return h1.col === h2.col && h1.row === h2.row;\r\n};\r\n\r\nexport const isSpaceAvailable = (hegemons: Hegemon[], board: number[][]) => {\r\n  for (let j = 0; j < board[0].length; j++) {\r\n    for (let i = j % 2; i < board.length; i += 2) {\r\n      if (board[i][j] !== 2) {\r\n        let found = false;\r\n        for (const hegemon of hegemons) {\r\n          if ((hegemon.col % 2) + hegemon.row * 2 === i && hegemon.col === j) {\r\n            found = true;\r\n            if (found) break;\r\n          }\r\n        }\r\n        if (!found) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const getHegemonGroup = (\r\n  hegemon: Hegemon,\r\n  hegemons: Hegemon[],\r\n  group: Hegemon[],\r\n  board: number[][]\r\n) => {\r\n  let exists = false;\r\n  for (const h of group) {\r\n    if (areHexesEqual(h, hegemon)) {\r\n      exists = true;\r\n      break;\r\n    }\r\n  }\r\n  if (!exists) {\r\n    group.push(hegemon);\r\n  }\r\n  const neighbors = getHexNeighbors(hegemon, hegemons, board, false);\r\n\r\n  for (const neighbor of neighbors) {\r\n    let isHegemon = false;\r\n    let foundHegemon: Hegemon = { id: uuidv4(), col: -1, row: -1, moves: 3 };\r\n    for (const heg of hegemons) {\r\n      if (areHexesEqual(heg, neighbor)) {\r\n        isHegemon = true;\r\n        foundHegemon = heg;\r\n        break;\r\n      }\r\n    }\r\n    if (isHegemon) {\r\n      let exists = false;\r\n      for (const h of group) {\r\n        if (areHexesEqual(h, foundHegemon)) {\r\n          exists = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!exists) {\r\n        group.push(foundHegemon);\r\n        getHegemonGroup(foundHegemon, hegemons, group, board);\r\n      }\r\n    }\r\n  }\r\n  return group;\r\n};\r\n\r\nexport const getHexNeighbors = (\r\n  hegemon: Hexagon | Hegemon,\r\n  hegemons: Hegemon[],\r\n  board: number[][],\r\n  available: boolean\r\n) => {\r\n  let neighbors: Hexagon[] = [];\r\n  if (hegemon.col < 0 || hegemon.row < 0) {\r\n    return neighbors;\r\n  }\r\n\r\n  // bottom\r\n  neighbors.push({ id: uuidv4(), col: hegemon.col, row: hegemon.row + 1 });\r\n\r\n  // up\r\n  neighbors.push({ id: uuidv4(), col: hegemon.col, row: hegemon.row - 1 });\r\n\r\n  // right-up\r\n  const rightUp: Hexagon = {\r\n    id: uuidv4(),\r\n    col: hegemon.col + 1,\r\n    row: hegemon.row,\r\n  };\r\n  if (hegemon.col % 2 === 0) {\r\n    rightUp.row--;\r\n  }\r\n  neighbors.push(rightUp);\r\n\r\n  // right-bottom\r\n  const rightBottom: Hexagon = {\r\n    id: uuidv4(),\r\n    col: hegemon.col + 1,\r\n    row: hegemon.row + 1,\r\n  };\r\n  if (hegemon.col % 2 === 0) {\r\n    rightBottom.row--;\r\n  }\r\n  neighbors.push(rightBottom);\r\n\r\n  // left-up\r\n  const leftUp: Hexagon = {\r\n    id: uuidv4(),\r\n    col: hegemon.col - 1,\r\n    row: hegemon.row,\r\n  };\r\n  if (hegemon.col % 2 === 0) {\r\n    leftUp.row--;\r\n  }\r\n  neighbors.push(leftUp);\r\n\r\n  // left-bottom\r\n  const leftBottom: Hexagon = {\r\n    id: uuidv4(),\r\n    col: hegemon.col - 1,\r\n    row: hegemon.row + 1,\r\n  };\r\n  if (hegemon.col % 2 === 0) {\r\n    leftBottom.row--;\r\n  }\r\n  neighbors.push(leftBottom);\r\n\r\n  if (available) {\r\n    neighbors = neighbors.filter((hex) => isCellValid(hex, hegemons, board));\r\n  } else {\r\n    neighbors = neighbors.filter(\r\n      (hex) =>\r\n        hex.col >= 0 &&\r\n        hex.row >= 0 &&\r\n        hex.row < board.length / 2 &&\r\n        hex.col < board[0].length\r\n    );\r\n  }\r\n  return JSON.parse(JSON.stringify(neighbors));\r\n};\r\n\r\nexport const getAllHegemonPlaces = (\r\n  hegemons: Hegemon[],\r\n  insurgents: Insurgent[],\r\n  board: number[][]\r\n): Hexagon[] => {\r\n  let hexagons: Hexagon[] = [];\r\n\r\n  for (let x = 0; x < board[0].length; x++) {\r\n    for (let y = 0; y < board.length / 2; y++) {\r\n      const hex = {\r\n        id: uuidv4(),\r\n        col: x,\r\n        row: y,\r\n      };\r\n      if (isCellValid(hex, hegemons, board)) {\r\n        let intersects = false;\r\n        for (const ins of insurgents) {\r\n          for (const h of getHexNeighbors(hex, hegemons, board, false)) {\r\n            if (isInsurgentAdjacentToHex(ins, h)) {\r\n              intersects = true;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!intersects) {\r\n          hexagons.push(hex);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return hexagons;\r\n};\r\n\r\nexport const getHexPoints = (hex: Hexagon | Hegemon) => {\r\n  // 6 points\r\n  const points: Point[] = [];\r\n\r\n  // left\r\n  const left: Point = {\r\n    id: uuidv4(),\r\n    hex1: JSON.parse(JSON.stringify(hex)),\r\n    hex2: {\r\n      id: uuidv4(),\r\n      col: hex.col - 1,\r\n      row: hex.col % 2 === 0 ? hex.row - 1 : hex.row,\r\n    },\r\n    hex3: {\r\n      id: uuidv4(),\r\n      col: hex.col - 1,\r\n      row: hex.col % 2 === 0 ? hex.row : hex.row + 1,\r\n    },\r\n    distance: 1,\r\n  };\r\n  sortHexesInsideInsurgent(left);\r\n  points.push(left);\r\n\r\n  // right\r\n  const right: Point = {\r\n    id: uuidv4(),\r\n    hex1: JSON.parse(JSON.stringify(hex)),\r\n    hex2: {\r\n      id: uuidv4(),\r\n      col: hex.col + 1,\r\n      row: hex.col % 2 === 0 ? hex.row - 1 : hex.row,\r\n    },\r\n    hex3: {\r\n      id: uuidv4(),\r\n      col: hex.col + 1,\r\n      row: hex.col % 2 === 0 ? hex.row : hex.row + 1,\r\n    },\r\n    distance: 1,\r\n  };\r\n  sortHexesInsideInsurgent(right);\r\n  points.push(right);\r\n\r\n  // left up\r\n  const leftUp: Point = {\r\n    id: uuidv4(),\r\n    hex1: JSON.parse(JSON.stringify(hex)),\r\n    hex2: {\r\n      id: uuidv4(),\r\n      col: hex.col - 1,\r\n      row: hex.col % 2 === 0 ? hex.row - 1 : hex.row,\r\n    },\r\n    hex3: {\r\n      id: uuidv4(),\r\n      col: hex.col,\r\n      row: hex.row - 1,\r\n    },\r\n    distance: 1,\r\n  };\r\n  sortHexesInsideInsurgent(leftUp);\r\n  points.push(leftUp);\r\n\r\n  // right up\r\n  const rightUp: Point = {\r\n    id: uuidv4(),\r\n    hex1: JSON.parse(JSON.stringify(hex)),\r\n    hex2: {\r\n      id: uuidv4(),\r\n      col: hex.col + 1,\r\n      row: hex.col % 2 === 0 ? hex.row - 1 : hex.row,\r\n    },\r\n    hex3: {\r\n      id: uuidv4(),\r\n      col: hex.col,\r\n      row: hex.row - 1,\r\n    },\r\n    distance: 1,\r\n  };\r\n  sortHexesInsideInsurgent(rightUp);\r\n  points.push(rightUp);\r\n\r\n  // left down\r\n  const leftDown: Point = {\r\n    id: uuidv4(),\r\n    hex1: JSON.parse(JSON.stringify(hex)),\r\n    hex2: {\r\n      id: uuidv4(),\r\n      col: hex.col - 1,\r\n      row: hex.col % 2 === 0 ? hex.row : hex.row + 1,\r\n    },\r\n    hex3: {\r\n      id: uuidv4(),\r\n      col: hex.col,\r\n      row: hex.row + 1,\r\n    },\r\n    distance: 1,\r\n  };\r\n  sortHexesInsideInsurgent(leftDown);\r\n  points.push(leftDown);\r\n\r\n  // right down\r\n  const rightDown: Point = {\r\n    id: uuidv4(),\r\n    hex1: JSON.parse(JSON.stringify(hex)),\r\n    hex2: {\r\n      id: uuidv4(),\r\n      col: hex.col + 1,\r\n      row: hex.col % 2 === 0 ? hex.row : hex.row + 1,\r\n    },\r\n    hex3: {\r\n      id: uuidv4(),\r\n      col: hex.col,\r\n      row: hex.row + 1,\r\n    },\r\n    distance: 1,\r\n  };\r\n  sortHexesInsideInsurgent(rightDown);\r\n  points.push(rightDown);\r\n\r\n  return points;\r\n};\r\n","import { Dispatch, SetStateAction } from \"react\";\r\nimport { areHexesEqual, getCellValue, getHexNeighbors } from \"./Hegemon\";\r\nimport { isInsurgentAdjacentToHex } from \"./Insurgent\";\r\nimport { Hexagon, Hegemon, Insurgent, Game, Config } from \"./types\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { playSound } from \"./Board\";\r\n\r\nexport const PreviewHex = (props: {\r\n  hex: Hexagon;\r\n  hegemon: Hexagon;\r\n  hegemons: Hegemon[];\r\n  setHegemons: Dispatch<SetStateAction<Hegemon[]>>;\r\n  selectedHegemonAttack: Hexagon;\r\n  setSelectedHegemonMovement: Dispatch<SetStateAction<Hexagon>>;\r\n  setSelectedHegemonAttack: Dispatch<SetStateAction<Hexagon>>;\r\n  insurgents: Insurgent[];\r\n  setInsurgents: Dispatch<SetStateAction<Insurgent[]>>;\r\n  game: Game;\r\n  setGame: Dispatch<SetStateAction<Game>>;\r\n  config: Config;\r\n  scale: number;\r\n  color: string;\r\n  explosion: HTMLAudioElement;\r\n  hegemonMove: HTMLAudioElement;\r\n  hegemonMoveWater: HTMLAudioElement;\r\n  roundEnd: HTMLAudioElement;\r\n}) => {\r\n  const {\r\n    hex,\r\n    hegemon,\r\n    hegemons,\r\n    setHegemons,\r\n    selectedHegemonAttack,\r\n    setSelectedHegemonMovement,\r\n    setSelectedHegemonAttack,\r\n    game,\r\n    setGame,\r\n    insurgents,\r\n    setInsurgents,\r\n    config,\r\n    scale,\r\n    color,\r\n    explosion,\r\n    hegemonMove,\r\n    hegemonMoveWater,\r\n    roundEnd,\r\n  } = props;\r\n\r\n  const moveHegemon = (hex: Hexagon, hegemon: Hexagon, hegemons: Hegemon[]) => {\r\n    const newHegemons: Hegemon[] = JSON.parse(JSON.stringify(hegemons));\r\n    const idx = newHegemons.findIndex((h) => areHexesEqual(h, hegemon));\r\n    newHegemons[idx].col = hex.col;\r\n    newHegemons[idx].row = hex.row;\r\n    newHegemons[idx].moves = 0;\r\n\r\n    if (getCellValue(hex, config.board) === 1) {\r\n      playSound(hegemonMoveWater);\r\n    } else {\r\n      playSound(hegemonMove);\r\n    }\r\n\r\n    // If round end\r\n    if (newHegemons.find((h) => h.moves > 0) === undefined) {\r\n      playSound(roundEnd);\r\n      for (const heg of newHegemons) {\r\n        heg.moves = config.hegemonMoves;\r\n      }\r\n      setHegemons(newHegemons);\r\n\r\n      const newGame: Game = JSON.parse(JSON.stringify(game));\r\n      newGame.gameplayState = \"insurgentMove\";\r\n      setGame(newGame);\r\n    }\r\n\r\n    setHegemons(newHegemons);\r\n\r\n    setSelectedHegemonMovement({\r\n      id: \"\",\r\n      col: -1,\r\n      row: -1,\r\n    });\r\n    setSelectedHegemonAttack({\r\n      id: \"\",\r\n      col: -2,\r\n      row: -2,\r\n    });\r\n  };\r\n  const attackWithHegemon = (\r\n    hegemon: Hexagon,\r\n    hegemons: Hegemon[],\r\n    insurgents: Insurgent[]\r\n  ) => {\r\n    playSound(explosion);\r\n    const newHegemons: Hegemon[] = JSON.parse(JSON.stringify(hegemons));\r\n    const idx = newHegemons.findIndex((h) => areHexesEqual(h, hegemon));\r\n    newHegemons[idx].moves = 0;\r\n\r\n    // Attack the insurgents\r\n    let newInsurgents: Insurgent[] = JSON.parse(JSON.stringify(insurgents));\r\n\r\n    for (const insurgent of newInsurgents) {\r\n      let isInRange = false;\r\n\r\n      const neighbors: Array<Hegemon | Hexagon> = getHexNeighbors(\r\n        hegemon,\r\n        hegemons,\r\n        config.board,\r\n        false\r\n      );\r\n      neighbors.push(hegemon);\r\n      for (const neighbor of neighbors) {\r\n        if (isInsurgentAdjacentToHex(insurgent, neighbor)) {\r\n          isInRange = true;\r\n        }\r\n      }\r\n\r\n      if (isInRange) {\r\n        insurgent.attacked += 1;\r\n      }\r\n\r\n      insurgent.willBeAttacked = false;\r\n    }\r\n    newInsurgents = newInsurgents.filter((ins) => {\r\n      if (ins.orientation === \"base\" && ins.attacked >= 1) {\r\n        return false;\r\n      } else if (\r\n        (ins.orientation === \"down\" || ins.orientation === \"up\") &&\r\n        ins.attacked >= 2\r\n      ) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n    const deadInsurgents = insurgents.length - newInsurgents.length;\r\n    setInsurgents(newInsurgents);\r\n\r\n    const newGame: Game = JSON.parse(JSON.stringify(game));\r\n    newGame.deadInsurgents = game.deadInsurgents + deadInsurgents;\r\n    if (newGame.deadInsurgents >= config.insurgentsToDie) {\r\n      newGame.gameplayState = \"hegemonWin\";\r\n    }\r\n    setGame(newGame);\r\n\r\n    // If round end\r\n    if (newHegemons.find((h) => h.moves > 0) === undefined) {\r\n      for (const heg of newHegemons) {\r\n        heg.moves = 1;\r\n      }\r\n\r\n      if (newGame.deadInsurgents >= config.insurgentsToDie) {\r\n        newGame.gameplayState = \"hegemonWin\";\r\n      } else {\r\n        newGame.gameplayState = \"insurgentMove\";\r\n      }\r\n\r\n      setGame(newGame);\r\n    }\r\n\r\n    setHegemons(newHegemons);\r\n    setSelectedHegemonAttack({\r\n      id: \"\",\r\n      col: -2,\r\n      row: -2,\r\n    });\r\n  };\r\n\r\n  const placeHegemon = (hex: Hexagon, hegemons: Hegemon[]) => {\r\n    const hegemon: Hegemon = {\r\n      id: uuidv4(),\r\n      col: hex.col,\r\n      row: hex.row,\r\n      moves: 1,\r\n    };\r\n    if (getCellValue(hex, config.board) === 1) {\r\n      playSound(hegemonMoveWater);\r\n    } else {\r\n      playSound(hegemonMove);\r\n    }\r\n\r\n    const newHegemons: Hegemon[] = JSON.parse(JSON.stringify(hegemons));\r\n    newHegemons.push(hegemon);\r\n\r\n    setHegemons(newHegemons);\r\n\r\n    const newGame: Game = JSON.parse(JSON.stringify(game));\r\n    if (newHegemons.length === config.startHegemons) {\r\n      playSound(roundEnd);\r\n      newGame.gameplayState = \"insurgentMove\";\r\n      setGame(newGame);\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n      onClick={() =>\r\n        game.gameplayState === \"hegemonMove\"\r\n          ? selectedHegemonAttack.col < 0\r\n            ? moveHegemon(hex, hegemon, hegemons)\r\n            : attackWithHegemon(hegemon, hegemons, insurgents)\r\n          : placeHegemon(hex, hegemons)\r\n      }\r\n      onContextMenu={(e) => e.preventDefault()}\r\n      className={\r\n        selectedHegemonAttack.col < 0\r\n          ? \"hegemonMovementHex\"\r\n          : \"hegemonAttackHex\"\r\n      }\r\n      style={{\r\n        position: \"absolute\",\r\n        opacity: selectedHegemonAttack.col >= 0 ? \"0.8\" : \"0.65\",\r\n        cursor: selectedHegemonAttack.col < 0 ? \"pointer\" : \"crosshair\",\r\n        zIndex: 99,\r\n        transform: \"scale(\" + scale + \")\",\r\n        left: 10.5 + hex.col * 60 + \"px\",\r\n        top:\r\n          hex.col % 2 === 0\r\n            ? 48 + hex.row * 69.3 + \"px\"\r\n            : 83 + hex.row * 69.3 + \"px\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          float: \"left\",\r\n          borderRight: \"15px solid \" + color,\r\n          borderTop: \"26px solid transparent\",\r\n          borderBottom: \"26px solid transparent\",\r\n        }}\r\n      />\r\n      <div\r\n        style={{\r\n          float: \"left\",\r\n          width: \"30px\",\r\n          height: \"52px\",\r\n          backgroundColor: color,\r\n        }}\r\n      />\r\n      <div\r\n        style={{\r\n          float: \"left\",\r\n          borderLeft: \"15px solid \" + color,\r\n          borderTop: \"26px solid transparent\",\r\n          borderBottom: \"26px solid transparent\",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { Dispatch, SetStateAction } from \"react\";\r\nimport { PreviewHex } from \"./PreviewHex\";\r\nimport { Config, Game, Hegemon, Hexagon, Insurgent } from \"./types\";\r\n\r\nexport const PreviewHegemonPlacement = (props: {\r\n  hexes: Hexagon[];\r\n  hegemons: Hegemon[];\r\n  setHegemons: Dispatch<SetStateAction<Hegemon[]>>;\r\n  insurgents: Insurgent[];\r\n  setInsurgents: Dispatch<SetStateAction<Insurgent[]>>;\r\n  game: Game;\r\n  setGame: Dispatch<SetStateAction<Game>>;\r\n  config: Config;\r\n  color: string;\r\n  explosion: HTMLAudioElement;\r\n  hegemonMove: HTMLAudioElement;\r\n  hegemonMoveWater: HTMLAudioElement;\r\n  roundEnd: HTMLAudioElement;\r\n}) => {\r\n  const {\r\n    hexes,\r\n    hegemons,\r\n    setHegemons,\r\n    insurgents,\r\n    setInsurgents,\r\n    game,\r\n    setGame,\r\n    config,\r\n    color,\r\n    explosion,\r\n    hegemonMove,\r\n    hegemonMoveWater,\r\n    roundEnd,\r\n  } = props;\r\n\r\n  const emptyHegemon = {\r\n    id: \"\",\r\n    col: -2,\r\n    row: -2,\r\n  };\r\n  const hexPreviews = hexes.map((hex) => (\r\n    <PreviewHex\r\n      hex={hex}\r\n      // @ts-ignore\r\n      hegemon={null}\r\n      hegemons={hegemons}\r\n      setHegemons={setHegemons}\r\n      color={color}\r\n      scale={1}\r\n      selectedHegemonAttack={emptyHegemon}\r\n      // @ts-ignore\r\n      setSelectedHegemonMovement={null}\r\n      // @ts-ignore\r\n      setSelectedHegemonAttack={null}\r\n      insurgents={insurgents}\r\n      setInsurgents={setInsurgents}\r\n      game={game}\r\n      setGame={setGame}\r\n      config={config}\r\n      key={hex.id}\r\n      explosion={explosion}\r\n      hegemonMove={hegemonMove}\r\n      hegemonMoveWater={hegemonMoveWater}\r\n      roundEnd={roundEnd}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div\r\n      className={\"previewHexes\"}\r\n      style={{\r\n        opacity: \"0.5\",\r\n      }}\r\n    >\r\n      {hexPreviews}\r\n    </div>\r\n  );\r\n};\r\n","import { Dispatch, SetStateAction } from \"react\";\r\nimport { PreviewHex } from \"./PreviewHex\";\r\nimport { Hexagon, Hegemon, Insurgent, Game, Config } from \"./types\";\r\n\r\nexport const PreviewHexes = (props: {\r\n  hexes: Hexagon[];\r\n  hegemon: Hexagon;\r\n  hegemons: Hegemon[];\r\n  setHegemons: Dispatch<SetStateAction<Hegemon[]>>;\r\n  selectedHegemonAttack: Hexagon;\r\n  setSelectedHegemonMovement: Dispatch<SetStateAction<Hexagon>>;\r\n  setSelectedHegemonAttack: Dispatch<SetStateAction<Hexagon>>;\r\n  game: Game;\r\n  setGame: Dispatch<SetStateAction<Game>>;\r\n  insurgents: Insurgent[];\r\n  setInsurgents: Dispatch<SetStateAction<Insurgent[]>>;\r\n  config: Config;\r\n  color: string;\r\n  explosion: HTMLAudioElement;\r\n  hegemonMove: HTMLAudioElement;\r\n  hegemonMoveWater: HTMLAudioElement;\r\n  roundEnd: HTMLAudioElement;\r\n}) => {\r\n  const {\r\n    hexes,\r\n    hegemon,\r\n    hegemons,\r\n    setHegemons,\r\n    selectedHegemonAttack,\r\n    setSelectedHegemonMovement,\r\n    setSelectedHegemonAttack,\r\n    game,\r\n    setGame,\r\n    insurgents,\r\n    setInsurgents,\r\n    config,\r\n    color,\r\n    explosion,\r\n    hegemonMove,\r\n    hegemonMoveWater,\r\n    roundEnd,\r\n  } = props;\r\n  const hexPreviews = hexes.map((hex) => (\r\n    <PreviewHex\r\n      hex={hex}\r\n      hegemon={hegemon}\r\n      hegemons={hegemons}\r\n      setHegemons={setHegemons}\r\n      color={color}\r\n      scale={1}\r\n      selectedHegemonAttack={selectedHegemonAttack}\r\n      setSelectedHegemonMovement={setSelectedHegemonMovement}\r\n      setSelectedHegemonAttack={setSelectedHegemonAttack}\r\n      insurgents={insurgents}\r\n      setInsurgents={setInsurgents}\r\n      game={game}\r\n      setGame={setGame}\r\n      config={config}\r\n      key={hex.id}\r\n      explosion={explosion}\r\n      hegemonMove={hegemonMove}\r\n      hegemonMoveWater={hegemonMoveWater}\r\n      roundEnd={roundEnd}\r\n    />\r\n  ));\r\n  return (\r\n    <div\r\n      className={\r\n        selectedHegemonAttack.col >= 0 ? \"attackHexes\" : \"previewHexes\"\r\n      }\r\n      style={{\r\n        opacity: \"0.7\",\r\n      }}\r\n    >\r\n      {hexPreviews}\r\n    </div>\r\n  );\r\n};\r\n","import { Dispatch, SetStateAction } from \"react\";\r\nimport { playSound } from \"./Board\";\r\nimport { arePointsEqual, isPointOnRails } from \"./Insurgent\";\r\nimport { Config, Game, Hegemon, Insurgent } from \"./types\";\r\n\r\nexport const PreviewHeightMove = (props: {\r\n  insurgent: Insurgent;\r\n  hegemons: Hegemon[];\r\n  setHegemons: Dispatch<SetStateAction<Hegemon[]>>;\r\n  game: Game;\r\n  setGame: Dispatch<SetStateAction<Game>>;\r\n  insurgents: Insurgent[];\r\n  setInsurgents: Dispatch<SetStateAction<Insurgent[]>>;\r\n  setSelectedInsurgent: Dispatch<SetStateAction<Insurgent>>;\r\n  config: Config;\r\n  stepLand: HTMLAudioElement;\r\n}) => {\r\n  const {\r\n    insurgent,\r\n    game,\r\n    setGame,\r\n    insurgents,\r\n    setInsurgents,\r\n    setSelectedInsurgent,\r\n    config,\r\n    stepLand,\r\n  } = props;\r\n\r\n  // Difference between insurgent orientation and choice\r\n  // 1 = up, 0 = base, -1 = down\r\n  const orientationToNumber = {\r\n    up: 1,\r\n    base: 0,\r\n    down: -1,\r\n  };\r\n\r\n  const numberToOrientation: Record<string, \"up\" | \"base\" | \"down\"> = {\r\n    \"1\": \"up\",\r\n    \"0\": \"base\",\r\n    \"-1\": \"down\",\r\n  };\r\n\r\n  const moveInsurgentHeight = (\r\n    insurgent: Insurgent,\r\n    insurgents: Insurgent[],\r\n    choice: number\r\n  ) => {\r\n    playSound(stepLand);\r\n    const newInsurgents: Insurgent[] = JSON.parse(JSON.stringify(insurgents));\r\n    const idx = newInsurgents.findIndex((p) => arePointsEqual(p, insurgent));\r\n\r\n    const delta = Math.abs(orientationToNumber[insurgent.orientation] - choice);\r\n    newInsurgents[idx].moves -= delta;\r\n    newInsurgents[idx].orientation = numberToOrientation[choice.toString()];\r\n\r\n    // If round end\r\n    if (newInsurgents.find((p) => p.moves > 0) === undefined) {\r\n      for (const ins of newInsurgents) {\r\n        ins.attacked = 0;\r\n      }\r\n      for (const ins of newInsurgents) {\r\n        ins.moves = props.config.insurgentMoves;\r\n      }\r\n\r\n      setSelectedInsurgent({\r\n        id: \"\",\r\n        hex1: { id: \"\", col: -1, row: -1 },\r\n        hex2: { id: \"\", col: -1, row: -1 },\r\n        hex3: { id: \"\", col: -1, row: -1 },\r\n        orientation: \"base\",\r\n        willBeAttacked: false,\r\n        attacked: 0,\r\n        moves: 0,\r\n      });\r\n\r\n      const newGame: Game = JSON.parse(JSON.stringify(game));\r\n      newGame.gameplayState = \"insurgentPlace\";\r\n      setGame(newGame);\r\n    }\r\n\r\n    setInsurgents(newInsurgents);\r\n\r\n    // Remove preview if no moves left\r\n    if (newInsurgents[idx].moves < 1) {\r\n      setSelectedInsurgent({\r\n        id: \"\",\r\n        hex1: { id: \"\", col: -1, row: -1 },\r\n        hex2: { id: \"\", col: -1, row: -1 },\r\n        hex3: { id: \"\", col: -1, row: -1 },\r\n        orientation: \"base\",\r\n        willBeAttacked: false,\r\n        attacked: 0,\r\n        moves: 0,\r\n      });\r\n    } else {\r\n      setSelectedInsurgent(newInsurgents[idx]);\r\n    }\r\n  };\r\n\r\n  const canMakeMove = (\r\n    insurgent: Insurgent,\r\n    choice: number,\r\n    board: number[][]\r\n  ) => {\r\n    const delta = Math.abs(orientationToNumber[insurgent.orientation] - choice);\r\n\r\n    if (delta > 0 && delta <= insurgent.moves) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  let top = 0;\r\n  top +=\r\n    (insurgent.hex1.col % 2 === 0 ? 50 : 84.65) + insurgent.hex1.row * 69.3;\r\n  top +=\r\n    (insurgent.hex2.col % 2 === 0 ? 50 : 84.65) + insurgent.hex2.row * 69.3;\r\n  top +=\r\n    (insurgent.hex3.col % 2 === 0 ? 50 : 84.65) + insurgent.hex3.row * 69.3;\r\n  top /= 3;\r\n\r\n  let left = 0;\r\n  left += 14 + insurgent.hex1.col * 60.1;\r\n  left += 14 + insurgent.hex2.col * 60.1;\r\n  left += 14 + insurgent.hex3.col * 60.1;\r\n  left /= 3;\r\n\r\n  const canGoUp = canMakeMove(insurgent, 1, config.board);\r\n  const canGoBase = canMakeMove(insurgent, 0, config.board);\r\n  const canGoDown = canMakeMove(insurgent, -1, config.board);\r\n\r\n  return insurgent.id !== \"\" &&\r\n    insurgent.moves > 0 &&\r\n    !isPointOnRails(insurgent, config.board) ? (\r\n    <div\r\n      style={{\r\n        position: \"absolute\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        backgroundColor: \"rgba(200, 0, 0, 0.8)\",\r\n        left: 39 + left + \"px\",\r\n        top: 7 + top + \"px\",\r\n        padding: \"2px\",\r\n        zIndex: 109,\r\n        transform: \"!important\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          float: \"left\",\r\n          width: 0,\r\n          height: 0,\r\n          borderLeft: \"5px solid transparent\",\r\n          borderRight: \"5px solid transparent\",\r\n          borderBottom: \"8px solid white\",\r\n\r\n          cursor: canGoUp ? \"pointer\" : \"default\",\r\n          opacity: canGoUp ? \"0.8\" : 0,\r\n          zIndex: 99,\r\n        }}\r\n        onClick={() =>\r\n          canGoUp ? moveInsurgentHeight(insurgent, insurgents, 1) : null\r\n        }\r\n      />\r\n      <div\r\n        style={{\r\n          float: \"left\",\r\n          width: \"8px\",\r\n          height: \"8px\",\r\n          borderRadius: \"10px\",\r\n          backgroundColor: \"white\",\r\n          margin: \"4px 0 4px 0\",\r\n\r\n          cursor: canGoBase ? \"pointer\" : \"default\",\r\n          opacity: canGoBase ? \"0.8\" : 0,\r\n          zIndex: 99,\r\n        }}\r\n        onClick={() =>\r\n          canGoBase ? moveInsurgentHeight(insurgent, insurgents, 0) : null\r\n        }\r\n      />\r\n      <div\r\n        style={{\r\n          float: \"left\",\r\n          width: 0,\r\n          height: 0,\r\n          borderLeft: \"5px solid transparent\",\r\n          borderRight: \"5px solid transparent\",\r\n          borderTop: \"8px solid white\",\r\n\r\n          cursor: canGoDown ? \"pointer\" : \"default\",\r\n          opacity: canGoDown ? \"0.8\" : 0,\r\n          zIndex: 99,\r\n        }}\r\n        onClick={() =>\r\n          canGoDown ? moveInsurgentHeight(insurgent, insurgents, -1) : null\r\n        }\r\n      />\r\n    </div>\r\n  ) : null;\r\n};\r\n","import { Dispatch, SetStateAction } from \"react\";\r\nimport {\r\n  arePointsEqual,\r\n  isPointBetweenThreeHegemons,\r\n  isPointOnRails,\r\n} from \"./Insurgent\";\r\nimport { Point, Insurgent, Hegemon, Game, Config } from \"./types\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { areHexesEqual, getHegemonGroup, getHexPoints } from \"./Hegemon\";\r\n\r\nimport { playSound } from \"./Board\";\r\n\r\nexport const PreviewPoint = (props: {\r\n  point: Point;\r\n  insurgent: Insurgent;\r\n  hegemons: Hegemon[];\r\n  setHegemons: Dispatch<SetStateAction<Hegemon[]>>;\r\n  game: Game;\r\n  setGame: Dispatch<SetStateAction<Game>>;\r\n  insurgents: Insurgent[];\r\n  setInsurgents: Dispatch<SetStateAction<Insurgent[]>>;\r\n  setSelectedInsurgent: Dispatch<SetStateAction<Insurgent>>;\r\n  config: Config;\r\n  stepLand: HTMLAudioElement;\r\n  stepTransport: HTMLAudioElement;\r\n  hegemonDeath: HTMLAudioElement;\r\n  roundEnd: HTMLAudioElement;\r\n}) => {\r\n  const {\r\n    point,\r\n    insurgent,\r\n    hegemons,\r\n    setHegemons,\r\n    game,\r\n    setGame,\r\n    insurgents,\r\n    setInsurgents,\r\n    setSelectedInsurgent,\r\n    config,\r\n    stepLand,\r\n    stepTransport,\r\n    hegemonDeath,\r\n    roundEnd,\r\n  } = props;\r\n\r\n  const moveInsurgent = (\r\n    point: Point,\r\n    insurgent: Insurgent,\r\n    insurgents: Insurgent[]\r\n  ) => {\r\n    const newInsurgents: Insurgent[] = JSON.parse(JSON.stringify(insurgents));\r\n    const idx = newInsurgents.findIndex((p) => arePointsEqual(p, insurgent));\r\n    newInsurgents[idx].hex1 = point.hex1;\r\n    newInsurgents[idx].hex2 = point.hex2;\r\n    newInsurgents[idx].hex3 = point.hex3;\r\n\r\n    // Change orientation if on rails\r\n    if (isPointOnRails(point, config.board)) {\r\n      newInsurgents[idx].orientation = \"base\";\r\n      playSound(stepTransport);\r\n    } else {\r\n      playSound(stepLand);\r\n    }\r\n\r\n    newInsurgents[idx].moves -= point.distance;\r\n\r\n    // If round end\r\n    if (newInsurgents.find((p) => p.moves > 0) === undefined) {\r\n      for (const ins of newInsurgents) {\r\n        ins.attacked = 0;\r\n      }\r\n      for (const ins of newInsurgents) {\r\n        ins.moves = props.config.insurgentMoves;\r\n      }\r\n\r\n      setSelectedInsurgent({\r\n        id: \"\",\r\n        hex1: { id: \"\", col: -1, row: -1 },\r\n        hex2: { id: \"\", col: -1, row: -1 },\r\n        hex3: { id: \"\", col: -1, row: -1 },\r\n        orientation: \"base\",\r\n        willBeAttacked: false,\r\n        attacked: 0,\r\n        moves: 0,\r\n      });\r\n\r\n      const newGame: Game = JSON.parse(JSON.stringify(game));\r\n      newGame.gameplayState = \"insurgentPlace\";\r\n      setGame(newGame);\r\n    }\r\n\r\n    setInsurgents(newInsurgents);\r\n\r\n    // Remove preview if no moves left\r\n    if (newInsurgents[idx].moves < 1) {\r\n      setSelectedInsurgent({\r\n        id: \"\",\r\n        hex1: { id: \"\", col: -1, row: -1 },\r\n        hex2: { id: \"\", col: -1, row: -1 },\r\n        hex3: { id: \"\", col: -1, row: -1 },\r\n        orientation: \"base\",\r\n        willBeAttacked: false,\r\n        attacked: 0,\r\n        moves: 0,\r\n      });\r\n    } else {\r\n      setSelectedInsurgent(newInsurgents[idx]);\r\n    }\r\n  };\r\n\r\n  const placeInsurgent = (\r\n    point: Point,\r\n    insurgents: Insurgent[],\r\n    hegemons: Hegemon[]\r\n  ) => {\r\n    const insurgent: Insurgent = {\r\n      id: uuidv4(),\r\n      hex1: JSON.parse(JSON.stringify(point.hex1)),\r\n      hex2: JSON.parse(JSON.stringify(point.hex2)),\r\n      hex3: JSON.parse(JSON.stringify(point.hex3)),\r\n      orientation: \"base\",\r\n      willBeAttacked: false,\r\n      attacked: 0,\r\n      moves: config.insurgentMoves,\r\n    };\r\n    // Change orientation if on rails\r\n    if (isPointOnRails(point, config.board)) {\r\n      playSound(stepTransport);\r\n    } else {\r\n      playSound(stepLand);\r\n    }\r\n\r\n    const newInsurgents: Insurgent[] = JSON.parse(JSON.stringify(insurgents));\r\n    newInsurgents.push(insurgent);\r\n    setInsurgents(newInsurgents);\r\n\r\n    const newGame: Game = JSON.parse(JSON.stringify(game));\r\n    if (game.gameplayState === \"insurgentStart\") {\r\n      if (newInsurgents.length >= config.startInsurgents) {\r\n        playSound(roundEnd);\r\n        newGame.gameplayState = \"hegemonStart\";\r\n        setGame(newGame);\r\n      }\r\n    } else if (game.gameplayState === \"insurgentPlace\") {\r\n      // Check if a hegemon died\r\n      // SIMPLE implementation, checking each of them individually\r\n      const toDelete: Hegemon[] = [];\r\n\r\n      // Correct implementation would be\r\n      // for each hegemon, compute its adjacent hegemon group\r\n      // for the respective group, compute its adjacent points\r\n      // by computing the set of adjacent points of each hex, minus\r\n      // the ones which are determined by 3 hegemon hexes\r\n      // the resulting adjacent points are the contour\r\n      for (const heg of hegemons) {\r\n        const group: Hegemon[] = getHegemonGroup(\r\n          heg,\r\n          hegemons,\r\n          [],\r\n          config.board\r\n        );\r\n\r\n        const points: Point[] = [];\r\n        for (const h of group) {\r\n          const hPoints: Point[] = getHexPoints(h);\r\n\r\n          for (const hPoint of hPoints) {\r\n            let exists = false;\r\n            for (const point of points) {\r\n              if (arePointsEqual(hPoint, point)) {\r\n                exists = true;\r\n                break;\r\n              }\r\n            }\r\n            if (!exists) {\r\n              if (!isPointBetweenThreeHegemons(hPoint, hegemons)) {\r\n                points.push(hPoint);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        let markGroupForDeletion = true;\r\n        for (const point of points) {\r\n          let exists = false;\r\n          for (const ins of newInsurgents) {\r\n            if (arePointsEqual(ins, point)) {\r\n              exists = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!exists) {\r\n            markGroupForDeletion = false;\r\n          }\r\n        }\r\n        if (markGroupForDeletion) {\r\n          for (const heg of group) {\r\n            let exists = false;\r\n            for (const h of toDelete) {\r\n              if (areHexesEqual(h, heg)) {\r\n                exists = true;\r\n                break;\r\n              }\r\n            }\r\n            if (!exists) {\r\n              toDelete.push(heg);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      hegemons = hegemons.filter((heg) => !toDelete.includes(heg));\r\n      let newHegemons: Hegemon[] = JSON.parse(JSON.stringify(hegemons));\r\n      setHegemons(newHegemons);\r\n\r\n      setSelectedInsurgent({\r\n        id: \"\",\r\n        hex1: { id: \"\", col: -1, row: -1 },\r\n        hex2: { id: \"\", col: -1, row: -1 },\r\n        hex3: { id: \"\", col: -1, row: -1 },\r\n        orientation: \"base\",\r\n        willBeAttacked: false,\r\n        attacked: 0,\r\n        moves: 0,\r\n      });\r\n\r\n      // Play the sounds\r\n      if (toDelete.length > 0) {\r\n        playSound(hegemonDeath);\r\n      }\r\n      playSound(roundEnd);\r\n\r\n      // Set the game state\r\n      newGame.deadHegemons = game.deadHegemons + toDelete.length;\r\n\r\n      if (newGame.deadHegemons >= config.hegemonsToDie) {\r\n        newGame.gameplayState = \"insurgentWin\";\r\n      } else {\r\n        newGame.gameplayState = \"hegemonMove\";\r\n      }\r\n      setGame(newGame);\r\n    }\r\n  };\r\n\r\n  let top = 0;\r\n  top += (point.hex1.col % 2 === 0 ? 50 : 84.65) + point.hex1.row * 69.3;\r\n  top += (point.hex2.col % 2 === 0 ? 50 : 84.65) + point.hex2.row * 69.3;\r\n  top += (point.hex3.col % 2 === 0 ? 50 : 84.65) + point.hex3.row * 69.3;\r\n  top /= 3;\r\n\r\n  let left = 0;\r\n  left += 14 + point.hex1.col * 60.1;\r\n  left += 14 + point.hex2.col * 60.1;\r\n  left += 14 + point.hex3.col * 60.1;\r\n  left /= 3;\r\n  const avgRow = Math.round(\r\n    (point.hex1.row + point.hex2.row + point.hex3.row) / 3\r\n  );\r\n  return (\r\n    <div\r\n      className=\"previewPoint\"\r\n      style={{\r\n        width: \"10px\",\r\n        height: \"10px\",\r\n        position: \"absolute\",\r\n        borderRadius: \"10px\",\r\n        borderStyle: \"solid\",\r\n        borderColor: \"#e64e4e\",\r\n        backgroundColor: \"#e64e4e\",\r\n        opacity: \"0.6\",\r\n        cursor: \"pointer\",\r\n        zIndex: 100,\r\n        left: avgRow % 2 === 0 ? 19 + left + \"px\" : 19 + left + \"px\",\r\n        top: 17 + top + \"px\",\r\n      }}\r\n      onClick={() =>\r\n        game.gameplayState === \"insurgentMove\"\r\n          ? moveInsurgent(point, insurgent, insurgents)\r\n          : placeInsurgent(point, insurgents, hegemons)\r\n      }\r\n    />\r\n  );\r\n};\r\n","import React, { Dispatch, SetStateAction } from \"react\";\r\nimport { PreviewHeightMove } from \"./PreviewHeightMove\";\r\nimport { PreviewPoint } from \"./PreviewPoint\";\r\nimport { Point, Insurgent, Hegemon, Game, Config } from \"./types\";\r\n\r\nexport const PreviewInsurgentMovement = (props: {\r\n  points: Point[];\r\n  insurgent: Insurgent;\r\n  hegemons: Hegemon[];\r\n  setHegemons: Dispatch<SetStateAction<Hegemon[]>>;\r\n  game: Game;\r\n  setGame: Dispatch<SetStateAction<Game>>;\r\n  insurgents: Insurgent[];\r\n  setInsurgents: Dispatch<SetStateAction<Insurgent[]>>;\r\n  setSelectedInsurgent: Dispatch<SetStateAction<Insurgent>>;\r\n  config: Config;\r\n\r\n  stepLand: HTMLAudioElement;\r\n  roundEnd: HTMLAudioElement;\r\n  stepTransport: HTMLAudioElement;\r\n  hegemonDeath: HTMLAudioElement;\r\n}) => {\r\n  const {\r\n    points,\r\n    insurgent,\r\n    hegemons,\r\n    setHegemons,\r\n    game,\r\n    setGame,\r\n    insurgents,\r\n    setInsurgents,\r\n    setSelectedInsurgent,\r\n    config,\r\n    stepLand,\r\n    roundEnd,\r\n    stepTransport,\r\n    hegemonDeath,\r\n  } = props;\r\n  const pointPreviews = points.map((point) => (\r\n    <PreviewPoint\r\n      point={point}\r\n      insurgent={insurgent}\r\n      hegemons={hegemons}\r\n      setHegemons={setHegemons}\r\n      insurgents={insurgents}\r\n      setInsurgents={setInsurgents}\r\n      game={game}\r\n      setGame={setGame}\r\n      setSelectedInsurgent={setSelectedInsurgent}\r\n      config={config}\r\n      key={point.id}\r\n      stepLand={stepLand}\r\n      roundEnd={roundEnd}\r\n      stepTransport={stepTransport}\r\n      hegemonDeath={hegemonDeath}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      <PreviewHeightMove\r\n        insurgent={insurgent}\r\n        hegemons={hegemons}\r\n        setHegemons={setHegemons}\r\n        insurgents={insurgents}\r\n        setInsurgents={setInsurgents}\r\n        game={game}\r\n        setGame={setGame}\r\n        setSelectedInsurgent={setSelectedInsurgent}\r\n        config={config}\r\n        stepLand={stepLand}\r\n      />\r\n      {pointPreviews}\r\n    </div>\r\n  );\r\n};\r\n","import { Dispatch, SetStateAction } from \"react\";\r\nimport { Point, Game, Insurgent, Config, Hegemon } from \"./types\";\r\nimport { PreviewPoint } from \"./PreviewPoint\";\r\n\r\nexport const PreviewInsurgentPlacement = (props: {\r\n  points: Point[];\r\n  insurgents: Insurgent[];\r\n  setInsurgents: Dispatch<SetStateAction<Insurgent[]>>;\r\n  hegemons: Hegemon[];\r\n  setHegemons: Dispatch<SetStateAction<Hegemon[]>>;\r\n  game: Game;\r\n  setGame: Dispatch<SetStateAction<Game>>;\r\n  setSelectedInsurgent: Dispatch<SetStateAction<Insurgent>>;\r\n  config: Config;\r\n\r\n  stepLand: HTMLAudioElement;\r\n  roundEnd: HTMLAudioElement;\r\n  stepTransport: HTMLAudioElement;\r\n  hegemonDeath: HTMLAudioElement;\r\n}) => {\r\n  const {\r\n    points,\r\n    insurgents,\r\n    setInsurgents,\r\n    hegemons,\r\n    setHegemons,\r\n    game,\r\n    setGame,\r\n    setSelectedInsurgent,\r\n    config,\r\n    stepLand,\r\n    roundEnd,\r\n    stepTransport,\r\n    hegemonDeath,\r\n  } = props;\r\n\r\n  const pointPreviews = points.map((point) => {\r\n    return (\r\n      <PreviewPoint\r\n        point={point}\r\n        // @ts-ignore\r\n        insurgent={null}\r\n        hegemons={hegemons}\r\n        setHegemons={setHegemons}\r\n        insurgents={insurgents}\r\n        setInsurgents={setInsurgents}\r\n        game={game}\r\n        setGame={setGame}\r\n        setSelectedInsurgent={setSelectedInsurgent}\r\n        config={config}\r\n        key={point.id}\r\n        stepLand={stepLand}\r\n        roundEnd={roundEnd}\r\n        stepTransport={stepTransport}\r\n        hegemonDeath={hegemonDeath}\r\n      />\r\n    );\r\n  });\r\n\r\n  return <div>{pointPreviews}</div>;\r\n};\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nexport const InfoGameplay = () => {\r\n  return (\r\n    <div>\r\n      The Game of Metropolitical War emulates hybrid and asymmetric warfare in a\r\n      densely populated built-up city of packed vertical slums, Plan Voisin\r\n      corporate centers, 5G lights-out factories and chip production households.\r\n      It places the agile swarms of{\" \"}\r\n      <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n        Insurgents\r\n      </mark>{\" \"}\r\n      against the highly-centralized, elephantine{\" \"}\r\n      <mark className=\"glowWhite\" id=\"markHegemon\">\r\n        Hegemon\r\n      </mark>{\" \"}\r\n      <br />\r\n      <h2>Hex Types</h2>The map is composed of four different types of hexes:\r\n      <br />\r\n      <div className=\"hexDescription\">\r\n        <img\r\n          className=\"hexImage\"\r\n          src={process.env.PUBLIC_URL + \"/images/hex-land.png\"}\r\n        ></img>\r\n        <p>\r\n          <b>Land</b> hex, accessible to the{\" \"}\r\n          <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n            Insurgents\r\n          </mark>{\" \"}\r\n          and the{\" \"}\r\n          <mark className=\"glowWhite\" id=\"markHegemon\">\r\n            Hegemon.\r\n          </mark>{\" \"}\r\n          It represents the built environment: tower blocks, underground tunnel\r\n          networks, skywalks and alleyways. It offers the possibility of\r\n          vertical movement for the{\" \"}\r\n          <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n            Insurgents.\r\n          </mark>\r\n        </p>\r\n      </div>\r\n      <div className=\"hexDescription\">\r\n        <img\r\n          className=\"hexImage\"\r\n          src={process.env.PUBLIC_URL + \"/images/hex-water.png\"}\r\n        ></img>\r\n        <p>\r\n          <b>Water</b> hex, spanning rivers, artifcial seas, gulfs, accumulation\r\n          lakes and canals. Accessible only to the{\" \"}\r\n          <mark className=\"glowWhite\" id=\"markHegemon\">\r\n            Hegemon\r\n          </mark>{\" \"}\r\n          thanks to its naval superiority.\r\n        </p>\r\n      </div>\r\n      <div className=\"hexDescription\">\r\n        <img\r\n          className=\"hexImage\"\r\n          src={process.env.PUBLIC_URL + \"/images/hex-transport.png\"}\r\n        ></img>\r\n        <p>\r\n          <b>Transport</b> hex, representing bustling boulevards, highways,\r\n          subway lines and viaducts. Due to the high civilian numbers, it is\r\n          only accessible to the{\" \"}\r\n          <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n            Insurgents\r\n          </mark>{\" \"}\r\n          and vertical movement is inhibited.\r\n        </p>\r\n      </div>\r\n      <div className=\"hexDescription\">\r\n        <img\r\n          className=\"hexImage\"\r\n          src={process.env.PUBLIC_URL + \"/images/hex-bridge.png\"}\r\n        ></img>\r\n        <p>\r\n          <b>Bridge</b> hex, which is a combined <b>Water</b> and{\" \"}\r\n          <b>Transport</b> space. Accesible to both the{\" \"}\r\n          <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n            Insurgents\r\n          </mark>{\" \"}\r\n          and the{\" \"}\r\n          <mark className=\"glowWhite\" id=\"markHegemon\">\r\n            Hegemon.\r\n          </mark>{\" \"}\r\n        </p>\r\n      </div>\r\n      <h2>Movement & Attack</h2>\r\n      The{\" \"}\r\n      <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n        Insurgents\r\n      </mark>{\" \"}\r\n      play \"Go\" by moving onto the vertices, while the{\" \"}\r\n      <mark className=\"glowWhite\" id=\"markHegemon\">\r\n        Hegemon\r\n      </mark>{\" \"}\r\n      plays \"Chess\" by moving on the hexes. Insurgents have three moves, which\r\n      can be spent by either going\r\n      <div id=\"generalMovement\">\r\n        <div className=\"generalMovementExample\">\r\n          <img\r\n            className=\"generalMovementImage\"\r\n            src={process.env.PUBLIC_URL + \"/images/insurgent-movement.png\"}\r\n          ></img>\r\n          Insurgent Movement\r\n        </div>\r\n        <div className=\"generalMovementExample\">\r\n          <img\r\n            className=\"generalMovementImage\"\r\n            src={process.env.PUBLIC_URL + \"/images/hegemon-movement.png\"}\r\n          ></img>\r\n          Hegemon Movement\r\n        </div>\r\n      </div>\r\n      <h2>Starting Up</h2>\r\n      The{\" \"}\r\n      <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n        Insurgents\r\n      </mark>{\" \"}\r\n      start by placing 4 pieces on the board. Each piece must be in a 3-vertex\r\n      range from any other one.\r\n    </div>\r\n  );\r\n};\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nexport const InfoIntelligence = (props: { city: string }) => {\r\n  const { city } = props;\r\n  switch (city) {\r\n    case \"NEW YORK CITY\":\r\n      return (\r\n        <div>\r\n          NYC has swelled to over 50,000 people per km<sup>2</sup>, a swarming\r\n          megacity of 40 million. It's been 18 months since the NY Energy Dpt.\r\n          switched its production to petrol by redeploying oil pumps, following\r\n          a highly coordinated{\" \"}\r\n          <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n            Insurgent\r\n          </mark>{\" \"}\r\n          attack that has destroyed a large part of their dams. The inland sea\r\n          spanning the South-Western part of the state has flooded the adjacent\r\n          municipalities, pushing refugees every day into the crowded complexes.\r\n          <img\r\n            className=\"textImage\"\r\n            src={process.env.PUBLIC_URL + \"/images/visuals/oil-drills-2.jpg\"}\r\n          ></img>\r\n          In 2032, the metropolitan area zoning commitee banned the existence of\r\n          buildings smaller than 150ft, citing density concerns. By 2037, all\r\n          individual households have been razed and replaced with hyper-dense\r\n          towers, pierced by high-speed rail viaducts.\r\n          <img\r\n            className=\"textImage\"\r\n            src={process.env.PUBLIC_URL + \"/images/visuals/chongqing-3.jpg\"}\r\n          ></img>\r\n          The{\" \"}\r\n          <mark className=\"glowWhite\" id=\"markHegemon\">\r\n            Hegemon\r\n          </mark>{\" \"}\r\n          manages a slow but powerful city-state power on a continuous mission\r\n          of pacifying the 'feral' city that grew out of hand. It has already\r\n          re-established its control over the municipal waters, after the highly\r\n          destructive offshore rig terrorist attack proved its weakness.\r\n          <img\r\n            className=\"textImage\"\r\n            src={process.env.PUBLIC_URL + \"/images/visuals/offshore-2.png\"}\r\n          ></img>\r\n        </div>\r\n      );\r\n    default:\r\n      return <div></div>;\r\n  }\r\n};\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nexport const InfoWinning = () => {\r\n  return (\r\n    <div>\r\n      The{\" \"}\r\n      <mark className=\"glowWhite\" id=\"markHegemon\">\r\n        Hegemon\r\n      </mark>{\" \"}\r\n      <i>breaks the back</i> of the local insurrection by killing at least{\" \"}\r\n      <b>20</b> Insurgents.\r\n      <br />\r\n      <br />\r\n      The{\" \"}\r\n      <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n        Insurgents\r\n      </mark>{\" \"}\r\n      <i>topple the regime</i> by eliminating <b>all</b> Hegemon forces.\r\n      <img\r\n        className=\"textImage\"\r\n        src={process.env.PUBLIC_URL + \"/images/visuals/sarajevo-1.jpg\"}\r\n      ></img>\r\n      <img\r\n        className=\"textImage\"\r\n        src={process.env.PUBLIC_URL + \"/images/visuals/russia-1.jpg\"}\r\n      ></img>\r\n    </div>\r\n  );\r\n};\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nexport const InfoHegemon = () => {\r\n  return (\r\n    <div>\r\n      The Hegemon is built up around ISR values (Intelligence, Surveillance and\r\n      Reconnaissance)\r\n      <img src={process.env.PUBLIC_URL + \"/images/3d/hegemon-3d-2.gif\"}></img>\r\n      <h2>Movement & Attacking</h2>\r\n    </div>\r\n  );\r\n};\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nexport const InfoInsurgents = () => {\r\n  return (\r\n    <div>\r\n      Insurgents can move either Each{\" \"}\r\n      <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n        Insurgent\r\n      </mark>{\" \"}\r\n      can move vertically on vertices determined by <b>Land</b> hexes. Vertical\r\n      movement is inhibited if the vertex intersects a <b>Transport</b> or{\" \"}\r\n      <b>Bridge</b> hex. However, it is allowed for <b>Water</b>-adjacent\r\n      vertices if they also interesect the <b>Land</b>. Moving up or down\r\n      vertically counts as one move.\r\n      <div id=\"insurgentVerticalMovement\">\r\n        <div className=\"insurgentVerticalExample\">\r\n          <img\r\n            className=\"insurgentVerticalImage\"\r\n            src={process.env.PUBLIC_URL + \"/images/3d/insurgent-3-3d.gif\"}\r\n          ></img>\r\n          <p>Below, through tunnels</p>\r\n        </div>\r\n        <div className=\"insurgentVerticalExample\">\r\n          <img\r\n            className=\"insurgentVerticalImage\"\r\n            src={process.env.PUBLIC_URL + \"/images/3d/insurgent-1-3d.gif\"}\r\n          ></img>\r\n          <p>Ground Level</p>\r\n        </div>\r\n        <div className=\"insurgentVerticalExample\">\r\n          <img\r\n            className=\"insurgentVerticalImage\"\r\n            src={process.env.PUBLIC_URL + \"/images/3d/insurgent-2-3d.gif\"}\r\n          ></img>\r\n          <p>Above, inside buildings</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","/* eslint-disable jsx-a11y/alt-text */\r\n\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport React from \"react\";\r\n\r\nexport const Settings = (props: {\r\n  closeSettings: () => void;\r\n  sfx: HTMLAudioElement[];\r\n  ambientSound: HTMLAudioElement;\r\n  backgroundMusic: HTMLAudioElement;\r\n}) => {\r\n  const { closeSettings, sfx, ambientSound, backgroundMusic } = props;\r\n  const [sfxValue, setSfxValue] = React.useState(sfx[0].volume * 100);\r\n  const [ambientSoundValue, setAmbientSoundValue] = React.useState(\r\n    ambientSound.volume * 100\r\n  );\r\n  const [backgroundMusicValue, setBackgroundMusicValue] = React.useState(\r\n    backgroundMusic.volume * 100\r\n  );\r\n\r\n  const handleSFXSlider = (\r\n    event: React.ChangeEvent<{}>,\r\n    newValue: number | number[]\r\n  ) => {\r\n    // @ts-ignore\r\n    setSfxValue(newValue);\r\n    for (const effect of sfx) {\r\n      const ratio = sfxValue / 100 / sfx[0].volume;\r\n      if (isNaN((sfxValue / 100) * ratio)) {\r\n        effect.volume = 0;\r\n      } else {\r\n        effect.volume = Math.min((sfxValue / 100) * ratio, 1);\r\n      }\r\n    }\r\n  };\r\n  const handleAmbientSlider = (\r\n    event: React.ChangeEvent<{}>,\r\n    newValue: number | number[]\r\n  ) => {\r\n    // @ts-ignore\r\n    setAmbientSoundValue(newValue);\r\n    ambientSound.volume = ambientSoundValue / 100;\r\n  };\r\n  const handleBackgroundMusicSlider = (\r\n    event: React.ChangeEvent<{}>,\r\n    newValue: number | number[]\r\n  ) => {\r\n    // @ts-ignore\r\n    setBackgroundMusicValue(newValue);\r\n    backgroundMusic.volume = backgroundMusicValue / 100;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      <div className=\"closeInfoPanel\">\r\n        <span id=\"closeSettings\" onClick={closeSettings}>\r\n          ✕\r\n        </span>\r\n      </div>\r\n      <img\r\n        className=\"infoImage\"\r\n        src={process.env.PUBLIC_URL + \"/images/visuals/drone-swarm.jpg\"}\r\n      />\r\n      <h1 style={{ textAlign: \"center\" }}>SETTINGS</h1>\r\n      <div id=\"settingsContentContainer\">\r\n        <div className=\"settingItem\">\r\n          <span className=\"settingName\">Map</span>\r\n          <span> [dropdown here]</span>\r\n        </div>\r\n        <div className=\"settingItem\">\r\n          <span className=\"settingName\">Sound Effects</span>\r\n          <div className=\"sliderContainer\">\r\n            <Slider\r\n              value={sfxValue}\r\n              onChange={handleSFXSlider}\r\n              aria-labelledby=\"continuous-slider\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"settingItem\">\r\n          <span className=\"settingName\">Ambient Sounds</span>\r\n\r\n          <div className=\"sliderContainer\">\r\n            <Slider\r\n              value={ambientSoundValue}\r\n              onChange={handleAmbientSlider}\r\n              aria-labelledby=\"continuous-slider\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"settingItem\">\r\n          <span className=\"settingName\">Music</span>\r\n\r\n          <div className=\"sliderContainer\">\r\n            <Slider\r\n              value={backgroundMusicValue}\r\n              onChange={handleBackgroundMusicSlider}\r\n              aria-labelledby=\"continuous-slider\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/interface-chirp-open.43a7be55.wav\";","export default __webpack_public_path__ + \"static/media/interface-chirp-close.12247bdc.wav\";","export default __webpack_public_path__ + \"static/media/click-1.b75f214e.wav\";","export default __webpack_public_path__ + \"static/media/click-2.91940e3f.wav\";","export default __webpack_public_path__ + \"static/media/beep-1.f2a116ee.ogg\";","export default __webpack_public_path__ + \"static/media/street.97a9b371.mp3\";","export default __webpack_public_path__ + \"static/media/click-3.026622a2.wav\";","export default __webpack_public_path__ + \"static/media/click-4.40e61f3c.wav\";","export default __webpack_public_path__ + \"static/media/click-5.7b7921e7.wav\";","export default __webpack_public_path__ + \"static/media/step-1.0af06b31.wav\";","export default __webpack_public_path__ + \"static/media/explosion.baf5f0f6.wav\";","export default __webpack_public_path__ + \"static/media/click-6.ba453eb3.wav\";","export default __webpack_public_path__ + \"static/media/water.7eadf9dd.wav\";","export default __webpack_public_path__ + \"static/media/step-2.d0123c87.wav\";","export default __webpack_public_path__ + \"static/media/explosion-truck.f9dfd606.wav\";","/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { MouseEvent, useState } from \"react\";\r\nimport { areHexesEqual, getAllHegemonPlaces, getHexNeighbors } from \"./Hegemon\";\r\nimport {\r\n  arePointsEqual,\r\n  getAllInsurgentsNeighbors,\r\n  getInsurgentNeighbors,\r\n  isInsurgentAdjacentToHex,\r\n} from \"./Insurgent\";\r\nimport { PreviewHegemonPlacement } from \"./PreviewHegemonPlacement\";\r\nimport { PreviewHexes } from \"./PreviewHexes\";\r\nimport { PreviewInsurgentMovement } from \"./PreviewInsurgentMovement\";\r\nimport { PreviewInsurgentPlacement } from \"./PreviewInsurgentPlacement\";\r\nimport { Hegemon, Insurgent, Hexagon, Game, Config } from \"./types\";\r\n\r\nimport { InfoGameplay } from \"./info-content/InfoGameplay\";\r\n\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { InfoIntelligence } from \"./info-content/InfoIntelligence\";\r\nimport { InfoWinning } from \"./info-content/InfoWinning\";\r\nimport { InfoHegemon } from \"./info-content/InfoHegemon\";\r\nimport { InfoInsurgents } from \"./info-content/InfoInsurgents\";\r\nimport { Settings } from \"./Settings\";\r\n\r\n//@ts-ignore\r\nimport interfaceOpenAudio from \"./sounds/interface-chirp-open.wav\";\r\n//@ts-ignore\r\nimport interfaceCloseAudio from \"./sounds/interface-chirp-close.wav\";\r\n//@ts-ignore\r\nimport clickInfoMenuAudio from \"./sounds/click-1.wav\";\r\n//@ts-ignore\r\nimport clickButtonAudio from \"./sounds/click-2.wav\";\r\n//@ts-ignore\r\nimport roundEndAudio from \"./sounds/beep-1.ogg\";\r\n//@ts-ignore\r\nimport streetAmbienceAudio from \"./sounds/street.mp3\";\r\n//@ts-ignore\r\nimport clickInsurgentAudio from \"./sounds/click-3.wav\";\r\n//@ts-ignore\r\nimport clickHegemonMoveAudio from \"./sounds/click-4.wav\";\r\n//@ts-ignore\r\nimport clickHegemonAttackAudio from \"./sounds/click-5.wav\";\r\n//@ts-ignore\r\nimport stepLandAudio from \"./sounds/step-1.wav\";\r\n// @ts-ignore\r\nimport explosionAudio from \"./sounds/explosion.wav\";\r\n// @ts-ignore\r\nimport hegemonMoveAudio from \"./sounds/click-6.wav\";\r\n// @ts-ignore\r\nimport hegemonMoveWaterAudio from \"./sounds/water.wav\";\r\n//@ts-ignore\r\nimport stepTransportAudio from \"./sounds/step-2.wav\";\r\n//@ts-ignore\r\nimport hegemonDeathAudio from \"./sounds/explosion-truck.wav\";\r\n\r\nconst interfaceOpen = new Audio(interfaceOpenAudio);\r\nconst interfaceClose = new Audio(interfaceCloseAudio);\r\nconst clickInfoMenu = new Audio(clickInfoMenuAudio);\r\nconst clickButton = new Audio(clickButtonAudio);\r\nconst roundEnd = new Audio(roundEndAudio);\r\nconst clickHegemonAttack = new Audio(clickHegemonAttackAudio);\r\nconst stepLand = new Audio(stepLandAudio);\r\n\r\nconst streetAmbience = new Audio(streetAmbienceAudio);\r\nstreetAmbience.volume = 0.25;\r\nstreetAmbience.preload = \"auto\";\r\nstreetAmbience.loop = true;\r\n\r\nconst soundEffects: HTMLAudioElement[] = [];\r\nsoundEffects.push(interfaceOpen);\r\nsoundEffects.push(interfaceClose);\r\nsoundEffects.push(clickInfoMenu);\r\nsoundEffects.push(clickButton);\r\nsoundEffects.push(roundEnd);\r\nsoundEffects.push(clickHegemonAttack);\r\nsoundEffects.push(stepLand);\r\n\r\nfor (const effect of soundEffects) {\r\n  effect.volume = 0.15;\r\n  effect.preload = \"auto\";\r\n}\r\n\r\nconst clickInsurgent = new Audio(clickInsurgentAudio);\r\nclickInsurgent.volume = 0.5;\r\nclickInsurgent.preload = \"auto\";\r\nconst clickHegemonMove = new Audio(clickHegemonMoveAudio);\r\nclickHegemonMove.volume = 0.07;\r\nclickHegemonMove.preload = \"auto\";\r\nconst explosion = new Audio(explosionAudio);\r\nexplosion.volume = 0.03;\r\nexplosion.preload = \"auto\";\r\nconst hegemonMove = new Audio(hegemonMoveAudio);\r\nhegemonMove.volume = 0.15;\r\nhegemonMove.preload = \"auto\";\r\nconst hegemonMoveWater = new Audio(hegemonMoveWaterAudio);\r\nhegemonMoveWater.volume = 0.4;\r\nhegemonMoveWater.preload = \"auto\";\r\nconst stepTransport = new Audio(stepTransportAudio);\r\nstepTransport.volume = 1;\r\nstepTransport.preload = \"auto\";\r\nconst hegemonDeath = new Audio(hegemonDeathAudio);\r\nhegemonDeath.volume = 0.08;\r\nhegemonDeath.preload = \"auto\";\r\n\r\nsoundEffects.push(clickInsurgent);\r\nsoundEffects.push(clickHegemonMove);\r\nsoundEffects.push(explosion);\r\nsoundEffects.push(hegemonMove);\r\nsoundEffects.push(hegemonMoveWater);\r\nsoundEffects.push(stepTransport);\r\nsoundEffects.push(hegemonDeath);\r\n\r\nexport const playSound = (sound: HTMLAudioElement) => {\r\n  sound.currentTime = 0;\r\n  sound.play();\r\n};\r\n\r\nexport const Board = (props: {\r\n  hegemons: Hegemon[];\r\n  insurgents: Insurgent[];\r\n  game: Game;\r\n  config: Config;\r\n  backgroundMusic: HTMLAudioElement;\r\n}) => {\r\n  const emptyInsurgent: Insurgent = {\r\n    id: \"\",\r\n    hex1: { id: \"\", col: -1, row: -1 },\r\n    hex2: { id: \"\", col: -1, row: -1 },\r\n    hex3: { id: \"\", col: -1, row: -1 },\r\n    orientation: \"base\",\r\n    willBeAttacked: false,\r\n    attacked: 0,\r\n    moves: 0,\r\n  };\r\n\r\n  const [hegemons, setHegemons] = useState(props.hegemons);\r\n  const [insurgents, setInsurgents] = useState(props.insurgents);\r\n  const [game, setGame] = useState<Game>(props.game);\r\n  const [infoMenu, setInfoMenu] = useState<\r\n    \"intelligence\" | \"gameplay\" | \"hegemon\" | \"insurgents\" | \"winning\"\r\n  >(\"intelligence\");\r\n  const [\r\n    selectedHegemonMovement,\r\n    setSelectedHegemonMovement,\r\n  ] = useState<Hexagon>({\r\n    id: \"\",\r\n    col: -1,\r\n    row: -1,\r\n  });\r\n  const [selectedHegemonAttack, setSelectedHegemonAttack] = useState<Hexagon>({\r\n    id: \"\",\r\n    col: -2,\r\n    row: -2,\r\n  });\r\n  const [selectedInsurgent, setSelectedInsurgent] = useState<Insurgent>(\r\n    emptyInsurgent\r\n  );\r\n\r\n  const infoMenuToComponent = {\r\n    intelligence: <InfoIntelligence city={props.config.title} />,\r\n    gameplay: <InfoGameplay />,\r\n    hegemon: <InfoHegemon />,\r\n    insurgents: <InfoInsurgents />,\r\n    winning: <InfoWinning />,\r\n  };\r\n\r\n  const showHegemonMovement = (e: MouseEvent, hegemon: Hegemon) => {\r\n    e.preventDefault();\r\n    if (game.gameplayState === \"hegemonMove\" && hegemon.moves > 0) {\r\n      playSound(clickHegemonMove);\r\n      if (areHexesEqual(hegemon, selectedHegemonMovement)) {\r\n        setSelectedHegemonMovement({\r\n          id: \"\",\r\n          col: -1,\r\n          row: -1,\r\n        });\r\n      } else {\r\n        setSelectedHegemonMovement(hegemon);\r\n        setSelectedHegemonAttack({\r\n          id: \"\",\r\n          col: -2,\r\n          row: -2,\r\n        });\r\n        const newInsurgents: Insurgent[] = JSON.parse(\r\n          JSON.stringify(insurgents)\r\n        );\r\n        for (let idx = 0; idx < newInsurgents.length; idx++) {\r\n          newInsurgents[idx].willBeAttacked = false;\r\n        }\r\n        setInsurgents(newInsurgents);\r\n      }\r\n    }\r\n  };\r\n\r\n  const showHegemonAttack = (e: MouseEvent, hegemon: Hegemon) => {\r\n    e.preventDefault();\r\n    if (game.gameplayState === \"hegemonMove\" && hegemon.moves > 0) {\r\n      playSound(clickHegemonAttack);\r\n      if (areHexesEqual(hegemon, selectedHegemonAttack)) {\r\n        setSelectedHegemonAttack({\r\n          id: \"\",\r\n          col: -2,\r\n          row: -2,\r\n        });\r\n\r\n        const newInsurgents: Insurgent[] = JSON.parse(\r\n          JSON.stringify(insurgents)\r\n        );\r\n        for (let idx = 0; idx < newInsurgents.length; idx++) {\r\n          newInsurgents[idx].willBeAttacked = false;\r\n        }\r\n        setInsurgents(newInsurgents);\r\n      } else {\r\n        setSelectedHegemonAttack(hegemon);\r\n        setSelectedHegemonMovement({\r\n          id: \"\",\r\n          col: -1,\r\n          row: -1,\r\n        });\r\n        const newInsurgents: Insurgent[] = JSON.parse(\r\n          JSON.stringify(insurgents)\r\n        );\r\n        for (const insurgent of insurgents) {\r\n          let isInRange = false;\r\n\r\n          const neighbors: Hegemon[] = getHexNeighbors(\r\n            hegemon,\r\n            hegemons,\r\n            props.config.board,\r\n            false\r\n          );\r\n          neighbors.push(hegemon);\r\n          for (const neighbor of neighbors) {\r\n            if (isInsurgentAdjacentToHex(insurgent, neighbor)) {\r\n              isInRange = true;\r\n            }\r\n          }\r\n\r\n          if (isInRange) {\r\n            const idx = insurgents.indexOf(insurgent);\r\n            newInsurgents[idx].willBeAttacked = true;\r\n          }\r\n        }\r\n\r\n        setInsurgents(newInsurgents);\r\n      }\r\n    }\r\n  };\r\n\r\n  const showInsurgentMovement = (insurgent: Insurgent) => {\r\n    if (game.gameplayState === \"insurgentMove\" && insurgent.moves > 0) {\r\n      playSound(clickInsurgent);\r\n      if (arePointsEqual(insurgent, selectedInsurgent)) {\r\n        setSelectedInsurgent(emptyInsurgent);\r\n      } else {\r\n        setSelectedInsurgent(insurgent);\r\n      }\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    playSound(clickButton);\r\n    playSound(streetAmbience);\r\n\r\n    closeInfo();\r\n    closeSettings();\r\n\r\n    const newGame: Game = JSON.parse(JSON.stringify(game));\r\n    newGame.gameplayState = \"insurgentStart\";\r\n    setGame(newGame);\r\n  };\r\n\r\n  const closeInfo = () => {\r\n    const info = document.getElementById(\"info\")!;\r\n    const settings = document.getElementById(\"settings\")!;\r\n    const body = document.getElementsByTagName(\"body\")![0];\r\n\r\n    if (info.style.display !== \"none\") {\r\n      if (settings.style.display === \"none\") {\r\n        playSound(interfaceClose);\r\n        body.style.overflow = \"auto\";\r\n      }\r\n\r\n      setInfoMenu(\"intelligence\");\r\n\r\n      document.getElementById(\"intelligenceButton\")!.style.borderBottom =\r\n        \"2px solid white\";\r\n      document.getElementById(\"gameplayButton\")!.style.borderBottom =\r\n        \"transparent\";\r\n      document.getElementById(\"hegemonButton\")!.style.borderBottom =\r\n        \"transparent\";\r\n      document.getElementById(\"insurgentsButton\")!.style.borderBottom =\r\n        \"transparent\";\r\n      document.getElementById(\"winningButton\")!.style.borderBottom =\r\n        \"transparent\";\r\n    }\r\n    info.style.display = \"none\";\r\n  };\r\n\r\n  const openInfo = () => {\r\n    const info = document.getElementById(\"info\")!;\r\n    const settings = document.getElementById(\"settings\")!;\r\n    const body = document.getElementsByTagName(\"body\")![0];\r\n\r\n    if (info.style.display === \"flex\") {\r\n      playSound(interfaceClose);\r\n      closeInfo();\r\n    } else {\r\n      playSound(interfaceOpen);\r\n      info.style.display = \"flex\";\r\n      body.style.overflow = \"hidden\";\r\n      info.focus();\r\n    }\r\n\r\n    if (settings.style.display === \"flex\") {\r\n      closeSettings();\r\n    }\r\n  };\r\n\r\n  const changeInfoMenu = (\r\n    menu: \"intelligence\" | \"gameplay\" | \"hegemon\" | \"insurgents\" | \"winning\"\r\n  ) => {\r\n    setInfoMenu(menu);\r\n    clickInfoMenu.currentTime = 0;\r\n    playSound(clickInfoMenu);\r\n\r\n    const info = document.getElementById(\"info\")!;\r\n    const oldScrollValue = info.scrollTop;\r\n    document.getElementById(\"infoContentContainer\")!.scrollIntoView();\r\n    info.scrollTop -= 30;\r\n\r\n    if (info.scrollTop > oldScrollValue) {\r\n      info.scrollTop = oldScrollValue;\r\n    }\r\n\r\n    document.getElementById(\"intelligenceButton\")!.style.borderBottom =\r\n      \"transparent\";\r\n    document.getElementById(\"gameplayButton\")!.style.borderBottom =\r\n      \"transparent\";\r\n    document.getElementById(\"hegemonButton\")!.style.borderBottom =\r\n      \"transparent\";\r\n    document.getElementById(\"insurgentsButton\")!.style.borderBottom =\r\n      \"transparent\";\r\n    document.getElementById(\"winningButton\")!.style.borderBottom =\r\n      \"transparent\";\r\n    document.getElementById(menu + \"Button\")!.style.borderBottom =\r\n      \"2px solid white\";\r\n  };\r\n\r\n  const closeSettings = () => {\r\n    const settings = document.getElementById(\"settings\")!;\r\n    const info = document.getElementById(\"info\")!;\r\n    const body = document.getElementsByTagName(\"body\")![0];\r\n\r\n    if (settings.style.display !== \"none\") {\r\n      if (info.style.display === \"none\") {\r\n        playSound(interfaceClose);\r\n        body.style.overflow = \"auto\";\r\n      }\r\n    }\r\n\r\n    settings.style.display = \"none\";\r\n  };\r\n\r\n  const openSettings = () => {\r\n    const settings = document.getElementById(\"settings\")!;\r\n    const info = document.getElementById(\"info\")!;\r\n    const body = document.getElementsByTagName(\"body\")![0];\r\n\r\n    if (settings.style.display === \"flex\") {\r\n      playSound(interfaceClose);\r\n      closeSettings();\r\n    } else {\r\n      playSound(interfaceOpen);\r\n      settings.style.display = \"flex\";\r\n      body.style.overflow = \"hidden\";\r\n      settings.focus();\r\n    }\r\n    if (info.style.display === \"flex\") {\r\n      closeInfo();\r\n    }\r\n  };\r\n\r\n  const changeWhoMoves = () => {\r\n    if (game.gameplayState === \"insurgentMove\") {\r\n      playSound(clickButton);\r\n      endInsurgentsRound();\r\n      const newGame: Game = JSON.parse(JSON.stringify(game));\r\n      newGame.gameplayState = \"insurgentPlace\";\r\n      setGame(newGame);\r\n    } else if (game.gameplayState === \"hegemonMove\") {\r\n      playSound(roundEnd);\r\n      endHegemonRound();\r\n      const newGame: Game = JSON.parse(JSON.stringify(game));\r\n      newGame.gameplayState = \"insurgentMove\";\r\n      setGame(newGame);\r\n    }\r\n  };\r\n\r\n  const endInsurgentsRound = () => {\r\n    const newInsurgents: Insurgent[] = JSON.parse(JSON.stringify(insurgents));\r\n    for (const ins of newInsurgents) {\r\n      ins.attacked = 0;\r\n    }\r\n    for (const ins of newInsurgents) {\r\n      ins.moves = props.config.insurgentMoves;\r\n    }\r\n    setInsurgents(newInsurgents);\r\n\r\n    setSelectedInsurgent(emptyInsurgent);\r\n  };\r\n\r\n  const endHegemonRound = () => {\r\n    const newHegemons: Hegemon[] = JSON.parse(JSON.stringify(hegemons));\r\n    for (const heg of newHegemons) {\r\n      heg.moves = props.config.hegemonMoves;\r\n    }\r\n    setHegemons(newHegemons);\r\n\r\n    setSelectedHegemonMovement({\r\n      id: \"\",\r\n      col: -1,\r\n      row: -1,\r\n    });\r\n    setSelectedHegemonAttack({\r\n      id: \"\",\r\n      col: -2,\r\n      row: -2,\r\n    });\r\n  };\r\n\r\n  // useEffect(() => {}, [hegemons]);\r\n\r\n  const hegemonPieces = hegemons.map((hegemon, index) => {\r\n    const topExtra = 65;\r\n    return (\r\n      <img\r\n        src={process.env.PUBLIC_URL + \"/images/hegemon-3d-blue.png\"}\r\n        key={hegemon.id}\r\n        className={\r\n          hegemon.moves > 0 && game.gameplayState === \"hegemonMove\"\r\n            ? \"hegemonPiece\"\r\n            : \"hegemonPieceUnmovable\"\r\n        }\r\n        style={{\r\n          position: \"absolute\",\r\n          left:\r\n            areHexesEqual(hegemon, selectedHegemonMovement) ||\r\n            areHexesEqual(hegemon, selectedHegemonAttack)\r\n              ? 17 + hegemon.col * 60.1 + \"px\"\r\n              : 15 + hegemon.col * 60.1 + \"px\",\r\n          top:\r\n            hegemon.col % 2 === 0\r\n              ? areHexesEqual(hegemon, selectedHegemonMovement) ||\r\n                areHexesEqual(hegemon, selectedHegemonAttack)\r\n                ? topExtra - 27 + hegemon.row * 69.3 + \"px\"\r\n                : topExtra - 32 + hegemon.row * 69.3 + \"px\"\r\n              : areHexesEqual(hegemon, selectedHegemonMovement) ||\r\n                areHexesEqual(hegemon, selectedHegemonAttack)\r\n              ? topExtra + 5 + hegemon.row * 69.3 + \"px\"\r\n              : topExtra + hegemon.row * 69.3 + \"px\",\r\n          width:\r\n            areHexesEqual(hegemon, selectedHegemonMovement) ||\r\n            areHexesEqual(hegemon, selectedHegemonAttack)\r\n              ? \"45px\"\r\n              : \"50px\",\r\n          zIndex:\r\n            game.gameplayState === \"hegemonMove\" ||\r\n            game.gameplayState === \"hegemonStart\"\r\n              ? 100\r\n              : 99,\r\n          cursor:\r\n            game.gameplayState !== \"hegemonMove\"\r\n              ? \"default\"\r\n              : hegemon.moves > 0\r\n              ? \"pointer\"\r\n              : 'url(\"' +\r\n                process.env.PUBLIC_URL +\r\n                '/images/x-cursor.png\"), auto',\r\n          opacity:\r\n            areHexesEqual(hegemon, selectedHegemonMovement) ||\r\n            areHexesEqual(hegemon, selectedHegemonAttack)\r\n              ? 0.8\r\n              : 1,\r\n        }}\r\n        onClick={(e) => showHegemonMovement(e, hegemon)}\r\n        onContextMenu={(e) => showHegemonAttack(e, hegemon)}\r\n      />\r\n    );\r\n  });\r\n\r\n  const insurgentPieces = insurgents.map((insurgent, index) => {\r\n    let top = 0;\r\n    top +=\r\n      (insurgent.hex1.col % 2 === 0 ? 50 : 84.65) + insurgent.hex1.row * 69.3;\r\n    top +=\r\n      (insurgent.hex2.col % 2 === 0 ? 50 : 84.65) + insurgent.hex2.row * 69.3;\r\n    top +=\r\n      (insurgent.hex3.col % 2 === 0 ? 50 : 84.65) + insurgent.hex3.row * 69.3;\r\n    top /= 3;\r\n\r\n    let left = 0;\r\n    left += 14 + insurgent.hex1.col * 60.1;\r\n    left += 14 + insurgent.hex2.col * 60.1;\r\n    left += 14 + insurgent.hex3.col * 60.1;\r\n    left /= 3;\r\n\r\n    // const avgCol = Math.round(\r\n    //   (insurgent.hex1.col + insurgent.hex2.col + insurgent.hex3.col) / 3\r\n    // );\r\n    const avgRow = Math.round(\r\n      (insurgent.hex1.row + insurgent.hex2.row + insurgent.hex3.row) / 3\r\n    );\r\n\r\n    switch (insurgent.orientation) {\r\n      case \"base\":\r\n        return (\r\n          <div>\r\n            <img\r\n              src={process.env.PUBLIC_URL + \"/images/insurgent-1-3d.png\"}\r\n              key={insurgent.id}\r\n              style={{\r\n                position: \"absolute\",\r\n                left: avgRow % 2 === 0 ? 15 + left + \"px\" : 19 + left + \"px\",\r\n                top: arePointsEqual(insurgent, selectedInsurgent)\r\n                  ? 16 + top + \"px\"\r\n                  : 15 + top + \"px\",\r\n                width: arePointsEqual(insurgent, selectedInsurgent)\r\n                  ? \"17px\"\r\n                  : \"20px\",\r\n                zIndex: 99,\r\n                opacity: insurgent.willBeAttacked\r\n                  ? 0.7\r\n                  : arePointsEqual(insurgent, selectedInsurgent)\r\n                  ? 0.8\r\n                  : 1,\r\n\r\n                cursor:\r\n                  game.gameplayState !== \"insurgentMove\"\r\n                    ? \"default\"\r\n                    : insurgent.moves > 0\r\n                    ? \"pointer\"\r\n                    : \"default\",\r\n              }}\r\n              onClick={() => showInsurgentMovement(insurgent)}\r\n            />\r\n            {game.gameplayState === \"insurgentMove\" && insurgent.moves > 0 ? (\r\n              <img\r\n                src={\r\n                  insurgent.moves > 3\r\n                    ? process.env.PUBLIC_URL + \"/images/moves-3.png\"\r\n                    : process.env.PUBLIC_URL +\r\n                      \"/images/moves-\" +\r\n                      insurgent.moves +\r\n                      \".png\"\r\n                }\r\n                style={{\r\n                  position: \"absolute\",\r\n                  left: avgRow % 2 === 0 ? 15 + left + \"px\" : 19 + left + \"px\",\r\n                  top: 37 + top + \"px\",\r\n                  width: \"20px\",\r\n                  zIndex: 99,\r\n                  opacity:\r\n                    insurgent.willBeAttacked && insurgent.attacked === 1\r\n                      ? 0.7\r\n                      : 1,\r\n                }}\r\n              />\r\n            ) : null}\r\n          </div>\r\n        );\r\n      case \"up\":\r\n        return (\r\n          <div>\r\n            <img\r\n              src={process.env.PUBLIC_URL + \"/images/insurgent-2-3d.png\"}\r\n              key={insurgent.id}\r\n              style={{\r\n                position: \"absolute\",\r\n                left: arePointsEqual(insurgent, selectedInsurgent)\r\n                  ? 17 + left + \"px\"\r\n                  : 16 + left + \"px\",\r\n                top: arePointsEqual(insurgent, selectedInsurgent)\r\n                  ? 13 + top + \"px\"\r\n                  : 12 + top + \"px\",\r\n                width: arePointsEqual(insurgent, selectedInsurgent)\r\n                  ? \"19px\"\r\n                  : \"22px\",\r\n                zIndex: 99,\r\n                opacity:\r\n                  insurgent.willBeAttacked && insurgent.attacked === 1\r\n                    ? 0.7\r\n                    : arePointsEqual(insurgent, selectedInsurgent)\r\n                    ? 0.8\r\n                    : 1,\r\n                cursor:\r\n                  game.gameplayState !== \"insurgentMove\"\r\n                    ? \"default\"\r\n                    : insurgent.moves > 0\r\n                    ? \"pointer\"\r\n                    : \"default\",\r\n              }}\r\n              onClick={() => showInsurgentMovement(insurgent)}\r\n            />\r\n            {game.gameplayState === \"insurgentMove\" && insurgent.moves > 0 ? (\r\n              <img\r\n                src={\r\n                  insurgent.moves > 3\r\n                    ? process.env.PUBLIC_URL + \"/images/moves-3.png\"\r\n                    : process.env.PUBLIC_URL +\r\n                      \"/images/moves-\" +\r\n                      insurgent.moves +\r\n                      \".png\"\r\n                }\r\n                style={{\r\n                  position: \"absolute\",\r\n                  left: avgRow % 2 === 0 ? 17 + left + \"px\" : 17 + left + \"px\",\r\n                  top: 34 + top + \"px\",\r\n                  width: \"20px\",\r\n                  zIndex: 99,\r\n                  opacity:\r\n                    insurgent.willBeAttacked && insurgent.attacked === 1\r\n                      ? 0.7\r\n                      : 1,\r\n                }}\r\n              />\r\n            ) : null}\r\n          </div>\r\n        );\r\n      case \"down\":\r\n        return (\r\n          <div>\r\n            <img\r\n              src={process.env.PUBLIC_URL + \"/images/insurgent-3-3d.png\"}\r\n              key={insurgent.id}\r\n              style={{\r\n                position: \"absolute\",\r\n                left: arePointsEqual(insurgent, selectedInsurgent)\r\n                  ? 17 + left + \"px\"\r\n                  : avgRow % 2 === 0\r\n                  ? 16 + left + \"px\"\r\n                  : 16 + left + \"px\",\r\n                top: 15 + top + \"px\",\r\n                width: arePointsEqual(insurgent, selectedInsurgent)\r\n                  ? \"17px\"\r\n                  : \"20px\",\r\n                zIndex: 99,\r\n                opacity:\r\n                  insurgent.willBeAttacked && insurgent.attacked === 1\r\n                    ? 0.7\r\n                    : arePointsEqual(insurgent, selectedInsurgent)\r\n                    ? 0.8\r\n                    : 1,\r\n                cursor:\r\n                  game.gameplayState !== \"insurgentMove\"\r\n                    ? \"default\"\r\n                    : insurgent.moves > 0\r\n                    ? \"pointer\"\r\n                    : \"default\",\r\n              }}\r\n              onClick={() => showInsurgentMovement(insurgent)}\r\n            />\r\n            {game.gameplayState === \"insurgentMove\" && insurgent.moves > 0 ? (\r\n              <img\r\n                src={\r\n                  insurgent.moves > 3\r\n                    ? process.env.PUBLIC_URL + \"/images/moves-3.png\"\r\n                    : process.env.PUBLIC_URL +\r\n                      \"/images/moves-\" +\r\n                      insurgent.moves +\r\n                      \".png\"\r\n                }\r\n                style={{\r\n                  position: \"absolute\",\r\n                  left: avgRow % 2 === 0 ? 17 + left + \"px\" : 17 + left + \"px\",\r\n                  top: 37 + top + \"px\",\r\n                  width: \"20px\",\r\n                  zIndex: 99,\r\n                  opacity:\r\n                    insurgent.willBeAttacked && insurgent.attacked === 1\r\n                      ? 0.7\r\n                      : 1,\r\n                }}\r\n              />\r\n            ) : null}\r\n          </div>\r\n        );\r\n      default:\r\n        return <img></img>;\r\n    }\r\n  });\r\n\r\n  const stateDictionary = {\r\n    preStart: \"Start Game\",\r\n    insurgentStart: \"Place Insurgents\",\r\n    hegemonStart: \"Place Hegemon\",\r\n    insurgentMove: \"Insurgent\",\r\n    insurgentPlace: \"Place Insurgent\",\r\n    hegemonMove: \"Hegemon\",\r\n    insurgentWin: \"Insurgents Win\",\r\n    hegemonWin: \"The Hegemon Wins\",\r\n  };\r\n\r\n  ReactDOM.render(\r\n    <Settings\r\n      closeSettings={closeSettings}\r\n      sfx={soundEffects}\r\n      ambientSound={streetAmbience}\r\n      backgroundMusic={props.backgroundMusic}\r\n    />,\r\n    document.getElementById(\"settings\")\r\n  );\r\n\r\n  document.getElementById(\"closeInfo\")!.onclick = closeInfo;\r\n  document.getElementById(\"infoButton\")!.onclick = openInfo;\r\n\r\n  document.getElementById(\"settingsButton\")!.onclick = openSettings;\r\n\r\n  document.getElementById(\"boardContainer\")!.onclick = () => {\r\n    closeInfo();\r\n    closeSettings();\r\n  };\r\n  document.getElementsByTagName(\"body\")![0].onkeydown = (ev) => {\r\n    if (ev.key === \"Escape\") {\r\n      closeInfo();\r\n      closeSettings();\r\n    }\r\n    if (ev.key === \"i\") {\r\n      openInfo();\r\n    }\r\n    if (ev.key === \"p\") {\r\n      openSettings();\r\n    }\r\n  };\r\n\r\n  // info menu\r\n  document.getElementById(\"intelligenceButton\")!.style.borderBottom =\r\n    \"2px solid white\";\r\n  document.getElementById(\"intelligenceButton\")!.onclick = () =>\r\n    changeInfoMenu(\"intelligence\");\r\n  document.getElementById(\"gameplayButton\")!.onclick = () =>\r\n    changeInfoMenu(\"gameplay\");\r\n  document.getElementById(\"hegemonButton\")!.onclick = () =>\r\n    changeInfoMenu(\"hegemon\");\r\n  document.getElementById(\"insurgentsButton\")!.onclick = () =>\r\n    changeInfoMenu(\"insurgents\");\r\n  document.getElementById(\"winningButton\")!.onclick = () =>\r\n    changeInfoMenu(\"winning\");\r\n\r\n  if (infoMenu !== \"intelligence\") {\r\n    document.getElementById(\r\n      \"infoMenuTitle\"\r\n    )!.innerHTML = infoMenu.toUpperCase();\r\n  } else {\r\n    document.getElementById(\"infoMenuTitle\")!.innerHTML =\r\n      props.config.title + \" \" + props.config.year;\r\n  }\r\n  ReactDOM.render(\r\n    infoMenuToComponent[infoMenu],\r\n    document.getElementById(\"infoContent\")\r\n  );\r\n\r\n  document.getElementById(\"startGame\")!.onclick = startGame;\r\n  document.getElementById(\"startGame\")!.style.display =\r\n    game.gameplayState !== \"preStart\" ? \"none\" : \"block\";\r\n\r\n  document.getElementById(\"whoMoves\")!.innerHTML =\r\n    stateDictionary[game.gameplayState];\r\n  document.getElementById(\"whoMoves\")!.style.display =\r\n    game.gameplayState === \"preStart\" ? \"none\" : \"block\";\r\n\r\n  document.getElementById(\"endRound\")!.style.display =\r\n    game.gameplayState === \"insurgentMove\" ||\r\n    game.gameplayState === \"hegemonMove\"\r\n      ? \"block\"\r\n      : \"none\";\r\n  document.getElementById(\"endRound\")!.onclick = changeWhoMoves;\r\n\r\n  document.getElementById(\"gameStatsAlive\")!.style.display =\r\n    game.gameplayState === \"hegemonStart\" ||\r\n    game.gameplayState === \"insurgentStart\" ||\r\n    game.gameplayState === \"preStart\"\r\n      ? \"none\"\r\n      : \"flex\";\r\n  document.getElementById(\"gameStatsDead\")!.style.display =\r\n    game.gameplayState === \"hegemonStart\" ||\r\n    game.gameplayState === \"insurgentStart\" ||\r\n    game.gameplayState === \"preStart\"\r\n      ? \"none\"\r\n      : \"flex\";\r\n  document.getElementById(\"aliveInsurgents\")!.innerHTML =\r\n    \"Alive Insurgents: \" + insurgents.length;\r\n  document.getElementById(\"aliveHegemons\")!.innerHTML =\r\n    \"Alive Hegemons: \" + hegemons.length;\r\n  document.getElementById(\"deadInsurgents\")!.innerHTML =\r\n    \"Dead Insurgents: \" + game.deadInsurgents;\r\n  document.getElementById(\"deadHegemons\")!.innerHTML =\r\n    \"Dead Hegemons: \" + game.deadHegemons;\r\n\r\n  if (\r\n    game.gameplayState === \"hegemonMove\" ||\r\n    game.gameplayState === \"hegemonStart\" ||\r\n    game.gameplayState === \"hegemonWin\"\r\n  ) {\r\n    document.getElementById(\"statusbar\")!.style.backgroundColor =\r\n      \"rgb(58, 76, 105)\";\r\n    document.getElementById(\"statusbar\")!.style.color = \"white\";\r\n    document.getElementById(\"endRound\")!.style.backgroundColor =\r\n      \"rgb(36, 46, 64)\";\r\n    document.getElementById(\"infoButton\")!.style.color = \"white\";\r\n    document.getElementById(\"settingsButton\")!.style.color = \"white\";\r\n  } else {\r\n    document.getElementById(\"statusbar\")!.style.backgroundColor =\r\n      \"rgb(217, 196, 196)\";\r\n    document.getElementById(\"statusbar\")!.style.color = \"black\";\r\n    document.getElementById(\"endRound\")!.style.backgroundColor =\r\n      \"rgb(238, 77, 47)\";\r\n    document.getElementById(\"infoButton\")!.style.color = \"black\";\r\n    document.getElementById(\"settingsButton\")!.style.color = \"black\";\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* Hegemon movement preview */}\r\n      <PreviewHexes\r\n        hexes={getHexNeighbors(\r\n          selectedHegemonMovement,\r\n          hegemons,\r\n          props.config.board,\r\n          true\r\n        )}\r\n        hegemon={selectedHegemonMovement}\r\n        hegemons={hegemons}\r\n        setHegemons={setHegemons}\r\n        selectedHegemonAttack={selectedHegemonAttack}\r\n        setSelectedHegemonMovement={setSelectedHegemonMovement}\r\n        setSelectedHegemonAttack={setSelectedHegemonAttack}\r\n        insurgents={insurgents}\r\n        setInsurgents={setInsurgents}\r\n        game={game}\r\n        setGame={setGame}\r\n        config={props.config}\r\n        color=\"#438ef4\"\r\n        explosion={explosion}\r\n        hegemonMove={hegemonMove}\r\n        hegemonMoveWater={hegemonMoveWater}\r\n        roundEnd={roundEnd}\r\n      />\r\n      {/* Hegemon attack preview*/}\r\n      <PreviewHexes\r\n        hexes={getHexNeighbors(\r\n          selectedHegemonAttack,\r\n          hegemons,\r\n          props.config.board,\r\n          false\r\n        )}\r\n        hegemon={selectedHegemonAttack}\r\n        hegemons={hegemons}\r\n        setHegemons={setHegemons}\r\n        selectedHegemonAttack={selectedHegemonAttack}\r\n        setSelectedHegemonMovement={setSelectedHegemonMovement}\r\n        setSelectedHegemonAttack={setSelectedHegemonAttack}\r\n        insurgents={insurgents}\r\n        setInsurgents={setInsurgents}\r\n        game={game}\r\n        setGame={setGame}\r\n        config={props.config}\r\n        color=\"red\"\r\n        explosion={explosion}\r\n        hegemonMove={hegemonMove}\r\n        hegemonMoveWater={hegemonMoveWater}\r\n        roundEnd={roundEnd}\r\n      />\r\n      {/* Insurgent movement preview */}\r\n      {game.gameplayState === \"insurgentMove\" ? (\r\n        <PreviewInsurgentMovement\r\n          points={getInsurgentNeighbors(\r\n            selectedInsurgent,\r\n            insurgents,\r\n            props.config.board\r\n          )}\r\n          insurgent={selectedInsurgent}\r\n          hegemons={hegemons}\r\n          setHegemons={setHegemons}\r\n          insurgents={insurgents}\r\n          setInsurgents={setInsurgents}\r\n          game={game}\r\n          setGame={setGame}\r\n          setSelectedInsurgent={setSelectedInsurgent}\r\n          config={props.config}\r\n          stepLand={stepLand}\r\n          roundEnd={roundEnd}\r\n          stepTransport={stepTransport}\r\n          hegemonDeath={hegemonDeath}\r\n        />\r\n      ) : null}\r\n\r\n      {/* Insurgent placement preview */}\r\n      {game.gameplayState === \"insurgentStart\" ||\r\n      game.gameplayState === \"insurgentPlace\" ? (\r\n        <PreviewInsurgentPlacement\r\n          points={getAllInsurgentsNeighbors(insurgents, props.config.board)}\r\n          insurgents={insurgents}\r\n          setInsurgents={setInsurgents}\r\n          hegemons={hegemons}\r\n          setHegemons={setHegemons}\r\n          game={game}\r\n          setGame={setGame}\r\n          setSelectedInsurgent={setSelectedInsurgent}\r\n          config={props.config}\r\n          stepLand={stepLand}\r\n          roundEnd={roundEnd}\r\n          stepTransport={stepTransport}\r\n          hegemonDeath={hegemonDeath}\r\n        />\r\n      ) : null}\r\n\r\n      {/* Hegemon placement preview */}\r\n      {game.gameplayState === \"hegemonStart\" ? (\r\n        <PreviewHegemonPlacement\r\n          hexes={getAllHegemonPlaces(hegemons, insurgents, props.config.board)}\r\n          hegemons={hegemons}\r\n          setHegemons={setHegemons}\r\n          insurgents={insurgents}\r\n          setInsurgents={setInsurgents}\r\n          game={game}\r\n          setGame={setGame}\r\n          config={props.config}\r\n          color=\"#438ef4\"\r\n          explosion={explosion}\r\n          hegemonMove={hegemonMove}\r\n          hegemonMoveWater={hegemonMoveWater}\r\n          roundEnd={roundEnd}\r\n        />\r\n      ) : null}\r\n\r\n      {hegemonPieces}\r\n      {insurgentPieces}\r\n    </div>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/tears-in-rain.be5c398b.mp3\";","/* eslint-disable jsx-a11y/heading-has-content */\nimport \"./index.css\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport config from \"./config/new-york.json\";\n\nimport { Display } from \"rot-js\";\nimport { isCellValid, isSpaceAvailable } from \"./Hegemon\";\nimport { Board } from \"./Board\";\nimport ReactDOM from \"react-dom\";\nimport {\n  isPointOnRails,\n  isVertexValid,\n  sortHexesInsideInsurgent,\n} from \"./Insurgent\";\nimport { Game, Hegemon, Insurgent } from \"./types\";\n\n//@ts-ignore\nimport backgroundMusicAudio from \"./sounds/tears-in-rain.mp3\";\nconst backgroundMusic = new Audio(backgroundMusicAudio);\nbackgroundMusic.volume = 0.2;\nbackgroundMusic.preload = \"auto\";\nbackgroundMusic.loop = true;\nbackgroundMusic.autoplay = true;\n\nconst renderBoard = (config: any) => {\n  const cellToColor: Record<number, string> = {\n    0: \"rgb(255, 255, 255)\",\n    1: \"rgb(58, 76, 105)\",\n    2: \"rgb(77, 76, 76)\",\n    3: \"rgba(58, 76, 105, 0.4)\",\n  };\n\n  var display = new Display({\n    width: config.height * 2,\n    height: config.width,\n    layout: \"hex\",\n    border: 0.4,\n    spacing: 4,\n    transpose: true,\n  });\n\n  for (let x = 0; x < config.width; x++) {\n    for (let y = x % 2; y < config.height * 2; y += 2) {\n      let bg = cellToColor[config.board[y][x]];\n\n      display.draw(y, x, \"\", \"rgb(125, 125, 125)\", bg);\n    }\n  }\n  const gameContainer = display.getContainer()!;\n\n  const boardDiv = document.getElementById(\"board\")!;\n  boardDiv.appendChild(gameContainer);\n  // Muzica maestre\n  backgroundMusic.play();\n\n  // Render board text\n  for (const location of config.locations) {\n    const p = document.createElement(\"p\");\n\n    p.textContent = location.name;\n    p.style.position = \"absolute\";\n    p.style.color = \"black\";\n    p.style.top = location.top;\n    p.style.left = location.left;\n    p.style.fontFamily = \"Nova Square\";\n    p.style.color = location.color;\n    p.style.fontWeight = \"500\";\n    p.style.fontSize = location.fontSize;\n    p.style.userSelect = \"none\";\n    p.style.transform = location.rotate;\n    p.style.zIndex = \"1\";\n\n    boardDiv.appendChild(p);\n  }\n};\n\nconst generateHegemons = (hegemons: Hegemon[], count: number) => {\n  for (let idx = 0; idx < count; idx++) {\n    let piece: Hegemon;\n    if (!isSpaceAvailable(hegemons, config.board)) {\n      break;\n    }\n\n    do {\n      const col = Math.floor(Math.round(Math.random() * 19));\n      const row = Math.floor(Math.random() * 30);\n\n      piece = { id: uuidv4(), col: col, row: row, moves: config.hegemonMoves };\n    } while (!isCellValid(piece, hegemons, config.board));\n\n    hegemons.push(piece);\n  }\n};\n\nconst generateInsurgent = (insurgents: Insurgent[]) => {\n  let piece: Insurgent;\n  do {\n    const col1 = Math.floor(Math.round(Math.random() * 21 - 1));\n    const row1 = Math.floor(Math.random() * 31 - 1);\n\n    let col2 = JSON.parse(JSON.stringify(col1));\n    let row2 = JSON.parse(JSON.stringify(row1));\n    row2 += 1;\n\n    let col3 = JSON.parse(JSON.stringify(col2));\n    let row3 = JSON.parse(JSON.stringify(row2));\n\n    if (Math.random() < 0.5) {\n      col3 = col2 - 1;\n      row3 = col3 % 2 === 0 ? Math.max(row1, row2) : Math.min(row1, row2);\n    } else {\n      col3 = col2 + 1;\n      row3 = col3 % 2 === 0 ? Math.max(row1, row2) : Math.min(row1, row2);\n    }\n\n    piece = {\n      id: uuidv4(),\n      hex1: {\n        id: uuidv4(),\n        col: col1,\n        row: row1,\n      },\n      hex2: {\n        id: uuidv4(),\n        col: col2,\n        row: row2,\n      },\n      hex3: {\n        id: uuidv4(),\n        col: col3,\n        row: row3,\n      },\n      orientation:\n        Math.random() < 0.33 ? \"base\" : Math.random() < 0.5 ? \"down\" : \"up\",\n      willBeAttacked: false,\n      attacked: 0,\n      moves: config.insurgentMoves,\n    };\n    // Sort hexes before checking\n    sortHexesInsideInsurgent(piece);\n  } while (!isVertexValid(piece, insurgents, config.board));\n\n  return piece;\n};\nconst generateInsurgentNeighbor = (\n  insurgent: Insurgent,\n  insurgents: Insurgent[]\n) => {\n  // No verification\n\n  if (insurgent.hex1.col < insurgent.hex2.col) {\n    // 33% chance each\n    const chance = Math.random();\n    if (chance < 0.33) {\n      const right: Insurgent = {\n        id: uuidv4(),\n\n        hex1: {\n          id: uuidv4(),\n          col: insurgent.hex1.col + 2,\n          row: insurgent.hex1.row,\n        },\n        hex2: insurgent.hex2,\n        hex3: insurgent.hex3,\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(right);\n\n      return right;\n    } else if (chance < 0.66) {\n      const leftUp: Insurgent = {\n        id: uuidv4(),\n\n        hex1: insurgent.hex1,\n        hex2: insurgent.hex2,\n        hex3: {\n          id: uuidv4(),\n          col: insurgent.hex3.col - 1,\n          row:\n            insurgent.hex3.col % 2 === 0\n              ? insurgent.hex3.row - 2\n              : insurgent.hex3.row - 1,\n        },\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(leftUp);\n      return leftUp;\n    } else {\n      const leftBottom: Insurgent = {\n        id: uuidv4(),\n\n        hex1: insurgent.hex1,\n        hex2: {\n          id: uuidv4(),\n          col: insurgent.hex2.col - 1,\n          row:\n            insurgent.hex2.col % 2 === 0\n              ? insurgent.hex2.row + 1\n              : insurgent.hex2.row + 2,\n        },\n        hex3: insurgent.hex3,\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(leftBottom);\n      return leftBottom;\n    }\n  } else {\n    // 33% chance each\n    const chance = Math.random();\n    if (chance < 0.33) {\n      const left: Insurgent = {\n        id: uuidv4(),\n\n        hex1: insurgent.hex1,\n        hex2: insurgent.hex2,\n        hex3: {\n          id: uuidv4(),\n          col: insurgent.hex3.col - 2,\n          row: insurgent.hex3.row,\n        },\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(left);\n      return left;\n    } else if (chance < 0.66) {\n      const rightUp: Insurgent = {\n        id: uuidv4(),\n\n        hex1: insurgent.hex1,\n        hex2: {\n          id: uuidv4(),\n          col: insurgent.hex2.col + 1,\n          row:\n            insurgent.hex2.col % 2 === 0\n              ? insurgent.hex2.row - 2\n              : insurgent.hex2.row - 1,\n        },\n        hex3: insurgent.hex3,\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(rightUp);\n      return rightUp;\n    } else {\n      const rightDown: Insurgent = {\n        id: uuidv4(),\n\n        hex1: {\n          id: uuidv4(),\n          col: insurgent.hex1.col + 1,\n          row:\n            insurgent.hex1.col % 2 === 0\n              ? insurgent.hex1.row + 1\n              : insurgent.hex1.row + 2,\n        },\n        hex2: insurgent.hex2,\n        hex3: insurgent.hex3,\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(rightDown);\n      return rightDown;\n    }\n  }\n};\n\nconst generateInsurgentSwarm = (insurgents: Insurgent[], count: number) => {\n  let initialPiece: Insurgent = generateInsurgent(insurgents);\n\n  const swarm: Insurgent[] = [];\n  if (count > 0) {\n    insurgents.push(initialPiece);\n    swarm.push(initialPiece);\n\n    for (let idx = 1; idx < count; idx++) {\n      let piece: Insurgent;\n      do {\n        const randomNo = Math.floor(Math.random() * swarm.length);\n        piece = generateInsurgentNeighbor(swarm[randomNo], insurgents);\n        if (!isPointOnRails(piece, config.board)) {\n          piece.orientation =\n            Math.random() < 0.33 ? \"base\" : Math.random() < 0.5 ? \"up\" : \"down\";\n        }\n      } while (!isVertexValid(piece, insurgents, config.board));\n      insurgents.push(piece);\n      swarm.push(piece);\n    }\n  }\n};\n\n// Generate hegemons and insurgents\nlet hegemons: Hegemon[] = [];\nlet insurgents: Insurgent[] = [];\n\n// generateHegemons(hegemons, 50);\n// generateInsurgentSwarm(insurgents, 25);\n// generateInsurgentSwarm(insurgents, 25);\n// generateInsurgentSwarm(insurgents, 25);\n\nconst game: Game = {\n  gameplayState: \"preStart\",\n  deadInsurgents: 0,\n  deadHegemons: 0,\n};\n// Render hegemons and insurgents\nconst element = (\n  <Board\n    hegemons={hegemons}\n    insurgents={insurgents}\n    game={game}\n    config={config}\n    backgroundMusic={backgroundMusic}\n  />\n);\nReactDOM.render(element, document.getElementById(\"board\")!);\n// Render title\ndocument.getElementById(\"title\")!.innerHTML = config.title;\ndocument.getElementById(\"year\")!.innerHTML = config.year;\n\nrenderBoard(config);\n"],"sourceRoot":""}