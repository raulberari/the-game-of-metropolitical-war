{"version":3,"sources":["Insurgent.tsx","Hegemon.tsx","sounds/explosion.wav","sounds/click-6.wav","sounds/water.wav","sounds/beep-1.ogg","PreviewHex.tsx","PreviewHegemonPlacement.tsx","PreviewHexes.tsx","sounds/step-1.wav","PreviewHeightMove.tsx","sounds/step-2.wav","sounds/explosion-truck.wav","PreviewPoint.tsx","PreviewInsurgentMovement.tsx","PreviewInsurgentPlacement.tsx","info-content/InfoGameplay.tsx","info-content/InfoIntelligence.tsx","info-content/InfoWinning.tsx","info-content/InfoHegemon.tsx","info-content/InfoInsurgents.tsx","sounds/interface-chirp-open.wav","sounds/interface-chirp-close.wav","sounds/click-1.wav","sounds/click-2.wav","sounds/street.mp3","sounds/click-3.wav","sounds/click-4.wav","sounds/click-5.wav","Board.tsx","index.tsx"],"names":["arePointsEqual","i1","i2","areHexesEqual","hex1","hex2","hex3","isInsurgentAdjacentToHex","i","h","sortHexesInsideInsurgent","ins","compareHexes","isPointOnWater","point","board","getCellValue","isPointOnRails","isPointValid","points","prev","selectedInsurgent","move","insurgents","distance","moves","firstCommon","secondCommon","piece","p","isPointBetweenThreeHegemons","hegemons","exists1","exists2","exists3","hegemon","listIncludesPoint","getInsurgentNeighbors","neighbors","push","id","uuidv4","railPoints","newNeighbors","JSON","parse","stringify","neighbor","col","right","row","orientation","leftUp","leftBottom","left","rightUp","rightDown","splice","getAllInsurgentsNeighbors","length","x","y","point1","point2","insurgent","isInList","isCellValid","h1","h2","getHegemonGroup","group","exists","getHexNeighbors","isHegemon","foundHegemon","heg","available","rightBottom","filter","hex","getAllHegemonPlaces","hexagons","intersects","getHexPoints","leftDown","explosion","Audio","explosionAudio","volume","preload","hegemonMove","hegemonMoveAudio","hegemonMoveWater","hegemonMoveWaterAudio","roundEnd","roundEndAudio","PreviewHex","props","setHegemons","selectedHegemonAttack","setSelectedHegemonMovement","setSelectedHegemonAttack","game","setGame","setInsurgents","config","scale","color","onClick","gameplayState","newHegemons","idx","findIndex","play","undefined","find","hegemonMoves","newGame","moveHegemon","newInsurgents","isInRange","attacked","willBeAttacked","deadInsurgents","insurgentsToDie","attackWithHegemon","startHegemons","placeHegemon","onContextMenu","e","preventDefault","className","style","position","opacity","cursor","zIndex","transform","top","float","borderRight","borderTop","borderBottom","width","height","backgroundColor","borderLeft","PreviewHegemonPlacement","hexes","emptyHegemon","hexPreviews","map","PreviewHexes","stepLand","stepLandAudio","PreviewHeightMove","setSelectedInsurgent","orientationToNumber","up","base","down","numberToOrientation","moveInsurgentHeight","choice","delta","Math","abs","toString","insurgentMoves","canMakeMove","canGoUp","canGoBase","canGoDown","display","flexDirection","alignItems","padding","borderRadius","margin","stepTransport","stepTransportAudio","hegemonDeath","hegemonDeathAudio","PreviewPoint","round","borderStyle","borderColor","moveInsurgent","startInsurgents","toDelete","hPoints","hPoint","markGroupForDeletion","includes","deadHegemons","hegemonsToDie","placeInsurgent","PreviewInsurgentMovement","pointPreviews","PreviewInsurgentPlacement","InfoGameplay","src","process","InfoIntelligence","city","InfoWinning","InfoHegemon","InfoInsurgents","interfaceOpen","interfaceOpenAudio","interfaceClose","interfaceCloseAudio","clickInfoMenu","clickInfoMenuAudio","clickButton","clickButtonAudio","streetAmbience","streetAmbienceAudio","loop","clickInsurgent","clickInsurgentAudio","clickHegemonMove","clickHegemonMoveAudio","clickHegemonAttack","clickHegemonAttackAudio","Board","emptyInsurgent","useState","infoMenu","setInfoMenu","selectedHegemonMovement","infoMenuToComponent","intelligence","title","gameplay","winning","showInsurgentMovement","closeInfo","info","document","getElementById","body","getElementsByTagName","overflow","openInfo","focus","changeInfoMenu","menu","oldScrollValue","scrollTop","scrollIntoView","endInsurgentsRound","endHegemonRound","hegemonPieces","index","topExtra","showHegemonMovement","indexOf","showHegemonAttack","insurgentPieces","avgRow","onclick","onkeydown","ev","key","innerHTML","toUpperCase","year","ReactDOM","render","preStart","insurgentStart","hegemonStart","insurgentMove","insurgentPlace","insurgentWin","hegemonWin","console","log","element","cellToColor","0","1","2","3","Display","layout","border","spacing","transpose","bg","draw","gameContainer","getContainer","boardDiv","appendChild","locations","location","createElement","textContent","name","fontFamily","fontWeight","fontSize","userSelect","rotate","renderBoard"],"mappings":"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","file":"static/js/main.41c6f3b9.chunk.js","sourcesContent":["import { areHexesEqual, compareHexes, getCellValue } from \"./Hegemon\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { Hegemon, Hexagon, Insurgent, Point } from \"./types\";\r\n\r\nexport const isVertexValid = (\r\n  insurgent: Insurgent,\r\n  insurgents: Insurgent[],\r\n  board: number[][]\r\n) => {\r\n  if (\r\n    getCellValue(insurgent.hex1, board) === 1 &&\r\n    getCellValue(insurgent.hex2, board) === 1 &&\r\n    getCellValue(insurgent.hex3, board) === 1\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  if (\r\n    (getCellValue(insurgent.hex1, board) === 2 ||\r\n      getCellValue(insurgent.hex1, board) === 3 ||\r\n      getCellValue(insurgent.hex2, board) === 2 ||\r\n      getCellValue(insurgent.hex2, board) === 3 ||\r\n      getCellValue(insurgent.hex3, board) === 2 ||\r\n      getCellValue(insurgent.hex3, board) === 3) &&\r\n    insurgent.orientation !== \"base\"\r\n  ) {\r\n    return false;\r\n  }\r\n  for (const piece of insurgents) {\r\n    if (arePointsEqual(piece, insurgent)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const arePointsEqual = (\r\n  i1: Insurgent | Point,\r\n  i2: Insurgent | Point\r\n) => {\r\n  return (\r\n    areHexesEqual(i1.hex1, i2.hex1) &&\r\n    areHexesEqual(i1.hex2, i2.hex2) &&\r\n    areHexesEqual(i1.hex3, i2.hex3)\r\n  );\r\n};\r\n\r\nexport const isInsurgentAdjacentToHex = (\r\n  i: Insurgent,\r\n  h: Hegemon | Hexagon\r\n) => {\r\n  if (\r\n    areHexesEqual(i.hex1, h) ||\r\n    areHexesEqual(i.hex2, h) ||\r\n    areHexesEqual(i.hex3, h)\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport const sortHexesInsideInsurgent = (ins: Insurgent | Point) => {\r\n  // Sort hexes before checking\r\n  if (compareHexes(ins.hex1, ins.hex3)) {\r\n    [ins.hex1, ins.hex3] = [ins.hex3, ins.hex1];\r\n  }\r\n  if (compareHexes(ins.hex1, ins.hex2)) {\r\n    [ins.hex1, ins.hex2] = [ins.hex2, ins.hex1];\r\n  }\r\n  if (compareHexes(ins.hex2, ins.hex3)) {\r\n    [ins.hex2, ins.hex3] = [ins.hex3, ins.hex2];\r\n  }\r\n};\r\n\r\nexport const isPointOnWater = (point: Point, board: number[][]) => {\r\n  if (\r\n    getCellValue(point.hex1, board) === 1 &&\r\n    getCellValue(point.hex2, board) === 1 &&\r\n    getCellValue(point.hex3, board) === 1\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const isPointOnRails = (point: Point | Insurgent, board: number[][]) => {\r\n  if (\r\n    getCellValue(point.hex1, board) === 2 ||\r\n    getCellValue(point.hex2, board) === 2 ||\r\n    getCellValue(point.hex3, board) === 2 ||\r\n    getCellValue(point.hex1, board) === 3 ||\r\n    getCellValue(point.hex2, board) === 3 ||\r\n    getCellValue(point.hex3, board) === 3\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const isPointValid = (\r\n  point: Point,\r\n  points: Point[],\r\n  prev: Point,\r\n  selectedInsurgent: Insurgent,\r\n  move: number,\r\n  insurgents: Insurgent[],\r\n  board: number[][]\r\n) => {\r\n  // Prevent going on water\r\n  if (\r\n    getCellValue(point.hex1, board) === 1 &&\r\n    getCellValue(point.hex2, board) === 1 &&\r\n    getCellValue(point.hex3, board) === 1\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  // TODO\r\n  if (point.distance > selectedInsurgent.moves) {\r\n    return false;\r\n  }\r\n\r\n  // Prevent going over water\r\n  let firstCommon: Hexagon = point.hex1;\r\n  let secondCommon: Hexagon = point.hex2;\r\n\r\n  if (\r\n    !areHexesEqual(prev.hex1, point.hex1) &&\r\n    !areHexesEqual(prev.hex2, point.hex1) &&\r\n    !areHexesEqual(prev.hex3, point.hex1)\r\n  ) {\r\n    firstCommon = point.hex2;\r\n    secondCommon = point.hex3;\r\n  }\r\n\r\n  if (\r\n    !areHexesEqual(prev.hex1, point.hex2) &&\r\n    !areHexesEqual(prev.hex2, point.hex2) &&\r\n    !areHexesEqual(prev.hex3, point.hex2)\r\n  ) {\r\n    firstCommon = point.hex1;\r\n    secondCommon = point.hex3;\r\n  }\r\n\r\n  if (\r\n    !areHexesEqual(prev.hex1, point.hex3) &&\r\n    !areHexesEqual(prev.hex2, point.hex3) &&\r\n    !areHexesEqual(prev.hex3, point.hex3)\r\n  ) {\r\n    firstCommon = point.hex1;\r\n    secondCommon = point.hex2;\r\n  }\r\n\r\n  if (\r\n    getCellValue(firstCommon, board) === 1 &&\r\n    getCellValue(secondCommon, board) === 1\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  // Prevent going through other insurgents\r\n  for (const piece of insurgents) {\r\n    if (arePointsEqual(piece, point)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Prevent doubled points\r\n  for (const p of points) {\r\n    if (arePointsEqual(point, p)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const isPointBetweenThreeHegemons = (\r\n  point: Point,\r\n  hegemons: Hegemon[]\r\n) => {\r\n  let exists1 = false;\r\n  let exists2 = false;\r\n  let exists3 = false;\r\n\r\n  for (const hegemon of hegemons) {\r\n    if (areHexesEqual(hegemon, point.hex1)) {\r\n      exists1 = true;\r\n    }\r\n    if (areHexesEqual(hegemon, point.hex2)) {\r\n      exists2 = true;\r\n    }\r\n    if (areHexesEqual(hegemon, point.hex3)) {\r\n      exists3 = true;\r\n    }\r\n  }\r\n  return exists1 && exists2 && exists3;\r\n};\r\n\r\nconst listIncludesPoint = (points: Point[], point: Point) => {\r\n  for (var p of points) {\r\n    if (arePointsEqual(p, point)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const getInsurgentNeighbors = (\r\n  selectedInsurgent: Insurgent,\r\n  insurgents: Insurgent[],\r\n  board: number[][]\r\n) => {\r\n  let neighbors: Point[] = [];\r\n\r\n  // add the initial point\r\n  neighbors.push({\r\n    id: uuidv4(),\r\n    hex1: selectedInsurgent.hex1,\r\n    hex2: selectedInsurgent.hex2,\r\n    hex3: selectedInsurgent.hex3,\r\n    distance: 0,\r\n  });\r\n\r\n  const railPoints: Point[] = [];\r\n\r\n  for (let move = 1; move <= selectedInsurgent.moves; move++) {\r\n    // for each step, for each neighbor,\r\n    // \"reflect\" one of the hexes => 3 possible moves\r\n    // add it to the list if it does not exist\r\n    const newNeighbors = JSON.parse(JSON.stringify(neighbors));\r\n    for (const neighbor of neighbors) {\r\n      if (neighbor.hex1.col < neighbor.hex2.col) {\r\n        const right = {\r\n          id: uuidv4(),\r\n\r\n          hex1: {\r\n            id: uuidv4(),\r\n            col: neighbor.hex1.col + 2,\r\n            row: neighbor.hex1.row,\r\n          },\r\n          hex2: neighbor.hex2,\r\n          hex3: neighbor.hex3,\r\n          distance: neighbor.distance + 1,\r\n        };\r\n        sortHexesInsideInsurgent(right);\r\n        if (\r\n          isPointOnRails(right, board) &&\r\n          selectedInsurgent.orientation !== \"base\" &&\r\n          !listIncludesPoint(railPoints, right)\r\n        ) {\r\n          right.distance += 1;\r\n          railPoints.push(right);\r\n        }\r\n        if (\r\n          isPointValid(\r\n            right,\r\n            newNeighbors,\r\n            neighbor,\r\n            selectedInsurgent,\r\n            move,\r\n            insurgents,\r\n            board\r\n          )\r\n        )\r\n          newNeighbors.push(right);\r\n\r\n        const leftUp = {\r\n          id: uuidv4(),\r\n\r\n          hex1: neighbor.hex1,\r\n          hex2: neighbor.hex2,\r\n          hex3: {\r\n            id: uuidv4(),\r\n            col: neighbor.hex3.col - 1,\r\n            row:\r\n              neighbor.hex3.col % 2 === 0\r\n                ? neighbor.hex3.row - 2\r\n                : neighbor.hex3.row - 1,\r\n          },\r\n          distance: neighbor.distance + 1,\r\n        };\r\n        sortHexesInsideInsurgent(leftUp);\r\n        if (\r\n          isPointOnRails(leftUp, board) &&\r\n          selectedInsurgent.orientation !== \"base\" &&\r\n          !listIncludesPoint(railPoints, leftUp)\r\n        ) {\r\n          leftUp.distance += 1;\r\n          railPoints.push(leftUp);\r\n        }\r\n        if (\r\n          isPointValid(\r\n            leftUp,\r\n            newNeighbors,\r\n            neighbor,\r\n            selectedInsurgent,\r\n            move,\r\n            insurgents,\r\n            board\r\n          )\r\n        )\r\n          newNeighbors.push(leftUp);\r\n\r\n        const leftBottom = {\r\n          id: uuidv4(),\r\n\r\n          hex1: neighbor.hex1,\r\n          hex2: {\r\n            id: uuidv4(),\r\n            col: neighbor.hex2.col - 1,\r\n            row:\r\n              neighbor.hex2.col % 2 === 0\r\n                ? neighbor.hex2.row + 1\r\n                : neighbor.hex2.row + 2,\r\n          },\r\n          hex3: neighbor.hex3,\r\n          distance: neighbor.distance + 1,\r\n        };\r\n        sortHexesInsideInsurgent(leftBottom);\r\n        if (\r\n          isPointOnRails(leftBottom, board) &&\r\n          selectedInsurgent.orientation !== \"base\" &&\r\n          !listIncludesPoint(railPoints, leftBottom)\r\n        ) {\r\n          leftBottom.distance += 1;\r\n          railPoints.push(leftBottom);\r\n        }\r\n        if (\r\n          isPointValid(\r\n            leftBottom,\r\n            newNeighbors,\r\n            neighbor,\r\n            selectedInsurgent,\r\n            move,\r\n            insurgents,\r\n            board\r\n          )\r\n        )\r\n          newNeighbors.push(leftBottom);\r\n      } else if (neighbor.hex3.col > neighbor.hex2.col) {\r\n        const left = {\r\n          id: uuidv4(),\r\n\r\n          hex1: neighbor.hex1,\r\n          hex2: neighbor.hex2,\r\n          hex3: {\r\n            id: uuidv4(),\r\n            col: neighbor.hex3.col - 2,\r\n            row: neighbor.hex3.row,\r\n          },\r\n          distance: neighbor.distance + 1,\r\n        };\r\n        sortHexesInsideInsurgent(left);\r\n        if (\r\n          isPointOnRails(left, board) &&\r\n          selectedInsurgent.orientation !== \"base\" &&\r\n          !listIncludesPoint(railPoints, left)\r\n        ) {\r\n          left.distance += 1;\r\n          railPoints.push(left);\r\n        }\r\n        if (\r\n          isPointValid(\r\n            left,\r\n            newNeighbors,\r\n            neighbor,\r\n            selectedInsurgent,\r\n            move,\r\n            insurgents,\r\n            board\r\n          )\r\n        )\r\n          newNeighbors.push(left);\r\n\r\n        const rightUp = {\r\n          id: uuidv4(),\r\n\r\n          hex1: neighbor.hex1,\r\n          hex2: {\r\n            id: uuidv4(),\r\n            col: neighbor.hex2.col + 1,\r\n            row:\r\n              neighbor.hex2.col % 2 === 0\r\n                ? neighbor.hex2.row - 2\r\n                : neighbor.hex2.row - 1,\r\n          },\r\n          hex3: neighbor.hex3,\r\n          distance: neighbor.distance + 1,\r\n        };\r\n        sortHexesInsideInsurgent(rightUp);\r\n        if (\r\n          isPointOnRails(rightUp, board) &&\r\n          selectedInsurgent.orientation !== \"base\" &&\r\n          !listIncludesPoint(railPoints, rightUp)\r\n        ) {\r\n          rightUp.distance += 1;\r\n          railPoints.push(rightUp);\r\n        }\r\n        if (\r\n          isPointValid(\r\n            rightUp,\r\n            newNeighbors,\r\n            neighbor,\r\n            selectedInsurgent,\r\n            move,\r\n            insurgents,\r\n            board\r\n          )\r\n        )\r\n          newNeighbors.push(rightUp);\r\n\r\n        const rightDown = {\r\n          id: uuidv4(),\r\n\r\n          hex1: {\r\n            id: uuidv4(),\r\n            col: neighbor.hex1.col + 1,\r\n            row:\r\n              neighbor.hex1.col % 2 === 0\r\n                ? neighbor.hex1.row + 1\r\n                : neighbor.hex1.row + 2,\r\n          },\r\n          hex2: neighbor.hex2,\r\n          hex3: neighbor.hex3,\r\n          distance: neighbor.distance + 1,\r\n        };\r\n        sortHexesInsideInsurgent(rightDown);\r\n        if (\r\n          isPointOnRails(rightDown, board) &&\r\n          selectedInsurgent.orientation !== \"base\" &&\r\n          !listIncludesPoint(railPoints, rightDown)\r\n        ) {\r\n          rightDown.distance += 1;\r\n          railPoints.push(rightDown);\r\n        }\r\n\r\n        if (\r\n          isPointValid(\r\n            rightDown,\r\n            newNeighbors,\r\n            neighbor,\r\n            selectedInsurgent,\r\n            move,\r\n            insurgents,\r\n            board\r\n          )\r\n        )\r\n          newNeighbors.push(rightDown);\r\n      }\r\n    }\r\n    neighbors = JSON.parse(JSON.stringify(newNeighbors));\r\n  }\r\n\r\n  neighbors.splice(0, 1);\r\n  return neighbors;\r\n};\r\n\r\nexport const getAllInsurgentsNeighbors = (\r\n  insurgents: Insurgent[],\r\n  board: number[][]\r\n): Point[] => {\r\n  let points: Point[] = [];\r\n\r\n  if (insurgents.length === 0) {\r\n    for (let x = -1; x < board[0].length; x++) {\r\n      for (let y = -1; y < board.length / 2 + 1; y++) {\r\n        const point1: Point = {\r\n          id: uuidv4(),\r\n          hex1: { id: uuidv4(), col: x, row: y },\r\n          hex2: { id: uuidv4(), col: x + 1, row: y },\r\n          hex3: { id: uuidv4(), col: x, row: x % 2 === 0 ? y + 1 : y - 1 },\r\n          distance: 0,\r\n        };\r\n        if (!isPointOnWater(point1, board)) {\r\n          sortHexesInsideInsurgent(point1);\r\n          points.push(point1);\r\n        }\r\n\r\n        const point2: Point = {\r\n          id: uuidv4(),\r\n          hex1: { id: uuidv4(), col: x, row: y },\r\n          hex2: { id: uuidv4(), col: x - 1, row: y },\r\n          hex3: { id: uuidv4(), col: x, row: x % 2 === 0 ? y + 1 : y - 1 },\r\n          distance: 0,\r\n        };\r\n        if (!isPointOnWater(point2, board)) {\r\n          sortHexesInsideInsurgent(point2);\r\n          points.push(point2);\r\n        }\r\n      }\r\n    }\r\n    return points;\r\n    // should return all the possible points on the board\r\n  }\r\n\r\n  for (const insurgent of insurgents) {\r\n    const neighbors = getInsurgentNeighbors(insurgent, insurgents, board);\r\n    for (const neighbor of neighbors) {\r\n      let isInList = false;\r\n      for (const point of points) {\r\n        if (arePointsEqual(point, neighbor)) {\r\n          isInList = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!isInList) {\r\n        points.push(neighbor);\r\n      }\r\n    }\r\n  }\r\n\r\n  return points;\r\n};\r\n","import { v4 as uuidv4 } from \"uuid\";\r\nimport {\r\n  isInsurgentAdjacentToHex,\r\n  sortHexesInsideInsurgent,\r\n} from \"./Insurgent\";\r\nimport { Hegemon, Hexagon, Insurgent, Point } from \"./types\";\r\n\r\nexport const isCellValid = (\r\n  hegemon: Hegemon | Hexagon,\r\n  hegemons: Hegemon[],\r\n  board: number[][]\r\n) => {\r\n  if (\r\n    hegemon.row < 0 ||\r\n    hegemon.col < 0 ||\r\n    hegemon.row >= board.length / 2 ||\r\n    hegemon.col >= board[0].length\r\n  ) {\r\n    return false;\r\n  }\r\n  for (const piece of hegemons) {\r\n    if (piece.col === hegemon.col && piece.row === hegemon.row) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  if (board[(hegemon.col % 2) + hegemon.row * 2][hegemon.col] === 2) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const getCellValue = (hegemon: Hegemon | Hexagon, board: number[][]) => {\r\n  if (\r\n    hegemon.row < 0 ||\r\n    hegemon.col < 0 ||\r\n    hegemon.row >= board.length / 2 ||\r\n    hegemon.col >= board[0].length\r\n  ) {\r\n    return 1;\r\n  }\r\n  return board[(hegemon.col % 2) + hegemon.row * 2][hegemon.col];\r\n};\r\n\r\nexport const compareHexes = (h1: Hegemon | Hexagon, h2: Hegemon | Hexagon) => {\r\n  // Returns the bigger one\r\n  if (h1.col === h2.col) {\r\n    return h1.row > h2.row;\r\n  }\r\n\r\n  return h1.col > h2.col;\r\n};\r\n\r\nexport const areHexesEqual = (h1: Hegemon | Hexagon, h2: Hegemon | Hexagon) => {\r\n  return h1.col === h2.col && h1.row === h2.row;\r\n};\r\n\r\nexport const isSpaceAvailable = (hegemons: Hegemon[], board: number[][]) => {\r\n  for (let j = 0; j < board[0].length; j++) {\r\n    for (let i = j % 2; i < board.length; i += 2) {\r\n      if (board[i][j] !== 2) {\r\n        let found = false;\r\n        for (const hegemon of hegemons) {\r\n          if ((hegemon.col % 2) + hegemon.row * 2 === i && hegemon.col === j) {\r\n            found = true;\r\n            if (found) break;\r\n          }\r\n        }\r\n        if (!found) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const getHegemonGroup = (\r\n  hegemon: Hegemon,\r\n  hegemons: Hegemon[],\r\n  group: Hegemon[],\r\n  board: number[][]\r\n) => {\r\n  let exists = false;\r\n  for (const h of group) {\r\n    if (areHexesEqual(h, hegemon)) {\r\n      exists = true;\r\n      break;\r\n    }\r\n  }\r\n  if (!exists) {\r\n    group.push(hegemon);\r\n  }\r\n  const neighbors = getHexNeighbors(hegemon, hegemons, board, false);\r\n\r\n  for (const neighbor of neighbors) {\r\n    let isHegemon = false;\r\n    let foundHegemon: Hegemon = { id: uuidv4(), col: -1, row: -1, moves: 3 };\r\n    for (const heg of hegemons) {\r\n      if (areHexesEqual(heg, neighbor)) {\r\n        isHegemon = true;\r\n        foundHegemon = heg;\r\n        break;\r\n      }\r\n    }\r\n    if (isHegemon) {\r\n      let exists = false;\r\n      for (const h of group) {\r\n        if (areHexesEqual(h, foundHegemon)) {\r\n          exists = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!exists) {\r\n        group.push(foundHegemon);\r\n        getHegemonGroup(foundHegemon, hegemons, group, board);\r\n      }\r\n    }\r\n  }\r\n  return group;\r\n};\r\n\r\nexport const getHexNeighbors = (\r\n  hegemon: Hexagon | Hegemon,\r\n  hegemons: Hegemon[],\r\n  board: number[][],\r\n  available: boolean\r\n) => {\r\n  let neighbors: Hexagon[] = [];\r\n  if (hegemon.col < 0 || hegemon.row < 0) {\r\n    return neighbors;\r\n  }\r\n\r\n  // bottom\r\n  neighbors.push({ id: uuidv4(), col: hegemon.col, row: hegemon.row + 1 });\r\n\r\n  // up\r\n  neighbors.push({ id: uuidv4(), col: hegemon.col, row: hegemon.row - 1 });\r\n\r\n  // right-up\r\n  const rightUp: Hexagon = {\r\n    id: uuidv4(),\r\n    col: hegemon.col + 1,\r\n    row: hegemon.row,\r\n  };\r\n  if (hegemon.col % 2 === 0) {\r\n    rightUp.row--;\r\n  }\r\n  neighbors.push(rightUp);\r\n\r\n  // right-bottom\r\n  const rightBottom: Hexagon = {\r\n    id: uuidv4(),\r\n    col: hegemon.col + 1,\r\n    row: hegemon.row + 1,\r\n  };\r\n  if (hegemon.col % 2 === 0) {\r\n    rightBottom.row--;\r\n  }\r\n  neighbors.push(rightBottom);\r\n\r\n  // left-up\r\n  const leftUp: Hexagon = {\r\n    id: uuidv4(),\r\n    col: hegemon.col - 1,\r\n    row: hegemon.row,\r\n  };\r\n  if (hegemon.col % 2 === 0) {\r\n    leftUp.row--;\r\n  }\r\n  neighbors.push(leftUp);\r\n\r\n  // left-bottom\r\n  const leftBottom: Hexagon = {\r\n    id: uuidv4(),\r\n    col: hegemon.col - 1,\r\n    row: hegemon.row + 1,\r\n  };\r\n  if (hegemon.col % 2 === 0) {\r\n    leftBottom.row--;\r\n  }\r\n  neighbors.push(leftBottom);\r\n\r\n  if (available) {\r\n    neighbors = neighbors.filter((hex) => isCellValid(hex, hegemons, board));\r\n  } else {\r\n    neighbors = neighbors.filter(\r\n      (hex) =>\r\n        hex.col >= 0 &&\r\n        hex.row >= 0 &&\r\n        hex.row < board.length / 2 &&\r\n        hex.col < board[0].length\r\n    );\r\n  }\r\n  return JSON.parse(JSON.stringify(neighbors));\r\n};\r\n\r\nexport const getAllHegemonPlaces = (\r\n  hegemons: Hegemon[],\r\n  insurgents: Insurgent[],\r\n  board: number[][]\r\n): Hexagon[] => {\r\n  let hexagons: Hexagon[] = [];\r\n\r\n  for (let x = 0; x < board[0].length; x++) {\r\n    for (let y = 0; y < board.length / 2; y++) {\r\n      const hex = {\r\n        id: uuidv4(),\r\n        col: x,\r\n        row: y,\r\n      };\r\n      if (isCellValid(hex, hegemons, board)) {\r\n        let intersects = false;\r\n        for (const ins of insurgents) {\r\n          for (const h of getHexNeighbors(hex, hegemons, board, false)) {\r\n            if (isInsurgentAdjacentToHex(ins, h)) {\r\n              intersects = true;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!intersects) {\r\n          hexagons.push(hex);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return hexagons;\r\n};\r\n\r\nexport const getHexPoints = (hex: Hexagon | Hegemon) => {\r\n  // 6 points\r\n  const points: Point[] = [];\r\n\r\n  // left\r\n  const left: Point = {\r\n    id: uuidv4(),\r\n    hex1: JSON.parse(JSON.stringify(hex)),\r\n    hex2: {\r\n      id: uuidv4(),\r\n      col: hex.col - 1,\r\n      row: hex.col % 2 === 0 ? hex.row - 1 : hex.row,\r\n    },\r\n    hex3: {\r\n      id: uuidv4(),\r\n      col: hex.col - 1,\r\n      row: hex.col % 2 === 0 ? hex.row : hex.row + 1,\r\n    },\r\n    distance: 1,\r\n  };\r\n  sortHexesInsideInsurgent(left);\r\n  points.push(left);\r\n\r\n  // right\r\n  const right: Point = {\r\n    id: uuidv4(),\r\n    hex1: JSON.parse(JSON.stringify(hex)),\r\n    hex2: {\r\n      id: uuidv4(),\r\n      col: hex.col + 1,\r\n      row: hex.col % 2 === 0 ? hex.row - 1 : hex.row,\r\n    },\r\n    hex3: {\r\n      id: uuidv4(),\r\n      col: hex.col + 1,\r\n      row: hex.col % 2 === 0 ? hex.row : hex.row + 1,\r\n    },\r\n    distance: 1,\r\n  };\r\n  sortHexesInsideInsurgent(right);\r\n  points.push(right);\r\n\r\n  // left up\r\n  const leftUp: Point = {\r\n    id: uuidv4(),\r\n    hex1: JSON.parse(JSON.stringify(hex)),\r\n    hex2: {\r\n      id: uuidv4(),\r\n      col: hex.col - 1,\r\n      row: hex.col % 2 === 0 ? hex.row - 1 : hex.row,\r\n    },\r\n    hex3: {\r\n      id: uuidv4(),\r\n      col: hex.col,\r\n      row: hex.row - 1,\r\n    },\r\n    distance: 1,\r\n  };\r\n  sortHexesInsideInsurgent(leftUp);\r\n  points.push(leftUp);\r\n\r\n  // right up\r\n  const rightUp: Point = {\r\n    id: uuidv4(),\r\n    hex1: JSON.parse(JSON.stringify(hex)),\r\n    hex2: {\r\n      id: uuidv4(),\r\n      col: hex.col + 1,\r\n      row: hex.col % 2 === 0 ? hex.row - 1 : hex.row,\r\n    },\r\n    hex3: {\r\n      id: uuidv4(),\r\n      col: hex.col,\r\n      row: hex.row - 1,\r\n    },\r\n    distance: 1,\r\n  };\r\n  sortHexesInsideInsurgent(rightUp);\r\n  points.push(rightUp);\r\n\r\n  // left down\r\n  const leftDown: Point = {\r\n    id: uuidv4(),\r\n    hex1: JSON.parse(JSON.stringify(hex)),\r\n    hex2: {\r\n      id: uuidv4(),\r\n      col: hex.col - 1,\r\n      row: hex.col % 2 === 0 ? hex.row : hex.row + 1,\r\n    },\r\n    hex3: {\r\n      id: uuidv4(),\r\n      col: hex.col,\r\n      row: hex.row + 1,\r\n    },\r\n    distance: 1,\r\n  };\r\n  sortHexesInsideInsurgent(leftDown);\r\n  points.push(leftDown);\r\n\r\n  // right down\r\n  const rightDown: Point = {\r\n    id: uuidv4(),\r\n    hex1: JSON.parse(JSON.stringify(hex)),\r\n    hex2: {\r\n      id: uuidv4(),\r\n      col: hex.col + 1,\r\n      row: hex.col % 2 === 0 ? hex.row : hex.row + 1,\r\n    },\r\n    hex3: {\r\n      id: uuidv4(),\r\n      col: hex.col,\r\n      row: hex.row + 1,\r\n    },\r\n    distance: 1,\r\n  };\r\n  sortHexesInsideInsurgent(rightDown);\r\n  points.push(rightDown);\r\n\r\n  return points;\r\n};\r\n","export default __webpack_public_path__ + \"static/media/explosion.baf5f0f6.wav\";","export default __webpack_public_path__ + \"static/media/click-6.ba453eb3.wav\";","export default __webpack_public_path__ + \"static/media/water.7eadf9dd.wav\";","export default __webpack_public_path__ + \"static/media/beep-1.f2a116ee.ogg\";","import { Dispatch, SetStateAction } from \"react\";\r\nimport { areHexesEqual, getCellValue, getHexNeighbors } from \"./Hegemon\";\r\nimport { isInsurgentAdjacentToHex } from \"./Insurgent\";\r\nimport { Hexagon, Hegemon, Insurgent, Game, Config } from \"./types\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\n// @ts-ignore\r\nimport explosionAudio from \"./sounds/explosion.wav\";\r\n// @ts-ignore\r\nimport hegemonMoveAudio from \"./sounds/click-6.wav\";\r\n// @ts-ignore\r\nimport hegemonMoveWaterAudio from \"./sounds/water.wav\";\r\n//@ts-ignore\r\nimport roundEndAudio from \"./sounds/beep-1.ogg\";\r\n\r\nconst explosion = new Audio(explosionAudio);\r\nexplosion.volume = 0.1;\r\nexplosion.preload = \"auto\";\r\nconst hegemonMove = new Audio(hegemonMoveAudio);\r\nhegemonMove.volume = 0.15;\r\nhegemonMove.preload = \"auto\";\r\nconst hegemonMoveWater = new Audio(hegemonMoveWaterAudio);\r\nhegemonMoveWater.volume = 0.15;\r\nhegemonMoveWater.preload = \"auto\";\r\nconst roundEnd = new Audio(roundEndAudio);\r\nroundEnd.volume = 0.2;\r\nroundEnd.preload = \"auto\";\r\n\r\nexport const PreviewHex = (props: {\r\n  hex: Hexagon;\r\n  hegemon: Hexagon;\r\n  hegemons: Hegemon[];\r\n  setHegemons: Dispatch<SetStateAction<Hegemon[]>>;\r\n  selectedHegemonAttack: Hexagon;\r\n  setSelectedHegemonMovement: Dispatch<SetStateAction<Hexagon>>;\r\n  setSelectedHegemonAttack: Dispatch<SetStateAction<Hexagon>>;\r\n  insurgents: Insurgent[];\r\n  setInsurgents: Dispatch<SetStateAction<Insurgent[]>>;\r\n  game: Game;\r\n  setGame: Dispatch<SetStateAction<Game>>;\r\n  config: Config;\r\n  scale: number;\r\n  color: string;\r\n}) => {\r\n  const {\r\n    hex,\r\n    hegemon,\r\n    hegemons,\r\n    setHegemons,\r\n    selectedHegemonAttack,\r\n    setSelectedHegemonMovement,\r\n    setSelectedHegemonAttack,\r\n    game,\r\n    setGame,\r\n    insurgents,\r\n    setInsurgents,\r\n    config,\r\n    scale,\r\n    color,\r\n  } = props;\r\n\r\n  const moveHegemon = (hex: Hexagon, hegemon: Hexagon, hegemons: Hegemon[]) => {\r\n    const newHegemons: Hegemon[] = JSON.parse(JSON.stringify(hegemons));\r\n    const idx = newHegemons.findIndex((h) => areHexesEqual(h, hegemon));\r\n    newHegemons[idx].col = hex.col;\r\n    newHegemons[idx].row = hex.row;\r\n    newHegemons[idx].moves = 0;\r\n\r\n    if (getCellValue(hex, config.board) === 1) {\r\n      hegemonMoveWater.play();\r\n    } else {\r\n      hegemonMove.play();\r\n    }\r\n\r\n    // If round end\r\n    if (newHegemons.find((h) => h.moves > 0) === undefined) {\r\n      roundEnd.play();\r\n      for (const heg of newHegemons) {\r\n        heg.moves = config.hegemonMoves;\r\n      }\r\n      setHegemons(newHegemons);\r\n\r\n      const newGame: Game = JSON.parse(JSON.stringify(game));\r\n      newGame.gameplayState = \"insurgentMove\";\r\n      setGame(newGame);\r\n    }\r\n\r\n    setHegemons(newHegemons);\r\n\r\n    setSelectedHegemonMovement({\r\n      id: \"\",\r\n      col: -1,\r\n      row: -1,\r\n    });\r\n    setSelectedHegemonAttack({\r\n      id: \"\",\r\n      col: -2,\r\n      row: -2,\r\n    });\r\n  };\r\n  const playSound = (audioFile: HTMLAudioElement) => {\r\n    audioFile.play();\r\n  };\r\n  const attackWithHegemon = (\r\n    hegemon: Hexagon,\r\n    hegemons: Hegemon[],\r\n    insurgents: Insurgent[]\r\n  ) => {\r\n    playSound(explosion);\r\n    const newHegemons: Hegemon[] = JSON.parse(JSON.stringify(hegemons));\r\n    const idx = newHegemons.findIndex((h) => areHexesEqual(h, hegemon));\r\n    newHegemons[idx].moves = 0;\r\n\r\n    // Attack the insurgents\r\n    let newInsurgents: Insurgent[] = JSON.parse(JSON.stringify(insurgents));\r\n\r\n    for (const insurgent of newInsurgents) {\r\n      let isInRange = false;\r\n\r\n      const neighbors: Array<Hegemon | Hexagon> = getHexNeighbors(\r\n        hegemon,\r\n        hegemons,\r\n        config.board,\r\n        false\r\n      );\r\n      neighbors.push(hegemon);\r\n      for (const neighbor of neighbors) {\r\n        if (isInsurgentAdjacentToHex(insurgent, neighbor)) {\r\n          isInRange = true;\r\n        }\r\n      }\r\n\r\n      if (isInRange) {\r\n        insurgent.attacked += 1;\r\n      }\r\n\r\n      insurgent.willBeAttacked = false;\r\n    }\r\n    newInsurgents = newInsurgents.filter((ins) => {\r\n      if (ins.orientation === \"base\" && ins.attacked >= 1) {\r\n        return false;\r\n      } else if (\r\n        (ins.orientation === \"down\" || ins.orientation === \"up\") &&\r\n        ins.attacked >= 2\r\n      ) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n    const deadInsurgents = insurgents.length - newInsurgents.length;\r\n    setInsurgents(newInsurgents);\r\n\r\n    const newGame: Game = JSON.parse(JSON.stringify(game));\r\n    newGame.deadInsurgents = game.deadInsurgents + deadInsurgents;\r\n    if (newGame.deadInsurgents >= config.insurgentsToDie) {\r\n      newGame.gameplayState = \"hegemonWin\";\r\n    }\r\n    setGame(newGame);\r\n\r\n    // If round end\r\n    if (newHegemons.find((h) => h.moves > 0) === undefined) {\r\n      for (const heg of newHegemons) {\r\n        heg.moves = 1;\r\n      }\r\n\r\n      if (newGame.deadInsurgents >= config.insurgentsToDie) {\r\n        newGame.gameplayState = \"hegemonWin\";\r\n      } else {\r\n        newGame.gameplayState = \"insurgentMove\";\r\n      }\r\n\r\n      setGame(newGame);\r\n    }\r\n\r\n    setHegemons(newHegemons);\r\n    setSelectedHegemonAttack({\r\n      id: \"\",\r\n      col: -2,\r\n      row: -2,\r\n    });\r\n  };\r\n\r\n  const placeHegemon = (hex: Hexagon, hegemons: Hegemon[]) => {\r\n    const hegemon: Hegemon = {\r\n      id: uuidv4(),\r\n      col: hex.col,\r\n      row: hex.row,\r\n      moves: 1,\r\n    };\r\n    if (getCellValue(hex, config.board) === 1) {\r\n      hegemonMoveWater.play();\r\n    } else {\r\n      hegemonMove.play();\r\n    }\r\n\r\n    const newHegemons: Hegemon[] = JSON.parse(JSON.stringify(hegemons));\r\n    newHegemons.push(hegemon);\r\n\r\n    setHegemons(newHegemons);\r\n\r\n    const newGame: Game = JSON.parse(JSON.stringify(game));\r\n    if (newHegemons.length === config.startHegemons) {\r\n      roundEnd.play();\r\n      newGame.gameplayState = \"insurgentMove\";\r\n      setGame(newGame);\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n      onClick={() =>\r\n        game.gameplayState === \"hegemonMove\"\r\n          ? selectedHegemonAttack.col < 0\r\n            ? moveHegemon(hex, hegemon, hegemons)\r\n            : attackWithHegemon(hegemon, hegemons, insurgents)\r\n          : placeHegemon(hex, hegemons)\r\n      }\r\n      onContextMenu={(e) => e.preventDefault()}\r\n      className={\r\n        selectedHegemonAttack.col < 0\r\n          ? \"hegemonMovementHex\"\r\n          : \"hegemonAttackHex\"\r\n      }\r\n      style={{\r\n        position: \"absolute\",\r\n        opacity: selectedHegemonAttack.col >= 0 ? \"0.8\" : \"0.65\",\r\n        cursor: selectedHegemonAttack.col < 0 ? \"pointer\" : \"crosshair\",\r\n        zIndex: 99,\r\n        transform: \"scale(\" + scale + \")\",\r\n        left: 10.5 + hex.col * 60 + \"px\",\r\n        top:\r\n          hex.col % 2 === 0\r\n            ? 48 + hex.row * 69.3 + \"px\"\r\n            : 83 + hex.row * 69.3 + \"px\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          float: \"left\",\r\n          borderRight: \"15px solid \" + color,\r\n          borderTop: \"26px solid transparent\",\r\n          borderBottom: \"26px solid transparent\",\r\n        }}\r\n      />\r\n      <div\r\n        style={{\r\n          float: \"left\",\r\n          width: \"30px\",\r\n          height: \"52px\",\r\n          backgroundColor: color,\r\n        }}\r\n      />\r\n      <div\r\n        style={{\r\n          float: \"left\",\r\n          borderLeft: \"15px solid \" + color,\r\n          borderTop: \"26px solid transparent\",\r\n          borderBottom: \"26px solid transparent\",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { Dispatch, SetStateAction } from \"react\";\r\nimport { PreviewHex } from \"./PreviewHex\";\r\nimport { Config, Game, Hegemon, Hexagon, Insurgent } from \"./types\";\r\n\r\nexport const PreviewHegemonPlacement = (props: {\r\n  hexes: Hexagon[];\r\n  hegemons: Hegemon[];\r\n  setHegemons: Dispatch<SetStateAction<Hegemon[]>>;\r\n  insurgents: Insurgent[];\r\n  setInsurgents: Dispatch<SetStateAction<Insurgent[]>>;\r\n  game: Game;\r\n  setGame: Dispatch<SetStateAction<Game>>;\r\n  config: Config;\r\n  color: string;\r\n}) => {\r\n  const {\r\n    hexes,\r\n    hegemons,\r\n    setHegemons,\r\n    insurgents,\r\n    setInsurgents,\r\n    game,\r\n    setGame,\r\n    config,\r\n    color,\r\n  } = props;\r\n\r\n  const emptyHegemon = {\r\n    id: \"\",\r\n    col: -2,\r\n    row: -2,\r\n  };\r\n  const hexPreviews = hexes.map((hex) => (\r\n    <PreviewHex\r\n      hex={hex}\r\n      // @ts-ignore\r\n      hegemon={null}\r\n      hegemons={hegemons}\r\n      setHegemons={setHegemons}\r\n      color={color}\r\n      scale={1}\r\n      selectedHegemonAttack={emptyHegemon}\r\n      // @ts-ignore\r\n      setSelectedHegemonMovement={null}\r\n      // @ts-ignore\r\n      setSelectedHegemonAttack={null}\r\n      insurgents={insurgents}\r\n      setInsurgents={setInsurgents}\r\n      game={game}\r\n      setGame={setGame}\r\n      config={config}\r\n      key={hex.id}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div\r\n      className={\"previewHexes\"}\r\n      style={{\r\n        opacity: \"0.5\",\r\n      }}\r\n    >\r\n      {hexPreviews}\r\n    </div>\r\n  );\r\n};\r\n","import { Dispatch, SetStateAction } from \"react\";\r\nimport { PreviewHex } from \"./PreviewHex\";\r\nimport { Hexagon, Hegemon, Insurgent, Game, Config } from \"./types\";\r\n\r\nexport const PreviewHexes = (props: {\r\n  hexes: Hexagon[];\r\n  hegemon: Hexagon;\r\n  hegemons: Hegemon[];\r\n  setHegemons: Dispatch<SetStateAction<Hegemon[]>>;\r\n  selectedHegemonAttack: Hexagon;\r\n  setSelectedHegemonMovement: Dispatch<SetStateAction<Hexagon>>;\r\n  setSelectedHegemonAttack: Dispatch<SetStateAction<Hexagon>>;\r\n  game: Game;\r\n  setGame: Dispatch<SetStateAction<Game>>;\r\n  insurgents: Insurgent[];\r\n  setInsurgents: Dispatch<SetStateAction<Insurgent[]>>;\r\n  config: Config;\r\n  color: string;\r\n}) => {\r\n  const {\r\n    hexes,\r\n    hegemon,\r\n    hegemons,\r\n    setHegemons,\r\n    selectedHegemonAttack,\r\n    setSelectedHegemonMovement,\r\n    setSelectedHegemonAttack,\r\n    game,\r\n    setGame,\r\n    insurgents,\r\n    setInsurgents,\r\n    config,\r\n    color,\r\n  } = props;\r\n  const hexPreviews = hexes.map((hex) => (\r\n    <PreviewHex\r\n      hex={hex}\r\n      hegemon={hegemon}\r\n      hegemons={hegemons}\r\n      setHegemons={setHegemons}\r\n      color={color}\r\n      scale={1}\r\n      selectedHegemonAttack={selectedHegemonAttack}\r\n      setSelectedHegemonMovement={setSelectedHegemonMovement}\r\n      setSelectedHegemonAttack={setSelectedHegemonAttack}\r\n      insurgents={insurgents}\r\n      setInsurgents={setInsurgents}\r\n      game={game}\r\n      setGame={setGame}\r\n      config={config}\r\n      key={hex.id}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        selectedHegemonAttack.col >= 0 ? \"attackHexes\" : \"previewHexes\"\r\n      }\r\n      style={{\r\n        opacity: \"0.7\",\r\n      }}\r\n    >\r\n      {hexPreviews}\r\n    </div>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/step-1.0af06b31.wav\";","import { Dispatch, SetStateAction } from \"react\";\r\nimport { arePointsEqual, isPointOnRails } from \"./Insurgent\";\r\nimport { Config, Game, Hegemon, Insurgent } from \"./types\";\r\n\r\n//@ts-ignore\r\nimport stepLandAudio from \"./sounds/step-1.wav\";\r\n//@ts-ignore\r\nimport roundEndAudio from \"./sounds/beep-1.ogg\";\r\nconst stepLand = new Audio(stepLandAudio);\r\nstepLand.volume = 0.2;\r\nstepLand.preload = \"auto\";\r\nconst roundEnd = new Audio(roundEndAudio);\r\nroundEnd.volume = 0.2;\r\nroundEnd.preload = \"auto\";\r\n\r\nexport const PreviewHeightMove = (props: {\r\n  insurgent: Insurgent;\r\n  hegemons: Hegemon[];\r\n  setHegemons: Dispatch<SetStateAction<Hegemon[]>>;\r\n  game: Game;\r\n  setGame: Dispatch<SetStateAction<Game>>;\r\n  insurgents: Insurgent[];\r\n  setInsurgents: Dispatch<SetStateAction<Insurgent[]>>;\r\n  setSelectedInsurgent: Dispatch<SetStateAction<Insurgent>>;\r\n  config: Config;\r\n}) => {\r\n  const {\r\n    insurgent,\r\n    game,\r\n    setGame,\r\n    insurgents,\r\n    setInsurgents,\r\n    setSelectedInsurgent,\r\n    config,\r\n  } = props;\r\n\r\n  // Difference between insurgent orientation and choice\r\n  // 1 = up, 0 = base, -1 = down\r\n  const orientationToNumber = {\r\n    up: 1,\r\n    base: 0,\r\n    down: -1,\r\n  };\r\n\r\n  const numberToOrientation: Record<string, \"up\" | \"base\" | \"down\"> = {\r\n    \"1\": \"up\",\r\n    \"0\": \"base\",\r\n    \"-1\": \"down\",\r\n  };\r\n\r\n  const moveInsurgentHeight = (\r\n    insurgent: Insurgent,\r\n    insurgents: Insurgent[],\r\n    choice: number\r\n  ) => {\r\n    stepLand.play();\r\n    const newInsurgents: Insurgent[] = JSON.parse(JSON.stringify(insurgents));\r\n    const idx = newInsurgents.findIndex((p) => arePointsEqual(p, insurgent));\r\n\r\n    const delta = Math.abs(orientationToNumber[insurgent.orientation] - choice);\r\n    newInsurgents[idx].moves -= delta;\r\n    newInsurgents[idx].orientation = numberToOrientation[choice.toString()];\r\n\r\n    // If round end\r\n    if (newInsurgents.find((p) => p.moves > 0) === undefined) {\r\n      for (const ins of newInsurgents) {\r\n        ins.attacked = 0;\r\n      }\r\n      for (const ins of newInsurgents) {\r\n        ins.moves = props.config.insurgentMoves;\r\n      }\r\n\r\n      setSelectedInsurgent({\r\n        id: \"\",\r\n        hex1: { id: \"\", col: -1, row: -1 },\r\n        hex2: { id: \"\", col: -1, row: -1 },\r\n        hex3: { id: \"\", col: -1, row: -1 },\r\n        orientation: \"base\",\r\n        willBeAttacked: false,\r\n        attacked: 0,\r\n        moves: 0,\r\n      });\r\n\r\n      const newGame: Game = JSON.parse(JSON.stringify(game));\r\n      newGame.gameplayState = \"insurgentPlace\";\r\n      setGame(newGame);\r\n    }\r\n\r\n    setInsurgents(newInsurgents);\r\n\r\n    // Remove preview if no moves left\r\n    if (newInsurgents[idx].moves < 1) {\r\n      setSelectedInsurgent({\r\n        id: \"\",\r\n        hex1: { id: \"\", col: -1, row: -1 },\r\n        hex2: { id: \"\", col: -1, row: -1 },\r\n        hex3: { id: \"\", col: -1, row: -1 },\r\n        orientation: \"base\",\r\n        willBeAttacked: false,\r\n        attacked: 0,\r\n        moves: 0,\r\n      });\r\n    } else {\r\n      setSelectedInsurgent(newInsurgents[idx]);\r\n    }\r\n  };\r\n\r\n  const canMakeMove = (\r\n    insurgent: Insurgent,\r\n    choice: number,\r\n    board: number[][]\r\n  ) => {\r\n    const delta = Math.abs(orientationToNumber[insurgent.orientation] - choice);\r\n\r\n    if (delta > 0 && delta <= insurgent.moves) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  let top = 0;\r\n  top +=\r\n    (insurgent.hex1.col % 2 === 0 ? 50 : 84.65) + insurgent.hex1.row * 69.3;\r\n  top +=\r\n    (insurgent.hex2.col % 2 === 0 ? 50 : 84.65) + insurgent.hex2.row * 69.3;\r\n  top +=\r\n    (insurgent.hex3.col % 2 === 0 ? 50 : 84.65) + insurgent.hex3.row * 69.3;\r\n  top /= 3;\r\n\r\n  let left = 0;\r\n  left += 14 + insurgent.hex1.col * 60.1;\r\n  left += 14 + insurgent.hex2.col * 60.1;\r\n  left += 14 + insurgent.hex3.col * 60.1;\r\n  left /= 3;\r\n\r\n  const canGoUp = canMakeMove(insurgent, 1, config.board);\r\n  const canGoBase = canMakeMove(insurgent, 0, config.board);\r\n  const canGoDown = canMakeMove(insurgent, -1, config.board);\r\n\r\n  return insurgent.id !== \"\" &&\r\n    insurgent.moves > 0 &&\r\n    !isPointOnRails(insurgent, config.board) ? (\r\n    <div\r\n      style={{\r\n        position: \"absolute\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        backgroundColor: \"rgba(200, 0, 0, 0.8)\",\r\n        left: 39 + left + \"px\",\r\n        top: 7 + top + \"px\",\r\n        padding: \"2px\",\r\n        zIndex: 109,\r\n        transform: \"!important\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          float: \"left\",\r\n          width: 0,\r\n          height: 0,\r\n          borderLeft: \"5px solid transparent\",\r\n          borderRight: \"5px solid transparent\",\r\n          borderBottom: \"8px solid white\",\r\n\r\n          cursor: canGoUp ? \"pointer\" : \"default\",\r\n          opacity: canGoUp ? \"0.8\" : 0,\r\n          zIndex: 99,\r\n        }}\r\n        onClick={() =>\r\n          canGoUp ? moveInsurgentHeight(insurgent, insurgents, 1) : null\r\n        }\r\n      />\r\n      <div\r\n        style={{\r\n          float: \"left\",\r\n          width: \"8px\",\r\n          height: \"8px\",\r\n          borderRadius: \"10px\",\r\n          backgroundColor: \"white\",\r\n          margin: \"4px 0 4px 0\",\r\n\r\n          cursor: canGoBase ? \"pointer\" : \"default\",\r\n          opacity: canGoBase ? \"0.8\" : 0,\r\n          zIndex: 99,\r\n        }}\r\n        onClick={() =>\r\n          canGoBase ? moveInsurgentHeight(insurgent, insurgents, 0) : null\r\n        }\r\n      />\r\n      <div\r\n        style={{\r\n          float: \"left\",\r\n          width: 0,\r\n          height: 0,\r\n          borderLeft: \"5px solid transparent\",\r\n          borderRight: \"5px solid transparent\",\r\n          borderTop: \"8px solid white\",\r\n\r\n          cursor: canGoDown ? \"pointer\" : \"default\",\r\n          opacity: canGoDown ? \"0.8\" : 0,\r\n          zIndex: 99,\r\n        }}\r\n        onClick={() =>\r\n          canGoDown ? moveInsurgentHeight(insurgent, insurgents, -1) : null\r\n        }\r\n      />\r\n    </div>\r\n  ) : null;\r\n};\r\n","export default __webpack_public_path__ + \"static/media/step-2.d0123c87.wav\";","export default __webpack_public_path__ + \"static/media/explosion-truck.f9dfd606.wav\";","import { Dispatch, SetStateAction } from \"react\";\r\nimport {\r\n  arePointsEqual,\r\n  isPointBetweenThreeHegemons,\r\n  isPointOnRails,\r\n} from \"./Insurgent\";\r\nimport { Point, Insurgent, Hegemon, Game, Config } from \"./types\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { areHexesEqual, getHegemonGroup, getHexPoints } from \"./Hegemon\";\r\n\r\n//@ts-ignore\r\nimport stepLandAudio from \"./sounds/step-1.wav\";\r\n//@ts-ignore\r\nimport stepTransportAudio from \"./sounds/step-2.wav\";\r\n//@ts-ignore\r\nimport hegemonDeathAudio from \"./sounds/explosion-truck.wav\";\r\n//@ts-ignore\r\nimport roundEndAudio from \"./sounds/beep-1.ogg\";\r\nconst stepLand = new Audio(stepLandAudio);\r\nstepLand.volume = 0.2;\r\nstepLand.preload = \"auto\";\r\nconst stepTransport = new Audio(stepTransportAudio);\r\nstepTransport.volume = 0.8;\r\nstepTransport.preload = \"auto\";\r\nconst hegemonDeath = new Audio(hegemonDeathAudio);\r\nhegemonDeath.volume = 0.17;\r\nhegemonDeath.preload = \"auto\";\r\nconst roundEnd = new Audio(roundEndAudio);\r\nroundEnd.volume = 0.2;\r\nroundEnd.preload = \"auto\";\r\n\r\nexport const PreviewPoint = (props: {\r\n  point: Point;\r\n  insurgent: Insurgent;\r\n  hegemons: Hegemon[];\r\n  setHegemons: Dispatch<SetStateAction<Hegemon[]>>;\r\n  game: Game;\r\n  setGame: Dispatch<SetStateAction<Game>>;\r\n  insurgents: Insurgent[];\r\n  setInsurgents: Dispatch<SetStateAction<Insurgent[]>>;\r\n  setSelectedInsurgent: Dispatch<SetStateAction<Insurgent>>;\r\n  config: Config;\r\n}) => {\r\n  const {\r\n    point,\r\n    insurgent,\r\n    hegemons,\r\n    setHegemons,\r\n    game,\r\n    setGame,\r\n    insurgents,\r\n    setInsurgents,\r\n    setSelectedInsurgent,\r\n    config,\r\n  } = props;\r\n\r\n  const moveInsurgent = (\r\n    point: Point,\r\n    insurgent: Insurgent,\r\n    insurgents: Insurgent[]\r\n  ) => {\r\n    const newInsurgents: Insurgent[] = JSON.parse(JSON.stringify(insurgents));\r\n    const idx = newInsurgents.findIndex((p) => arePointsEqual(p, insurgent));\r\n    newInsurgents[idx].hex1 = point.hex1;\r\n    newInsurgents[idx].hex2 = point.hex2;\r\n    newInsurgents[idx].hex3 = point.hex3;\r\n\r\n    // Change orientation if on rails\r\n    if (isPointOnRails(point, config.board)) {\r\n      newInsurgents[idx].orientation = \"base\";\r\n      stepTransport.play();\r\n    } else {\r\n      stepLand.play();\r\n    }\r\n\r\n    newInsurgents[idx].moves -= point.distance;\r\n\r\n    // If round end\r\n    if (newInsurgents.find((p) => p.moves > 0) === undefined) {\r\n      for (const ins of newInsurgents) {\r\n        ins.attacked = 0;\r\n      }\r\n      for (const ins of newInsurgents) {\r\n        ins.moves = props.config.insurgentMoves;\r\n      }\r\n\r\n      setSelectedInsurgent({\r\n        id: \"\",\r\n        hex1: { id: \"\", col: -1, row: -1 },\r\n        hex2: { id: \"\", col: -1, row: -1 },\r\n        hex3: { id: \"\", col: -1, row: -1 },\r\n        orientation: \"base\",\r\n        willBeAttacked: false,\r\n        attacked: 0,\r\n        moves: 0,\r\n      });\r\n\r\n      const newGame: Game = JSON.parse(JSON.stringify(game));\r\n      newGame.gameplayState = \"insurgentPlace\";\r\n      setGame(newGame);\r\n    }\r\n\r\n    setInsurgents(newInsurgents);\r\n\r\n    // Remove preview if no moves left\r\n    if (newInsurgents[idx].moves < 1) {\r\n      setSelectedInsurgent({\r\n        id: \"\",\r\n        hex1: { id: \"\", col: -1, row: -1 },\r\n        hex2: { id: \"\", col: -1, row: -1 },\r\n        hex3: { id: \"\", col: -1, row: -1 },\r\n        orientation: \"base\",\r\n        willBeAttacked: false,\r\n        attacked: 0,\r\n        moves: 0,\r\n      });\r\n    } else {\r\n      setSelectedInsurgent(newInsurgents[idx]);\r\n    }\r\n  };\r\n\r\n  const placeInsurgent = (\r\n    point: Point,\r\n    insurgents: Insurgent[],\r\n    hegemons: Hegemon[]\r\n  ) => {\r\n    const insurgent: Insurgent = {\r\n      id: uuidv4(),\r\n      hex1: JSON.parse(JSON.stringify(point.hex1)),\r\n      hex2: JSON.parse(JSON.stringify(point.hex2)),\r\n      hex3: JSON.parse(JSON.stringify(point.hex3)),\r\n      orientation: \"base\",\r\n      willBeAttacked: false,\r\n      attacked: 0,\r\n      moves: config.insurgentMoves,\r\n    };\r\n    // Change orientation if on rails\r\n    if (isPointOnRails(point, config.board)) {\r\n      stepTransport.play();\r\n    } else {\r\n      stepLand.play();\r\n    }\r\n\r\n    const newInsurgents: Insurgent[] = JSON.parse(JSON.stringify(insurgents));\r\n    newInsurgents.push(insurgent);\r\n    setInsurgents(newInsurgents);\r\n\r\n    const newGame: Game = JSON.parse(JSON.stringify(game));\r\n    if (game.gameplayState === \"insurgentStart\") {\r\n      if (newInsurgents.length >= config.startInsurgents) {\r\n        roundEnd.play();\r\n        newGame.gameplayState = \"hegemonStart\";\r\n        setGame(newGame);\r\n      }\r\n    } else if (game.gameplayState === \"insurgentPlace\") {\r\n      // Check if a hegemon died\r\n      // SIMPLE implementation, checking each of them individually\r\n      const toDelete: Hegemon[] = [];\r\n\r\n      // Correct implementation would be\r\n      // for each hegemon, compute its adjacent hegemon group\r\n      // for the respective group, compute its adjacent points\r\n      // by computing the set of adjacent points of each hex, minus\r\n      // the ones which are determined by 3 hegemon hexes\r\n      // the resulting adjacent points are the contour\r\n      for (const heg of hegemons) {\r\n        const group: Hegemon[] = getHegemonGroup(\r\n          heg,\r\n          hegemons,\r\n          [],\r\n          config.board\r\n        );\r\n\r\n        const points: Point[] = [];\r\n        for (const h of group) {\r\n          const hPoints: Point[] = getHexPoints(h);\r\n\r\n          for (const hPoint of hPoints) {\r\n            let exists = false;\r\n            for (const point of points) {\r\n              if (arePointsEqual(hPoint, point)) {\r\n                exists = true;\r\n                break;\r\n              }\r\n            }\r\n            if (!exists) {\r\n              if (!isPointBetweenThreeHegemons(hPoint, hegemons)) {\r\n                points.push(hPoint);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        let markGroupForDeletion = true;\r\n        for (const point of points) {\r\n          let exists = false;\r\n          for (const ins of newInsurgents) {\r\n            if (arePointsEqual(ins, point)) {\r\n              exists = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!exists) {\r\n            markGroupForDeletion = false;\r\n          }\r\n        }\r\n        if (markGroupForDeletion) {\r\n          for (const heg of group) {\r\n            let exists = false;\r\n            for (const h of toDelete) {\r\n              if (areHexesEqual(h, heg)) {\r\n                exists = true;\r\n                break;\r\n              }\r\n            }\r\n            if (!exists) {\r\n              toDelete.push(heg);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      hegemons = hegemons.filter((heg) => !toDelete.includes(heg));\r\n      let newHegemons: Hegemon[] = JSON.parse(JSON.stringify(hegemons));\r\n      setHegemons(newHegemons);\r\n\r\n      setSelectedInsurgent({\r\n        id: \"\",\r\n        hex1: { id: \"\", col: -1, row: -1 },\r\n        hex2: { id: \"\", col: -1, row: -1 },\r\n        hex3: { id: \"\", col: -1, row: -1 },\r\n        orientation: \"base\",\r\n        willBeAttacked: false,\r\n        attacked: 0,\r\n        moves: 0,\r\n      });\r\n\r\n      // Play the sounds\r\n      if (toDelete.length > 0) {\r\n        hegemonDeath.play();\r\n      }\r\n      roundEnd.play();\r\n\r\n      // Set the game state\r\n      newGame.deadHegemons = game.deadHegemons + toDelete.length;\r\n\r\n      if (newGame.deadHegemons >= config.hegemonsToDie) {\r\n        newGame.gameplayState = \"insurgentWin\";\r\n      } else {\r\n        newGame.gameplayState = \"hegemonMove\";\r\n      }\r\n      setGame(newGame);\r\n    }\r\n  };\r\n\r\n  let top = 0;\r\n  top += (point.hex1.col % 2 === 0 ? 50 : 84.65) + point.hex1.row * 69.3;\r\n  top += (point.hex2.col % 2 === 0 ? 50 : 84.65) + point.hex2.row * 69.3;\r\n  top += (point.hex3.col % 2 === 0 ? 50 : 84.65) + point.hex3.row * 69.3;\r\n  top /= 3;\r\n\r\n  let left = 0;\r\n  left += 14 + point.hex1.col * 60.1;\r\n  left += 14 + point.hex2.col * 60.1;\r\n  left += 14 + point.hex3.col * 60.1;\r\n  left /= 3;\r\n  const avgRow = Math.round(\r\n    (point.hex1.row + point.hex2.row + point.hex3.row) / 3\r\n  );\r\n  return (\r\n    <div\r\n      className=\"previewPoint\"\r\n      style={{\r\n        width: \"10px\",\r\n        height: \"10px\",\r\n        position: \"absolute\",\r\n        borderRadius: \"10px\",\r\n        borderStyle: \"solid\",\r\n        borderColor: \"#e64e4e\",\r\n        backgroundColor: \"#e64e4e\",\r\n        opacity: \"0.6\",\r\n        cursor: \"pointer\",\r\n        zIndex: 100,\r\n        left: avgRow % 2 === 0 ? 19 + left + \"px\" : 19 + left + \"px\",\r\n        top: 17 + top + \"px\",\r\n      }}\r\n      onClick={() =>\r\n        game.gameplayState === \"insurgentMove\"\r\n          ? moveInsurgent(point, insurgent, insurgents)\r\n          : placeInsurgent(point, insurgents, hegemons)\r\n      }\r\n    />\r\n  );\r\n};\r\n","import React, { Dispatch, SetStateAction } from \"react\";\r\nimport { PreviewHeightMove } from \"./PreviewHeightMove\";\r\nimport { PreviewPoint } from \"./PreviewPoint\";\r\nimport { Point, Insurgent, Hegemon, Game, Config } from \"./types\";\r\n\r\nexport const PreviewInsurgentMovement = (props: {\r\n  points: Point[];\r\n  insurgent: Insurgent;\r\n  hegemons: Hegemon[];\r\n  setHegemons: Dispatch<SetStateAction<Hegemon[]>>;\r\n  game: Game;\r\n  setGame: Dispatch<SetStateAction<Game>>;\r\n  insurgents: Insurgent[];\r\n  setInsurgents: Dispatch<SetStateAction<Insurgent[]>>;\r\n  setSelectedInsurgent: Dispatch<SetStateAction<Insurgent>>;\r\n  config: Config;\r\n}) => {\r\n  const {\r\n    points,\r\n    insurgent,\r\n    hegemons,\r\n    setHegemons,\r\n    game,\r\n    setGame,\r\n    insurgents,\r\n    setInsurgents,\r\n    setSelectedInsurgent,\r\n    config,\r\n  } = props;\r\n  const pointPreviews = points.map((point) => (\r\n    <PreviewPoint\r\n      point={point}\r\n      insurgent={insurgent}\r\n      hegemons={hegemons}\r\n      setHegemons={setHegemons}\r\n      insurgents={insurgents}\r\n      setInsurgents={setInsurgents}\r\n      game={game}\r\n      setGame={setGame}\r\n      setSelectedInsurgent={setSelectedInsurgent}\r\n      config={config}\r\n      key={point.id}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      <PreviewHeightMove\r\n        insurgent={insurgent}\r\n        hegemons={hegemons}\r\n        setHegemons={setHegemons}\r\n        insurgents={insurgents}\r\n        setInsurgents={setInsurgents}\r\n        game={game}\r\n        setGame={setGame}\r\n        setSelectedInsurgent={setSelectedInsurgent}\r\n        config={config}\r\n      />\r\n      {pointPreviews}\r\n    </div>\r\n  );\r\n};\r\n","import { Dispatch, SetStateAction } from \"react\";\r\nimport { Point, Game, Insurgent, Config, Hegemon } from \"./types\";\r\nimport { PreviewPoint } from \"./PreviewPoint\";\r\n\r\nexport const PreviewInsurgentPlacement = (props: {\r\n  points: Point[];\r\n  insurgents: Insurgent[];\r\n  setInsurgents: Dispatch<SetStateAction<Insurgent[]>>;\r\n  hegemons: Hegemon[];\r\n  setHegemons: Dispatch<SetStateAction<Hegemon[]>>;\r\n  game: Game;\r\n  setGame: Dispatch<SetStateAction<Game>>;\r\n  setSelectedInsurgent: Dispatch<SetStateAction<Insurgent>>;\r\n  config: Config;\r\n}) => {\r\n  const {\r\n    points,\r\n    insurgents,\r\n    setInsurgents,\r\n    hegemons,\r\n    setHegemons,\r\n    game,\r\n    setGame,\r\n    setSelectedInsurgent,\r\n    config,\r\n  } = props;\r\n\r\n  const pointPreviews = points.map((point) => {\r\n    return (\r\n      <PreviewPoint\r\n        point={point}\r\n        // @ts-ignore\r\n        insurgent={null}\r\n        hegemons={hegemons}\r\n        setHegemons={setHegemons}\r\n        insurgents={insurgents}\r\n        setInsurgents={setInsurgents}\r\n        game={game}\r\n        setGame={setGame}\r\n        setSelectedInsurgent={setSelectedInsurgent}\r\n        config={config}\r\n        key={point.id}\r\n      />\r\n    );\r\n  });\r\n\r\n  return <div>{pointPreviews}</div>;\r\n};\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nexport const InfoGameplay = () => {\r\n  return (\r\n    <div>\r\n      The Game of Metropolitical War emulates hybrid and asymmetric warfare in a\r\n      densely populated built-up city of packed vertical slums, Plan Voisin\r\n      corporate centers, 5G lights-out factories and chip production households.\r\n      It places the agile swarms of{\" \"}\r\n      <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n        Insurgents\r\n      </mark>{\" \"}\r\n      against the highly-centralized, elephantine{\" \"}\r\n      <mark className=\"glowWhite\" id=\"markHegemon\">\r\n        Hegemon\r\n      </mark>{\" \"}\r\n      <br />\r\n      <h2>Hex Types</h2>The map is composed of four different types of hexes:\r\n      <br />\r\n      <div className=\"hexDescription\">\r\n        <img\r\n          className=\"hexImage\"\r\n          src={process.env.PUBLIC_URL + \"/images/hex-land.png\"}\r\n        ></img>\r\n        <p>\r\n          <b>Land</b> hex, accessible to the{\" \"}\r\n          <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n            Insurgents\r\n          </mark>{\" \"}\r\n          and the{\" \"}\r\n          <mark className=\"glowWhite\" id=\"markHegemon\">\r\n            Hegemon.\r\n          </mark>{\" \"}\r\n          It represents the built environment: tower blocks, underground tunnel\r\n          networks, skywalks and alleyways. It offers the possibility of\r\n          vertical movement for the{\" \"}\r\n          <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n            Insurgents.\r\n          </mark>\r\n        </p>\r\n      </div>\r\n      <div className=\"hexDescription\">\r\n        <img className=\"hexImage\" src=\"images/hex-water.png\"></img>\r\n        <p>\r\n          <b>Water</b> hex, spanning rivers, artifcial seas, gulfs, accumulation\r\n          lakes and canals. Accessible only to the{\" \"}\r\n          <mark className=\"glowWhite\" id=\"markHegemon\">\r\n            Hegemon\r\n          </mark>{\" \"}\r\n          thanks to its naval superiority.\r\n        </p>\r\n      </div>\r\n      <div className=\"hexDescription\">\r\n        <img className=\"hexImage\" src=\"images/hex-transport.png\"></img>\r\n        <p>\r\n          <b>Transport</b> hex, representing bustling boulevards, highways,\r\n          subway lines and viaducts. Due to the high civilian numbers, it is\r\n          only accessible to the{\" \"}\r\n          <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n            Insurgents\r\n          </mark>{\" \"}\r\n          and vertical movement is inhibited.\r\n        </p>\r\n      </div>\r\n      <div className=\"hexDescription\">\r\n        <img className=\"hexImage\" src=\"images/hex-bridge.png\"></img>\r\n        <p>\r\n          <b>Bridge</b> hex, which is a combined <b>Water</b> and{\" \"}\r\n          <b>Transport</b> space. Accesible to both the{\" \"}\r\n          <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n            Insurgents\r\n          </mark>{\" \"}\r\n          and the{\" \"}\r\n          <mark className=\"glowWhite\" id=\"markHegemon\">\r\n            Hegemon.\r\n          </mark>{\" \"}\r\n        </p>\r\n      </div>\r\n      <h2>Movement & Attack</h2>\r\n      The{\" \"}\r\n      <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n        Insurgents\r\n      </mark>{\" \"}\r\n      play \"Go\" by moving onto the vertices, while the{\" \"}\r\n      <mark className=\"glowWhite\" id=\"markHegemon\">\r\n        Hegemon\r\n      </mark>{\" \"}\r\n      plays \"Chess\" by moving on the hexes. Insurgents have three moves, which\r\n      can be spent by either going\r\n      <div id=\"generalMovement\">\r\n        <div className=\"generalMovementExample\">\r\n          <img\r\n            className=\"generalMovementImage\"\r\n            src=\"images/insurgent-movement.png\"\r\n          ></img>\r\n          Insurgent Movement\r\n        </div>\r\n        <div className=\"generalMovementExample\">\r\n          <img\r\n            className=\"generalMovementImage\"\r\n            src=\"/images/hegemon-movement.png\"\r\n          ></img>\r\n          Hegemon Movement\r\n        </div>\r\n      </div>\r\n      <h2>Starting Up</h2>\r\n      The{\" \"}\r\n      <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n        Insurgents\r\n      </mark>{\" \"}\r\n      start by placing 4 pieces on the board. Each piece must be in a 3-vertex\r\n      range from any other one.\r\n    </div>\r\n  );\r\n};\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nexport const InfoIntelligence = (props: { city: string }) => {\r\n  const { city } = props;\r\n  switch (city) {\r\n    case \"NEW YORK CITY\":\r\n      return (\r\n        <div>\r\n          NYC has swelled to over 50,000 people per km<sup>2</sup>, a swarming\r\n          megacity of 40 million. It's been 18 months since the NY Energy Dpt.\r\n          switched its production to petrol by redeploying oil pumps, following\r\n          a highly coordinated{\" \"}\r\n          <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n            Insurgent\r\n          </mark>{\" \"}\r\n          attack that has destroyed a large part of their dams. The inland sea\r\n          spanning the South-Western part of the state has flooded the adjacent\r\n          municipalities, pushing refugees every day into the crowded complexes.\r\n          <img\r\n            className=\"textImage\"\r\n            src=\"images/visuals/oil-drills-2.jpg\"\r\n          ></img>\r\n          In 2032, the metropolitan area zoning commitee banned the existence of\r\n          buildings smaller than 150ft, citing density concerns. By 2037, all\r\n          individual households have been razed and replaced with hyper-dense\r\n          towers, pierced by high-speed rail viaducts.\r\n          <img className=\"textImage\" src=\"images/visuals/chongqing-3.jpg\"></img>\r\n          The{\" \"}\r\n          <mark className=\"glowWhite\" id=\"markHegemon\">\r\n            Hegemon\r\n          </mark>{\" \"}\r\n          manages a slow but powerful city-state power on a continuous mission\r\n          of pacifying the 'feral' city that grew out of hand. It has already\r\n          re-established its control over the municipal waters, after the highly\r\n          destructive offshore rig terrorist attack proved its weakness.\r\n          <img className=\"textImage\" src=\"images/visuals/offshore-2.png\"></img>\r\n        </div>\r\n      );\r\n    default:\r\n      return <div></div>;\r\n  }\r\n};\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nexport const InfoWinning = () => {\r\n  return (\r\n    <div>\r\n      The{\" \"}\r\n      <mark className=\"glowWhite\" id=\"markHegemon\">\r\n        Hegemon\r\n      </mark>{\" \"}\r\n      <i>breaks the back</i> of the local insurrection by killing at least{\" \"}\r\n      <b>20</b> Insurgents.\r\n      <br />\r\n      <br />\r\n      The{\" \"}\r\n      <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n        Insurgents\r\n      </mark>{\" \"}\r\n      <i>topple the regime</i> by eliminating <b>all</b> Hegemon forces.\r\n      <img className=\"textImage\" src=\"images/visuals/sarajevo-1.jpg\"></img>\r\n      <img className=\"textImage\" src=\"images/visuals/russia-1.jpg\"></img>\r\n    </div>\r\n  );\r\n};\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nexport const InfoHegemon = () => {\r\n  return (\r\n    <div>\r\n      The Hegemon is built up around ISR values (Intelligence, Surveillance and\r\n      Reconnaissance)\r\n      <img src=\"images/3d/hegemon-3d-2.gif\"></img>\r\n      <h2></h2>\r\n    </div>\r\n  );\r\n};\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nexport const InfoInsurgents = () => {\r\n  return (\r\n    <div>\r\n      Each{\" \"}\r\n      <mark className=\"glowOrange\" id=\"markInsurgent\">\r\n        Insurgent\r\n      </mark>{\" \"}\r\n      can move vertically on vertices determined by <b>Land</b> hexes. Vertical\r\n      movement is inhibited if the vertex intersects a <b>Transport</b> or{\" \"}\r\n      <b>Bridge</b> hex. However, it is allowed for <b>Water</b>-adjacent\r\n      vertices if they also interesect the <b>Land</b>. Moving up or down\r\n      vertically counts as one move.\r\n      <div id=\"insurgentVerticalMovement\">\r\n        <div className=\"insurgentVerticalExample\">\r\n          <img\r\n            className=\"insurgentVerticalImage\"\r\n            src=\"images/3d/insurgent-3-3d.gif\"\r\n          ></img>\r\n          <p>Below, through tunnels</p>\r\n        </div>\r\n        <div className=\"insurgentVerticalExample\">\r\n          <img\r\n            className=\"insurgentVerticalImage\"\r\n            src=\"images/3d/insurgent-1-3d.gif\"\r\n          ></img>\r\n          <p>Ground Level</p>\r\n        </div>\r\n        <div className=\"insurgentVerticalExample\">\r\n          <img\r\n            className=\"insurgentVerticalImage\"\r\n            src=\"images/3d/insurgent-2-3d.gif\"\r\n          ></img>\r\n          <p>Above, inside buildings</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/interface-chirp-open.43a7be55.wav\";","export default __webpack_public_path__ + \"static/media/interface-chirp-close.12247bdc.wav\";","export default __webpack_public_path__ + \"static/media/click-1.9c59379a.wav\";","export default __webpack_public_path__ + \"static/media/click-2.91940e3f.wav\";","export default __webpack_public_path__ + \"static/media/street.97a9b371.mp3\";","export default __webpack_public_path__ + \"static/media/click-3.026622a2.wav\";","export default __webpack_public_path__ + \"static/media/click-4.40e61f3c.wav\";","export default __webpack_public_path__ + \"static/media/click-5.7b7921e7.wav\";","/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { MouseEvent, useState } from \"react\";\r\nimport { areHexesEqual, getAllHegemonPlaces, getHexNeighbors } from \"./Hegemon\";\r\nimport {\r\n  arePointsEqual,\r\n  getAllInsurgentsNeighbors,\r\n  getInsurgentNeighbors,\r\n  isInsurgentAdjacentToHex,\r\n} from \"./Insurgent\";\r\nimport { PreviewHegemonPlacement } from \"./PreviewHegemonPlacement\";\r\nimport { PreviewHexes } from \"./PreviewHexes\";\r\nimport { PreviewInsurgentMovement } from \"./PreviewInsurgentMovement\";\r\nimport { PreviewInsurgentPlacement } from \"./PreviewInsurgentPlacement\";\r\nimport { Hegemon, Insurgent, Hexagon, Game, Config } from \"./types\";\r\n\r\nimport { InfoGameplay } from \"./info-content/InfoGameplay\";\r\n\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { InfoIntelligence } from \"./info-content/InfoIntelligence\";\r\nimport { InfoWinning } from \"./info-content/InfoWinning\";\r\nimport { InfoHegemon } from \"./info-content/InfoHegemon\";\r\nimport { InfoInsurgents } from \"./info-content/InfoInsurgents\";\r\n\r\n//@ts-ignore\r\nimport interfaceOpenAudio from \"./sounds/interface-chirp-open.wav\";\r\n//@ts-ignore\r\nimport interfaceCloseAudio from \"./sounds/interface-chirp-close.wav\";\r\n//@ts-ignore\r\nimport clickInfoMenuAudio from \"./sounds/click-1.wav\";\r\n//@ts-ignore\r\nimport clickButtonAudio from \"./sounds/click-2.wav\";\r\n//@ts-ignore\r\nimport roundEndAudio from \"./sounds/beep-1.ogg\";\r\n//@ts-ignore\r\nimport streetAmbienceAudio from \"./sounds/street.mp3\";\r\n//@ts-ignore\r\nimport clickInsurgentAudio from \"./sounds/click-3.wav\";\r\n//@ts-ignore\r\nimport clickHegemonMoveAudio from \"./sounds/click-4.wav\";\r\n//@ts-ignore\r\nimport clickHegemonAttackAudio from \"./sounds/click-5.wav\";\r\nconst interfaceOpen = new Audio(interfaceOpenAudio);\r\ninterfaceOpen.volume = 0.2;\r\ninterfaceOpen.preload = \"auto\";\r\nconst interfaceClose = new Audio(interfaceCloseAudio);\r\ninterfaceClose.volume = 0.2;\r\ninterfaceClose.preload = \"auto\";\r\nconst clickInfoMenu = new Audio(clickInfoMenuAudio);\r\nclickInfoMenu.volume = 0.1;\r\nclickInfoMenu.preload = \"auto\";\r\nconst clickButton = new Audio(clickButtonAudio);\r\nclickButton.volume = 0.1;\r\nclickButton.preload = \"auto\";\r\nconst roundEnd = new Audio(roundEndAudio);\r\nroundEnd.volume = 0.2;\r\nroundEnd.preload = \"auto\";\r\nconst streetAmbience = new Audio(streetAmbienceAudio);\r\nstreetAmbience.volume = 0.25;\r\nstreetAmbience.preload = \"auto\";\r\nstreetAmbience.loop = true;\r\nconst clickInsurgent = new Audio(clickInsurgentAudio);\r\nclickInsurgent.volume = 0.2;\r\nclickInsurgent.preload = \"auto\";\r\nconst clickHegemonMove = new Audio(clickHegemonMoveAudio);\r\nclickHegemonMove.volume = 0.1;\r\nclickHegemonMove.preload = \"auto\";\r\nconst clickHegemonAttack = new Audio(clickHegemonAttackAudio);\r\nclickHegemonAttack.volume = 0.1;\r\nclickHegemonAttack.preload = \"auto\";\r\n\r\nexport const Board = (props: {\r\n  hegemons: Hegemon[];\r\n  insurgents: Insurgent[];\r\n  game: Game;\r\n  config: Config;\r\n}) => {\r\n  const emptyInsurgent: Insurgent = {\r\n    id: \"\",\r\n    hex1: { id: \"\", col: -1, row: -1 },\r\n    hex2: { id: \"\", col: -1, row: -1 },\r\n    hex3: { id: \"\", col: -1, row: -1 },\r\n    orientation: \"base\",\r\n    willBeAttacked: false,\r\n    attacked: 0,\r\n    moves: 0,\r\n  };\r\n\r\n  const [hegemons, setHegemons] = useState(props.hegemons);\r\n  const [insurgents, setInsurgents] = useState(props.insurgents);\r\n  const [game, setGame] = useState<Game>(props.game);\r\n  const [infoMenu, setInfoMenu] = useState<\r\n    \"intelligence\" | \"gameplay\" | \"hegemon\" | \"insurgents\" | \"winning\"\r\n  >(\"intelligence\");\r\n  const [\r\n    selectedHegemonMovement,\r\n    setSelectedHegemonMovement,\r\n  ] = useState<Hexagon>({\r\n    id: \"\",\r\n    col: -1,\r\n    row: -1,\r\n  });\r\n  const [selectedHegemonAttack, setSelectedHegemonAttack] = useState<Hexagon>({\r\n    id: \"\",\r\n    col: -2,\r\n    row: -2,\r\n  });\r\n  const [selectedInsurgent, setSelectedInsurgent] = useState<Insurgent>(\r\n    emptyInsurgent\r\n  );\r\n\r\n  const infoMenuToComponent = {\r\n    intelligence: <InfoIntelligence city={props.config.title} />,\r\n    gameplay: <InfoGameplay />,\r\n    hegemon: <InfoHegemon />,\r\n    insurgents: <InfoInsurgents />,\r\n    winning: <InfoWinning />,\r\n  };\r\n\r\n  const showHegemonMovement = (e: MouseEvent, hegemon: Hegemon) => {\r\n    e.preventDefault();\r\n    if (game.gameplayState === \"hegemonMove\" && hegemon.moves > 0) {\r\n      clickHegemonMove.play();\r\n      if (areHexesEqual(hegemon, selectedHegemonMovement)) {\r\n        setSelectedHegemonMovement({\r\n          id: \"\",\r\n          col: -1,\r\n          row: -1,\r\n        });\r\n      } else {\r\n        setSelectedHegemonMovement(hegemon);\r\n        setSelectedHegemonAttack({\r\n          id: \"\",\r\n          col: -2,\r\n          row: -2,\r\n        });\r\n        const newInsurgents: Insurgent[] = JSON.parse(\r\n          JSON.stringify(insurgents)\r\n        );\r\n        for (let idx = 0; idx < newInsurgents.length; idx++) {\r\n          newInsurgents[idx].willBeAttacked = false;\r\n        }\r\n        setInsurgents(newInsurgents);\r\n      }\r\n    }\r\n  };\r\n\r\n  const showHegemonAttack = (e: MouseEvent, hegemon: Hegemon) => {\r\n    e.preventDefault();\r\n    if (game.gameplayState === \"hegemonMove\" && hegemon.moves > 0) {\r\n      clickHegemonAttack.play();\r\n      if (areHexesEqual(hegemon, selectedHegemonAttack)) {\r\n        setSelectedHegemonAttack({\r\n          id: \"\",\r\n          col: -2,\r\n          row: -2,\r\n        });\r\n\r\n        const newInsurgents: Insurgent[] = JSON.parse(\r\n          JSON.stringify(insurgents)\r\n        );\r\n        for (let idx = 0; idx < newInsurgents.length; idx++) {\r\n          newInsurgents[idx].willBeAttacked = false;\r\n        }\r\n        setInsurgents(newInsurgents);\r\n      } else {\r\n        setSelectedHegemonAttack(hegemon);\r\n        setSelectedHegemonMovement({\r\n          id: \"\",\r\n          col: -1,\r\n          row: -1,\r\n        });\r\n        const newInsurgents: Insurgent[] = JSON.parse(\r\n          JSON.stringify(insurgents)\r\n        );\r\n        for (const insurgent of insurgents) {\r\n          let isInRange = false;\r\n\r\n          const neighbors: Hegemon[] = getHexNeighbors(\r\n            hegemon,\r\n            hegemons,\r\n            props.config.board,\r\n            false\r\n          );\r\n          neighbors.push(hegemon);\r\n          for (const neighbor of neighbors) {\r\n            if (isInsurgentAdjacentToHex(insurgent, neighbor)) {\r\n              isInRange = true;\r\n            }\r\n          }\r\n\r\n          if (isInRange) {\r\n            const idx = insurgents.indexOf(insurgent);\r\n            newInsurgents[idx].willBeAttacked = true;\r\n          }\r\n        }\r\n\r\n        setInsurgents(newInsurgents);\r\n      }\r\n    }\r\n  };\r\n\r\n  const showInsurgentMovement = (insurgent: Insurgent) => {\r\n    if (game.gameplayState === \"insurgentMove\" && insurgent.moves > 0) {\r\n      clickInsurgent.play();\r\n      if (arePointsEqual(insurgent, selectedInsurgent)) {\r\n        setSelectedInsurgent(emptyInsurgent);\r\n      } else {\r\n        setSelectedInsurgent(insurgent);\r\n      }\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    clickButton.play();\r\n    streetAmbience.play();\r\n\r\n    closeInfo();\r\n\r\n    const newGame: Game = JSON.parse(JSON.stringify(game));\r\n    newGame.gameplayState = \"insurgentStart\";\r\n    setGame(newGame);\r\n  };\r\n\r\n  const closeInfo = () => {\r\n    const info = document.getElementById(\"info\")!;\r\n    const body = document.getElementsByTagName(\"body\")![0];\r\n\r\n    if (info.style.display !== \"none\") {\r\n      interfaceClose.play();\r\n\r\n      setInfoMenu(\"intelligence\");\r\n\r\n      document.getElementById(\"intelligenceButton\")!.style.borderBottom =\r\n        \"2px solid white\";\r\n      document.getElementById(\"gameplayButton\")!.style.borderBottom =\r\n        \"transparent\";\r\n      document.getElementById(\"hegemonButton\")!.style.borderBottom =\r\n        \"transparent\";\r\n      document.getElementById(\"insurgentsButton\")!.style.borderBottom =\r\n        \"transparent\";\r\n      document.getElementById(\"winningButton\")!.style.borderBottom =\r\n        \"transparent\";\r\n    }\r\n    info.style.display = \"none\";\r\n    body.style.overflow = \"auto\";\r\n  };\r\n\r\n  const openInfo = () => {\r\n    interfaceOpen.play();\r\n    const info = document.getElementById(\"info\")!;\r\n    const body = document.getElementsByTagName(\"body\")![0];\r\n\r\n    if (info.style.display === \"flex\") {\r\n      info.style.display = \"none\";\r\n    } else {\r\n      info.style.display = \"flex\";\r\n      body.style.overflow = \"hidden\";\r\n      info.focus();\r\n    }\r\n  };\r\n\r\n  const changeInfoMenu = (\r\n    menu: \"intelligence\" | \"gameplay\" | \"hegemon\" | \"insurgents\" | \"winning\"\r\n  ) => {\r\n    setInfoMenu(menu);\r\n    clickInfoMenu.play();\r\n\r\n    const info = document.getElementById(\"info\")!;\r\n    const oldScrollValue = info.scrollTop;\r\n    document.getElementById(\"infoContentContainer\")!.scrollIntoView();\r\n    info.scrollTop -= 30;\r\n\r\n    if (info.scrollTop > oldScrollValue) {\r\n      info.scrollTop = oldScrollValue;\r\n    }\r\n\r\n    document.getElementById(\"intelligenceButton\")!.style.borderBottom =\r\n      \"transparent\";\r\n    document.getElementById(\"gameplayButton\")!.style.borderBottom =\r\n      \"transparent\";\r\n    document.getElementById(\"hegemonButton\")!.style.borderBottom =\r\n      \"transparent\";\r\n    document.getElementById(\"insurgentsButton\")!.style.borderBottom =\r\n      \"transparent\";\r\n    document.getElementById(\"winningButton\")!.style.borderBottom =\r\n      \"transparent\";\r\n    document.getElementById(menu + \"Button\")!.style.borderBottom =\r\n      \"2px solid white\";\r\n  };\r\n\r\n  const changeWhoMoves = () => {\r\n    if (game.gameplayState === \"insurgentMove\") {\r\n      clickButton.play();\r\n      endInsurgentsRound();\r\n      const newGame: Game = JSON.parse(JSON.stringify(game));\r\n      newGame.gameplayState = \"insurgentPlace\";\r\n      setGame(newGame);\r\n    } else if (game.gameplayState === \"hegemonMove\") {\r\n      roundEnd.play();\r\n      endHegemonRound();\r\n      const newGame: Game = JSON.parse(JSON.stringify(game));\r\n      newGame.gameplayState = \"insurgentMove\";\r\n      setGame(newGame);\r\n    }\r\n  };\r\n\r\n  const endInsurgentsRound = () => {\r\n    const newInsurgents: Insurgent[] = JSON.parse(JSON.stringify(insurgents));\r\n    for (const ins of newInsurgents) {\r\n      ins.attacked = 0;\r\n    }\r\n    for (const ins of newInsurgents) {\r\n      ins.moves = props.config.insurgentMoves;\r\n    }\r\n    setInsurgents(newInsurgents);\r\n\r\n    setSelectedInsurgent(emptyInsurgent);\r\n  };\r\n\r\n  const endHegemonRound = () => {\r\n    const newHegemons: Hegemon[] = JSON.parse(JSON.stringify(hegemons));\r\n    for (const heg of newHegemons) {\r\n      heg.moves = props.config.hegemonMoves;\r\n    }\r\n    setHegemons(newHegemons);\r\n\r\n    setSelectedHegemonMovement({\r\n      id: \"\",\r\n      col: -1,\r\n      row: -1,\r\n    });\r\n    setSelectedHegemonAttack({\r\n      id: \"\",\r\n      col: -2,\r\n      row: -2,\r\n    });\r\n  };\r\n\r\n  // useEffect(() => {}, [hegemons]);\r\n\r\n  const hegemonPieces = hegemons.map((hegemon, index) => {\r\n    const topExtra = 65;\r\n    return (\r\n      <img\r\n        src=\"images/hegemon-3d-blue.png\"\r\n        key={hegemon.id}\r\n        className={\r\n          hegemon.moves > 0 && game.gameplayState === \"hegemonMove\"\r\n            ? \"hegemonPiece\"\r\n            : \"hegemonPieceUnmovable\"\r\n        }\r\n        style={{\r\n          position: \"absolute\",\r\n          left:\r\n            areHexesEqual(hegemon, selectedHegemonMovement) ||\r\n            areHexesEqual(hegemon, selectedHegemonAttack)\r\n              ? 17 + hegemon.col * 60.1 + \"px\"\r\n              : 15 + hegemon.col * 60.1 + \"px\",\r\n          top:\r\n            hegemon.col % 2 === 0\r\n              ? areHexesEqual(hegemon, selectedHegemonMovement) ||\r\n                areHexesEqual(hegemon, selectedHegemonAttack)\r\n                ? topExtra - 27 + hegemon.row * 69.3 + \"px\"\r\n                : topExtra - 32 + hegemon.row * 69.3 + \"px\"\r\n              : areHexesEqual(hegemon, selectedHegemonMovement) ||\r\n                areHexesEqual(hegemon, selectedHegemonAttack)\r\n              ? topExtra + 5 + hegemon.row * 69.3 + \"px\"\r\n              : topExtra + hegemon.row * 69.3 + \"px\",\r\n          width:\r\n            areHexesEqual(hegemon, selectedHegemonMovement) ||\r\n            areHexesEqual(hegemon, selectedHegemonAttack)\r\n              ? \"45px\"\r\n              : \"50px\",\r\n          zIndex:\r\n            game.gameplayState === \"hegemonMove\" ||\r\n            game.gameplayState === \"hegemonStart\"\r\n              ? 100\r\n              : 99,\r\n          cursor:\r\n            game.gameplayState !== \"hegemonMove\"\r\n              ? \"default\"\r\n              : hegemon.moves > 0\r\n              ? \"pointer\"\r\n              : 'url(\"images/x-cursor.png\"), auto',\r\n          opacity:\r\n            areHexesEqual(hegemon, selectedHegemonMovement) ||\r\n            areHexesEqual(hegemon, selectedHegemonAttack)\r\n              ? 0.8\r\n              : 1,\r\n        }}\r\n        onClick={(e) => showHegemonMovement(e, hegemon)}\r\n        onContextMenu={(e) => showHegemonAttack(e, hegemon)}\r\n      />\r\n    );\r\n  });\r\n\r\n  const insurgentPieces = insurgents.map((insurgent, index) => {\r\n    let top = 0;\r\n    top +=\r\n      (insurgent.hex1.col % 2 === 0 ? 50 : 84.65) + insurgent.hex1.row * 69.3;\r\n    top +=\r\n      (insurgent.hex2.col % 2 === 0 ? 50 : 84.65) + insurgent.hex2.row * 69.3;\r\n    top +=\r\n      (insurgent.hex3.col % 2 === 0 ? 50 : 84.65) + insurgent.hex3.row * 69.3;\r\n    top /= 3;\r\n\r\n    let left = 0;\r\n    left += 14 + insurgent.hex1.col * 60.1;\r\n    left += 14 + insurgent.hex2.col * 60.1;\r\n    left += 14 + insurgent.hex3.col * 60.1;\r\n    left /= 3;\r\n\r\n    // const avgCol = Math.round(\r\n    //   (insurgent.hex1.col + insurgent.hex2.col + insurgent.hex3.col) / 3\r\n    // );\r\n    const avgRow = Math.round(\r\n      (insurgent.hex1.row + insurgent.hex2.row + insurgent.hex3.row) / 3\r\n    );\r\n\r\n    switch (insurgent.orientation) {\r\n      case \"base\":\r\n        return (\r\n          <div>\r\n            <img\r\n              src=\"images/insurgent-1-3d.png\"\r\n              key={insurgent.id}\r\n              style={{\r\n                position: \"absolute\",\r\n                left: avgRow % 2 === 0 ? 15 + left + \"px\" : 19 + left + \"px\",\r\n                top: arePointsEqual(insurgent, selectedInsurgent)\r\n                  ? 16 + top + \"px\"\r\n                  : 15 + top + \"px\",\r\n                width: arePointsEqual(insurgent, selectedInsurgent)\r\n                  ? \"17px\"\r\n                  : \"20px\",\r\n                zIndex: 99,\r\n                opacity: insurgent.willBeAttacked\r\n                  ? 0.7\r\n                  : arePointsEqual(insurgent, selectedInsurgent)\r\n                  ? 0.8\r\n                  : 1,\r\n\r\n                cursor:\r\n                  game.gameplayState !== \"insurgentMove\"\r\n                    ? \"default\"\r\n                    : insurgent.moves > 0\r\n                    ? \"pointer\"\r\n                    : \"default\",\r\n              }}\r\n              onClick={() => showInsurgentMovement(insurgent)}\r\n            />\r\n            {game.gameplayState === \"insurgentMove\" && insurgent.moves > 0 ? (\r\n              <img\r\n                src={\r\n                  insurgent.moves > 3\r\n                    ? \"images/moves-3.png\"\r\n                    : \"images/moves-\" + insurgent.moves + \".png\"\r\n                }\r\n                style={{\r\n                  position: \"absolute\",\r\n                  left: avgRow % 2 === 0 ? 15 + left + \"px\" : 19 + left + \"px\",\r\n                  top: 37 + top + \"px\",\r\n                  width: \"20px\",\r\n                  zIndex: 99,\r\n                  opacity:\r\n                    insurgent.willBeAttacked && insurgent.attacked === 1\r\n                      ? 0.7\r\n                      : 1,\r\n                }}\r\n              />\r\n            ) : null}\r\n          </div>\r\n        );\r\n      case \"up\":\r\n        return (\r\n          <div>\r\n            <img\r\n              src=\"images/insurgent-2-3d.png\"\r\n              key={insurgent.id}\r\n              style={{\r\n                position: \"absolute\",\r\n                left: arePointsEqual(insurgent, selectedInsurgent)\r\n                  ? 17 + left + \"px\"\r\n                  : 16 + left + \"px\",\r\n                top: arePointsEqual(insurgent, selectedInsurgent)\r\n                  ? 13 + top + \"px\"\r\n                  : 12 + top + \"px\",\r\n                width: arePointsEqual(insurgent, selectedInsurgent)\r\n                  ? \"19px\"\r\n                  : \"22px\",\r\n                zIndex: 99,\r\n                opacity:\r\n                  insurgent.willBeAttacked && insurgent.attacked === 1\r\n                    ? 0.7\r\n                    : arePointsEqual(insurgent, selectedInsurgent)\r\n                    ? 0.8\r\n                    : 1,\r\n                cursor:\r\n                  game.gameplayState !== \"insurgentMove\"\r\n                    ? \"default\"\r\n                    : insurgent.moves > 0\r\n                    ? \"pointer\"\r\n                    : \"default\",\r\n              }}\r\n              onClick={() => showInsurgentMovement(insurgent)}\r\n            />\r\n            {game.gameplayState === \"insurgentMove\" && insurgent.moves > 0 ? (\r\n              <img\r\n                src={\r\n                  insurgent.moves > 3\r\n                    ? \"images/moves-3.png\"\r\n                    : \"images/moves-\" + insurgent.moves + \".png\"\r\n                }\r\n                style={{\r\n                  position: \"absolute\",\r\n                  left: avgRow % 2 === 0 ? 17 + left + \"px\" : 17 + left + \"px\",\r\n                  top: 34 + top + \"px\",\r\n                  width: \"20px\",\r\n                  zIndex: 99,\r\n                  opacity:\r\n                    insurgent.willBeAttacked && insurgent.attacked === 1\r\n                      ? 0.7\r\n                      : 1,\r\n                }}\r\n              />\r\n            ) : null}\r\n          </div>\r\n        );\r\n      case \"down\":\r\n        return (\r\n          <div>\r\n            <img\r\n              src=\"images/insurgent-3-3d.png\"\r\n              key={insurgent.id}\r\n              style={{\r\n                position: \"absolute\",\r\n                left: arePointsEqual(insurgent, selectedInsurgent)\r\n                  ? 17 + left + \"px\"\r\n                  : avgRow % 2 === 0\r\n                  ? 16 + left + \"px\"\r\n                  : 16 + left + \"px\",\r\n                top: 15 + top + \"px\",\r\n                width: arePointsEqual(insurgent, selectedInsurgent)\r\n                  ? \"17px\"\r\n                  : \"20px\",\r\n                zIndex: 99,\r\n                opacity:\r\n                  insurgent.willBeAttacked && insurgent.attacked === 1\r\n                    ? 0.7\r\n                    : arePointsEqual(insurgent, selectedInsurgent)\r\n                    ? 0.8\r\n                    : 1,\r\n                cursor:\r\n                  game.gameplayState !== \"insurgentMove\"\r\n                    ? \"default\"\r\n                    : insurgent.moves > 0\r\n                    ? \"pointer\"\r\n                    : \"default\",\r\n              }}\r\n              onClick={() => showInsurgentMovement(insurgent)}\r\n            />\r\n            {game.gameplayState === \"insurgentMove\" && insurgent.moves > 0 ? (\r\n              <img\r\n                src={\r\n                  insurgent.moves > 3\r\n                    ? \"images/moves-3.png\"\r\n                    : \"images/moves-\" + insurgent.moves + \".png\"\r\n                }\r\n                style={{\r\n                  position: \"absolute\",\r\n                  left: avgRow % 2 === 0 ? 17 + left + \"px\" : 17 + left + \"px\",\r\n                  top: 37 + top + \"px\",\r\n                  width: \"20px\",\r\n                  zIndex: 99,\r\n                  opacity:\r\n                    insurgent.willBeAttacked && insurgent.attacked === 1\r\n                      ? 0.7\r\n                      : 1,\r\n                }}\r\n              />\r\n            ) : null}\r\n          </div>\r\n        );\r\n      default:\r\n        return <img></img>;\r\n    }\r\n  });\r\n\r\n  const stateDictionary = {\r\n    preStart: \"Start Game\",\r\n    insurgentStart: \"Place Insurgents\",\r\n    hegemonStart: \"Place Hegemon\",\r\n    insurgentMove: \"Insurgent\",\r\n    insurgentPlace: \"Place Insurgent\",\r\n    hegemonMove: \"Hegemon\",\r\n    insurgentWin: \"Insurgents Win\",\r\n    hegemonWin: \"The Hegemon Wins\",\r\n  };\r\n\r\n  document.getElementById(\"closeInfo\")!.onclick = closeInfo;\r\n  document.getElementById(\"infoButton\")!.onclick = openInfo;\r\n\r\n  document.getElementById(\"boardContainer\")!.onclick = () => {\r\n    closeInfo();\r\n  };\r\n  document.getElementsByTagName(\"body\")![0].onkeydown = (ev) => {\r\n    if (ev.key === \"Escape\") {\r\n      closeInfo();\r\n    }\r\n    if (ev.key === \"i\") {\r\n      openInfo();\r\n    }\r\n  };\r\n\r\n  // info menu\r\n  document.getElementById(\"intelligenceButton\")!.style.borderBottom =\r\n    \"2px solid white\";\r\n  document.getElementById(\"intelligenceButton\")!.onclick = () =>\r\n    changeInfoMenu(\"intelligence\");\r\n  document.getElementById(\"gameplayButton\")!.onclick = () =>\r\n    changeInfoMenu(\"gameplay\");\r\n  document.getElementById(\"hegemonButton\")!.onclick = () =>\r\n    changeInfoMenu(\"hegemon\");\r\n  document.getElementById(\"insurgentsButton\")!.onclick = () =>\r\n    changeInfoMenu(\"insurgents\");\r\n  document.getElementById(\"winningButton\")!.onclick = () =>\r\n    changeInfoMenu(\"winning\");\r\n\r\n  if (infoMenu !== \"intelligence\") {\r\n    document.getElementById(\r\n      \"infoMenuTitle\"\r\n    )!.innerHTML = infoMenu.toUpperCase();\r\n  } else {\r\n    document.getElementById(\"infoMenuTitle\")!.innerHTML =\r\n      props.config.title + \" \" + props.config.year;\r\n  }\r\n  ReactDOM.render(\r\n    infoMenuToComponent[infoMenu],\r\n    document.getElementById(\"infoContent\")\r\n  );\r\n\r\n  document.getElementById(\"startGame\")!.onclick = startGame;\r\n  document.getElementById(\"startGame\")!.style.display =\r\n    game.gameplayState !== \"preStart\" ? \"none\" : \"block\";\r\n\r\n  document.getElementById(\"whoMoves\")!.innerHTML =\r\n    stateDictionary[game.gameplayState];\r\n  document.getElementById(\"whoMoves\")!.style.display =\r\n    game.gameplayState === \"preStart\" ? \"none\" : \"block\";\r\n\r\n  document.getElementById(\"endRound\")!.style.display =\r\n    game.gameplayState === \"insurgentMove\" ||\r\n    game.gameplayState === \"hegemonMove\"\r\n      ? \"block\"\r\n      : \"none\";\r\n  document.getElementById(\"endRound\")!.onclick = changeWhoMoves;\r\n\r\n  document.getElementById(\"gameStatsAlive\")!.style.display =\r\n    game.gameplayState === \"hegemonStart\" ||\r\n    game.gameplayState === \"insurgentStart\" ||\r\n    game.gameplayState === \"preStart\"\r\n      ? \"none\"\r\n      : \"flex\";\r\n  document.getElementById(\"gameStatsDead\")!.style.display =\r\n    game.gameplayState === \"hegemonStart\" ||\r\n    game.gameplayState === \"insurgentStart\" ||\r\n    game.gameplayState === \"preStart\"\r\n      ? \"none\"\r\n      : \"flex\";\r\n  document.getElementById(\"aliveInsurgents\")!.innerHTML =\r\n    \"Alive Insurgents: \" + insurgents.length;\r\n  document.getElementById(\"aliveHegemons\")!.innerHTML =\r\n    \"Alive Hegemons: \" + hegemons.length;\r\n  document.getElementById(\"deadInsurgents\")!.innerHTML =\r\n    \"Dead Insurgents: \" + game.deadInsurgents;\r\n  document.getElementById(\"deadHegemons\")!.innerHTML =\r\n    \"Dead Hegemons: \" + game.deadHegemons;\r\n\r\n  if (\r\n    game.gameplayState === \"hegemonMove\" ||\r\n    game.gameplayState === \"hegemonStart\" ||\r\n    game.gameplayState === \"hegemonWin\"\r\n  ) {\r\n    document.getElementById(\"statusbar\")!.style.backgroundColor =\r\n      \"rgb(58, 76, 105)\";\r\n    document.getElementById(\"statusbar\")!.style.color = \"white\";\r\n    document.getElementById(\"endRound\")!.style.backgroundColor =\r\n      \"rgb(36, 46, 64)\";\r\n    document.getElementById(\"infoButton\")!.style.color = \"white\";\r\n  } else {\r\n    document.getElementById(\"statusbar\")!.style.backgroundColor =\r\n      \"rgb(217, 196, 196)\";\r\n    document.getElementById(\"statusbar\")!.style.color = \"black\";\r\n    document.getElementById(\"endRound\")!.style.backgroundColor =\r\n      \"rgb(238, 77, 47)\";\r\n    document.getElementById(\"infoButton\")!.style.color = \"black\";\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* Hegemon movement preview */}\r\n      <PreviewHexes\r\n        hexes={getHexNeighbors(\r\n          selectedHegemonMovement,\r\n          hegemons,\r\n          props.config.board,\r\n          true\r\n        )}\r\n        hegemon={selectedHegemonMovement}\r\n        hegemons={hegemons}\r\n        setHegemons={setHegemons}\r\n        selectedHegemonAttack={selectedHegemonAttack}\r\n        setSelectedHegemonMovement={setSelectedHegemonMovement}\r\n        setSelectedHegemonAttack={setSelectedHegemonAttack}\r\n        insurgents={insurgents}\r\n        setInsurgents={setInsurgents}\r\n        game={game}\r\n        setGame={setGame}\r\n        config={props.config}\r\n        color=\"#438ef4\"\r\n      />\r\n      {/* Hegemon attack preview*/}\r\n      <PreviewHexes\r\n        hexes={getHexNeighbors(\r\n          selectedHegemonAttack,\r\n          hegemons,\r\n          props.config.board,\r\n          false\r\n        )}\r\n        hegemon={selectedHegemonAttack}\r\n        hegemons={hegemons}\r\n        setHegemons={setHegemons}\r\n        selectedHegemonAttack={selectedHegemonAttack}\r\n        setSelectedHegemonMovement={setSelectedHegemonMovement}\r\n        setSelectedHegemonAttack={setSelectedHegemonAttack}\r\n        insurgents={insurgents}\r\n        setInsurgents={setInsurgents}\r\n        game={game}\r\n        setGame={setGame}\r\n        config={props.config}\r\n        color=\"red\"\r\n      />\r\n      {/* Insurgent movement preview */}\r\n      {game.gameplayState === \"insurgentMove\" ? (\r\n        <PreviewInsurgentMovement\r\n          points={getInsurgentNeighbors(\r\n            selectedInsurgent,\r\n            insurgents,\r\n            props.config.board\r\n          )}\r\n          insurgent={selectedInsurgent}\r\n          hegemons={hegemons}\r\n          setHegemons={setHegemons}\r\n          insurgents={insurgents}\r\n          setInsurgents={setInsurgents}\r\n          game={game}\r\n          setGame={setGame}\r\n          setSelectedInsurgent={setSelectedInsurgent}\r\n          config={props.config}\r\n        />\r\n      ) : null}\r\n\r\n      {/* Insurgent placement preview */}\r\n      {game.gameplayState === \"insurgentStart\" ||\r\n      game.gameplayState === \"insurgentPlace\" ? (\r\n        <PreviewInsurgentPlacement\r\n          points={getAllInsurgentsNeighbors(insurgents, props.config.board)}\r\n          insurgents={insurgents}\r\n          setInsurgents={setInsurgents}\r\n          hegemons={hegemons}\r\n          setHegemons={setHegemons}\r\n          game={game}\r\n          setGame={setGame}\r\n          setSelectedInsurgent={setSelectedInsurgent}\r\n          config={props.config}\r\n        />\r\n      ) : null}\r\n\r\n      {/* Hegemon placement preview */}\r\n      {game.gameplayState === \"hegemonStart\" ? (\r\n        <PreviewHegemonPlacement\r\n          hexes={getAllHegemonPlaces(hegemons, insurgents, props.config.board)}\r\n          hegemons={hegemons}\r\n          setHegemons={setHegemons}\r\n          insurgents={insurgents}\r\n          setInsurgents={setInsurgents}\r\n          game={game}\r\n          setGame={setGame}\r\n          config={props.config}\r\n          color=\"#438ef4\"\r\n        />\r\n      ) : null}\r\n\r\n      {hegemonPieces}\r\n      {insurgentPieces}\r\n    </div>\r\n  );\r\n};\r\n","/* eslint-disable jsx-a11y/heading-has-content */\nimport \"./index.css\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport config from \"./config/new-york.json\";\n\nimport { Display } from \"rot-js\";\nimport { isCellValid, isSpaceAvailable } from \"./Hegemon\";\nimport { Board } from \"./Board\";\nimport ReactDOM from \"react-dom\";\nimport {\n  isPointOnRails,\n  isVertexValid,\n  sortHexesInsideInsurgent,\n} from \"./Insurgent\";\nimport { Game, Hegemon, Insurgent } from \"./types\";\n\nconsole.log(process.env.PUBLIC_URL);\nconst renderBoard = (config: any) => {\n  const cellToColor: Record<number, string> = {\n    0: \"rgb(255, 255, 255)\",\n    1: \"rgb(58, 76, 105)\",\n    2: \"rgb(77, 76, 76)\",\n    3: \"rgba(58, 76, 105, 0.4)\",\n  };\n\n  var display = new Display({\n    width: config.height * 2,\n    height: config.width,\n    layout: \"hex\",\n    border: 0.4,\n    spacing: 4,\n    transpose: true,\n  });\n\n  for (let x = 0; x < config.width; x++) {\n    for (let y = x % 2; y < config.height * 2; y += 2) {\n      let bg = cellToColor[config.board[y][x]];\n\n      display.draw(y, x, \"\", \"rgb(125, 125, 125)\", bg);\n    }\n  }\n  const gameContainer = display.getContainer()!;\n\n  const boardDiv = document.getElementById(\"board\")!;\n  boardDiv.appendChild(gameContainer);\n\n  // Render board text\n  for (const location of config.locations) {\n    const p = document.createElement(\"p\");\n\n    p.textContent = location.name;\n    p.style.position = \"absolute\";\n    p.style.color = \"black\";\n    p.style.top = location.top;\n    p.style.left = location.left;\n    p.style.fontFamily = \"Nova Square\";\n    p.style.color = location.color;\n    p.style.fontWeight = \"500\";\n    p.style.fontSize = location.fontSize;\n    p.style.userSelect = \"none\";\n    p.style.transform = location.rotate;\n    p.style.zIndex = \"1\";\n\n    boardDiv.appendChild(p);\n  }\n};\n\nconst generateHegemons = (hegemons: Hegemon[], count: number) => {\n  for (let idx = 0; idx < count; idx++) {\n    let piece: Hegemon;\n    if (!isSpaceAvailable(hegemons, config.board)) {\n      break;\n    }\n\n    do {\n      const col = Math.floor(Math.round(Math.random() * 19));\n      const row = Math.floor(Math.random() * 30);\n\n      piece = { id: uuidv4(), col: col, row: row, moves: config.hegemonMoves };\n    } while (!isCellValid(piece, hegemons, config.board));\n\n    hegemons.push(piece);\n  }\n};\n\nconst generateInsurgent = (insurgents: Insurgent[]) => {\n  let piece: Insurgent;\n  do {\n    const col1 = Math.floor(Math.round(Math.random() * 21 - 1));\n    const row1 = Math.floor(Math.random() * 31 - 1);\n\n    let col2 = JSON.parse(JSON.stringify(col1));\n    let row2 = JSON.parse(JSON.stringify(row1));\n    row2 += 1;\n\n    let col3 = JSON.parse(JSON.stringify(col2));\n    let row3 = JSON.parse(JSON.stringify(row2));\n\n    if (Math.random() < 0.5) {\n      col3 = col2 - 1;\n      row3 = col3 % 2 === 0 ? Math.max(row1, row2) : Math.min(row1, row2);\n    } else {\n      col3 = col2 + 1;\n      row3 = col3 % 2 === 0 ? Math.max(row1, row2) : Math.min(row1, row2);\n    }\n\n    piece = {\n      id: uuidv4(),\n      hex1: {\n        id: uuidv4(),\n        col: col1,\n        row: row1,\n      },\n      hex2: {\n        id: uuidv4(),\n        col: col2,\n        row: row2,\n      },\n      hex3: {\n        id: uuidv4(),\n        col: col3,\n        row: row3,\n      },\n      orientation:\n        Math.random() < 0.33 ? \"base\" : Math.random() < 0.5 ? \"down\" : \"up\",\n      willBeAttacked: false,\n      attacked: 0,\n      moves: config.insurgentMoves,\n    };\n    // Sort hexes before checking\n    sortHexesInsideInsurgent(piece);\n  } while (!isVertexValid(piece, insurgents, config.board));\n\n  return piece;\n};\nconst generateInsurgentNeighbor = (\n  insurgent: Insurgent,\n  insurgents: Insurgent[]\n) => {\n  // No verification\n\n  if (insurgent.hex1.col < insurgent.hex2.col) {\n    // 33% chance each\n    const chance = Math.random();\n    if (chance < 0.33) {\n      const right: Insurgent = {\n        id: uuidv4(),\n\n        hex1: {\n          id: uuidv4(),\n          col: insurgent.hex1.col + 2,\n          row: insurgent.hex1.row,\n        },\n        hex2: insurgent.hex2,\n        hex3: insurgent.hex3,\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(right);\n\n      return right;\n    } else if (chance < 0.66) {\n      const leftUp: Insurgent = {\n        id: uuidv4(),\n\n        hex1: insurgent.hex1,\n        hex2: insurgent.hex2,\n        hex3: {\n          id: uuidv4(),\n          col: insurgent.hex3.col - 1,\n          row:\n            insurgent.hex3.col % 2 === 0\n              ? insurgent.hex3.row - 2\n              : insurgent.hex3.row - 1,\n        },\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(leftUp);\n      return leftUp;\n    } else {\n      const leftBottom: Insurgent = {\n        id: uuidv4(),\n\n        hex1: insurgent.hex1,\n        hex2: {\n          id: uuidv4(),\n          col: insurgent.hex2.col - 1,\n          row:\n            insurgent.hex2.col % 2 === 0\n              ? insurgent.hex2.row + 1\n              : insurgent.hex2.row + 2,\n        },\n        hex3: insurgent.hex3,\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(leftBottom);\n      return leftBottom;\n    }\n  } else {\n    // 33% chance each\n    const chance = Math.random();\n    if (chance < 0.33) {\n      const left: Insurgent = {\n        id: uuidv4(),\n\n        hex1: insurgent.hex1,\n        hex2: insurgent.hex2,\n        hex3: {\n          id: uuidv4(),\n          col: insurgent.hex3.col - 2,\n          row: insurgent.hex3.row,\n        },\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(left);\n      return left;\n    } else if (chance < 0.66) {\n      const rightUp: Insurgent = {\n        id: uuidv4(),\n\n        hex1: insurgent.hex1,\n        hex2: {\n          id: uuidv4(),\n          col: insurgent.hex2.col + 1,\n          row:\n            insurgent.hex2.col % 2 === 0\n              ? insurgent.hex2.row - 2\n              : insurgent.hex2.row - 1,\n        },\n        hex3: insurgent.hex3,\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(rightUp);\n      return rightUp;\n    } else {\n      const rightDown: Insurgent = {\n        id: uuidv4(),\n\n        hex1: {\n          id: uuidv4(),\n          col: insurgent.hex1.col + 1,\n          row:\n            insurgent.hex1.col % 2 === 0\n              ? insurgent.hex1.row + 1\n              : insurgent.hex1.row + 2,\n        },\n        hex2: insurgent.hex2,\n        hex3: insurgent.hex3,\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(rightDown);\n      return rightDown;\n    }\n  }\n};\n\nconst generateInsurgentSwarm = (insurgents: Insurgent[], count: number) => {\n  let initialPiece: Insurgent = generateInsurgent(insurgents);\n\n  const swarm: Insurgent[] = [];\n  if (count > 0) {\n    insurgents.push(initialPiece);\n    swarm.push(initialPiece);\n\n    for (let idx = 1; idx < count; idx++) {\n      let piece: Insurgent;\n      do {\n        const randomNo = Math.floor(Math.random() * swarm.length);\n        piece = generateInsurgentNeighbor(swarm[randomNo], insurgents);\n        if (!isPointOnRails(piece, config.board)) {\n          piece.orientation =\n            Math.random() < 0.33 ? \"base\" : Math.random() < 0.5 ? \"up\" : \"down\";\n        }\n      } while (!isVertexValid(piece, insurgents, config.board));\n      insurgents.push(piece);\n      swarm.push(piece);\n    }\n  }\n};\n\n// Generate hegemons and insurgents\nlet hegemons: Hegemon[] = [];\nlet insurgents: Insurgent[] = [];\n\n// generateHegemons(hegemons, 50);\n// generateInsurgentSwarm(insurgents, 25);\n// generateInsurgentSwarm(insurgents, 25);\n// generateInsurgentSwarm(insurgents, 25);\n\nconst game: Game = {\n  gameplayState: \"preStart\",\n  deadInsurgents: 0,\n  deadHegemons: 0,\n};\n// Render hegemons and insurgents\nconst element = (\n  <Board\n    hegemons={hegemons}\n    insurgents={insurgents}\n    game={game}\n    config={config}\n  />\n);\nReactDOM.render(element, document.getElementById(\"board\")!);\n// Render title\ndocument.getElementById(\"title\")!.innerHTML = config.title;\ndocument.getElementById(\"year\")!.innerHTML = config.year;\n\nrenderBoard(config);\n"],"sourceRoot":""}