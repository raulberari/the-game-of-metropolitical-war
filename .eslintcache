[{"E:\\Programming\\the-game-of-metropolitical-war\\src\\index.tsx":"1","E:\\Programming\\the-game-of-metropolitical-war\\src\\Insurgent.tsx":"2","E:\\Programming\\the-game-of-metropolitical-war\\src\\Hegemon.tsx":"3","E:\\Programming\\the-game-of-metropolitical-war\\src\\Board.tsx":"4","E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewHegemonPlacement.tsx":"5","E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewInsurgentPlacement.tsx":"6","E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewInsurgentMovement.tsx":"7","E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewHexes.tsx":"8","E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoIntelligence.tsx":"9","E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoGameplay.tsx":"10","E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoWinning.tsx":"11","E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoHegemon.tsx":"12","E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoInsurgents.tsx":"13","E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewHex.tsx":"14","E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewPoint.tsx":"15","E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewHeightMove.tsx":"16"},{"size":8524,"mtime":1608826101705,"results":"17","hashOfConfig":"18"},{"size":13305,"mtime":1608650461026,"results":"19","hashOfConfig":"18"},{"size":8060,"mtime":1608645506931,"results":"20","hashOfConfig":"18"},{"size":26773,"mtime":1608831044698,"results":"21","hashOfConfig":"18"},{"size":1458,"mtime":1608585165325,"results":"22","hashOfConfig":"18"},{"size":1238,"mtime":1608591822380,"results":"23","hashOfConfig":"18"},{"size":1630,"mtime":1608573364204,"results":"24","hashOfConfig":"18"},{"size":1715,"mtime":1608737391740,"results":"25","hashOfConfig":"18"},{"size":1929,"mtime":1608831079720,"results":"26","hashOfConfig":"18"},{"size":4088,"mtime":1608831060190,"results":"27","hashOfConfig":"18"},{"size":703,"mtime":1608831084172,"results":"28","hashOfConfig":"18"},{"size":294,"mtime":1608831063997,"results":"29","hashOfConfig":"18"},{"size":1355,"mtime":1608831072225,"results":"30","hashOfConfig":"18"},{"size":7379,"mtime":1608827211176,"results":"31","hashOfConfig":"18"},{"size":8716,"mtime":1608828584394,"results":"32","hashOfConfig":"18"},{"size":5925,"mtime":1608826808240,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"1vf4w3s",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"37"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"E:\\Programming\\the-game-of-metropolitical-war\\src\\index.tsx",["70","71"],"/* eslint-disable jsx-a11y/heading-has-content */\nimport \"./index.css\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport config from \"./config/new-york.json\";\n\nimport { Display } from \"rot-js\";\nimport { isCellValid, isSpaceAvailable } from \"./Hegemon\";\nimport { Board } from \"./Board\";\nimport ReactDOM from \"react-dom\";\nimport {\n  isPointOnRails,\n  isVertexValid,\n  sortHexesInsideInsurgent,\n} from \"./Insurgent\";\nimport { Game, Hegemon, Insurgent } from \"./types\";\n\nconst renderBoard = (config: any) => {\n  const cellToColor: Record<number, string> = {\n    0: \"rgb(255, 255, 255)\",\n    1: \"rgb(58, 76, 105)\",\n    2: \"rgb(77, 76, 76)\",\n    3: \"rgba(58, 76, 105, 0.4)\",\n  };\n\n  var display = new Display({\n    width: config.height * 2,\n    height: config.width,\n    layout: \"hex\",\n    border: 0.4,\n    spacing: 4,\n    transpose: true,\n  });\n\n  for (let x = 0; x < config.width; x++) {\n    for (let y = x % 2; y < config.height * 2; y += 2) {\n      let bg = cellToColor[config.board[y][x]];\n\n      display.draw(y, x, \"\", \"rgb(125, 125, 125)\", bg);\n    }\n  }\n  const gameContainer = display.getContainer()!;\n\n  const boardDiv = document.getElementById(\"board\")!;\n  boardDiv.appendChild(gameContainer);\n\n  // Render board text\n  for (const location of config.locations) {\n    const p = document.createElement(\"p\");\n\n    p.textContent = location.name;\n    p.style.position = \"absolute\";\n    p.style.color = \"black\";\n    p.style.top = location.top;\n    p.style.left = location.left;\n    p.style.fontFamily = \"Nova Square\";\n    p.style.color = location.color;\n    p.style.fontWeight = \"500\";\n    p.style.fontSize = location.fontSize;\n    p.style.userSelect = \"none\";\n    p.style.transform = location.rotate;\n    p.style.zIndex = \"1\";\n\n    boardDiv.appendChild(p);\n  }\n};\n\nconst generateHegemons = (hegemons: Hegemon[], count: number) => {\n  for (let idx = 0; idx < count; idx++) {\n    let piece: Hegemon;\n    if (!isSpaceAvailable(hegemons, config.board)) {\n      break;\n    }\n\n    do {\n      const col = Math.floor(Math.round(Math.random() * 19));\n      const row = Math.floor(Math.random() * 30);\n\n      piece = { id: uuidv4(), col: col, row: row, moves: config.hegemonMoves };\n    } while (!isCellValid(piece, hegemons, config.board));\n\n    hegemons.push(piece);\n  }\n};\n\nconst generateInsurgent = (insurgents: Insurgent[]) => {\n  let piece: Insurgent;\n  do {\n    const col1 = Math.floor(Math.round(Math.random() * 21 - 1));\n    const row1 = Math.floor(Math.random() * 31 - 1);\n\n    let col2 = JSON.parse(JSON.stringify(col1));\n    let row2 = JSON.parse(JSON.stringify(row1));\n    row2 += 1;\n\n    let col3 = JSON.parse(JSON.stringify(col2));\n    let row3 = JSON.parse(JSON.stringify(row2));\n\n    if (Math.random() < 0.5) {\n      col3 = col2 - 1;\n      row3 = col3 % 2 === 0 ? Math.max(row1, row2) : Math.min(row1, row2);\n    } else {\n      col3 = col2 + 1;\n      row3 = col3 % 2 === 0 ? Math.max(row1, row2) : Math.min(row1, row2);\n    }\n\n    piece = {\n      id: uuidv4(),\n      hex1: {\n        id: uuidv4(),\n        col: col1,\n        row: row1,\n      },\n      hex2: {\n        id: uuidv4(),\n        col: col2,\n        row: row2,\n      },\n      hex3: {\n        id: uuidv4(),\n        col: col3,\n        row: row3,\n      },\n      orientation:\n        Math.random() < 0.33 ? \"base\" : Math.random() < 0.5 ? \"down\" : \"up\",\n      willBeAttacked: false,\n      attacked: 0,\n      moves: config.insurgentMoves,\n    };\n    // Sort hexes before checking\n    sortHexesInsideInsurgent(piece);\n  } while (!isVertexValid(piece, insurgents, config.board));\n\n  return piece;\n};\nconst generateInsurgentNeighbor = (\n  insurgent: Insurgent,\n  insurgents: Insurgent[]\n) => {\n  // No verification\n\n  if (insurgent.hex1.col < insurgent.hex2.col) {\n    // 33% chance each\n    const chance = Math.random();\n    if (chance < 0.33) {\n      const right: Insurgent = {\n        id: uuidv4(),\n\n        hex1: {\n          id: uuidv4(),\n          col: insurgent.hex1.col + 2,\n          row: insurgent.hex1.row,\n        },\n        hex2: insurgent.hex2,\n        hex3: insurgent.hex3,\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(right);\n\n      return right;\n    } else if (chance < 0.66) {\n      const leftUp: Insurgent = {\n        id: uuidv4(),\n\n        hex1: insurgent.hex1,\n        hex2: insurgent.hex2,\n        hex3: {\n          id: uuidv4(),\n          col: insurgent.hex3.col - 1,\n          row:\n            insurgent.hex3.col % 2 === 0\n              ? insurgent.hex3.row - 2\n              : insurgent.hex3.row - 1,\n        },\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(leftUp);\n      return leftUp;\n    } else {\n      const leftBottom: Insurgent = {\n        id: uuidv4(),\n\n        hex1: insurgent.hex1,\n        hex2: {\n          id: uuidv4(),\n          col: insurgent.hex2.col - 1,\n          row:\n            insurgent.hex2.col % 2 === 0\n              ? insurgent.hex2.row + 1\n              : insurgent.hex2.row + 2,\n        },\n        hex3: insurgent.hex3,\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(leftBottom);\n      return leftBottom;\n    }\n  } else {\n    // 33% chance each\n    const chance = Math.random();\n    if (chance < 0.33) {\n      const left: Insurgent = {\n        id: uuidv4(),\n\n        hex1: insurgent.hex1,\n        hex2: insurgent.hex2,\n        hex3: {\n          id: uuidv4(),\n          col: insurgent.hex3.col - 2,\n          row: insurgent.hex3.row,\n        },\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(left);\n      return left;\n    } else if (chance < 0.66) {\n      const rightUp: Insurgent = {\n        id: uuidv4(),\n\n        hex1: insurgent.hex1,\n        hex2: {\n          id: uuidv4(),\n          col: insurgent.hex2.col + 1,\n          row:\n            insurgent.hex2.col % 2 === 0\n              ? insurgent.hex2.row - 2\n              : insurgent.hex2.row - 1,\n        },\n        hex3: insurgent.hex3,\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(rightUp);\n      return rightUp;\n    } else {\n      const rightDown: Insurgent = {\n        id: uuidv4(),\n\n        hex1: {\n          id: uuidv4(),\n          col: insurgent.hex1.col + 1,\n          row:\n            insurgent.hex1.col % 2 === 0\n              ? insurgent.hex1.row + 1\n              : insurgent.hex1.row + 2,\n        },\n        hex2: insurgent.hex2,\n        hex3: insurgent.hex3,\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(rightDown);\n      return rightDown;\n    }\n  }\n};\n\nconst generateInsurgentSwarm = (insurgents: Insurgent[], count: number) => {\n  let initialPiece: Insurgent = generateInsurgent(insurgents);\n\n  const swarm: Insurgent[] = [];\n  if (count > 0) {\n    insurgents.push(initialPiece);\n    swarm.push(initialPiece);\n\n    for (let idx = 1; idx < count; idx++) {\n      let piece: Insurgent;\n      do {\n        const randomNo = Math.floor(Math.random() * swarm.length);\n        piece = generateInsurgentNeighbor(swarm[randomNo], insurgents);\n        if (!isPointOnRails(piece, config.board)) {\n          piece.orientation =\n            Math.random() < 0.33 ? \"base\" : Math.random() < 0.5 ? \"up\" : \"down\";\n        }\n      } while (!isVertexValid(piece, insurgents, config.board));\n      insurgents.push(piece);\n      swarm.push(piece);\n    }\n  }\n};\n\n// Generate hegemons and insurgents\nlet hegemons: Hegemon[] = [];\nlet insurgents: Insurgent[] = [];\n\n// generateHegemons(hegemons, 50);\n// generateInsurgentSwarm(insurgents, 25);\n// generateInsurgentSwarm(insurgents, 25);\n// generateInsurgentSwarm(insurgents, 25);\n\nconst game: Game = {\n  gameplayState: \"preStart\",\n  deadInsurgents: 0,\n  deadHegemons: 0,\n};\n// Render hegemons and insurgents\nconst element = (\n  <Board\n    hegemons={hegemons}\n    insurgents={insurgents}\n    game={game}\n    config={config}\n  />\n);\nReactDOM.render(element, document.getElementById(\"board\")!);\n// Render title\ndocument.getElementById(\"title\")!.innerHTML = config.title;\ndocument.getElementById(\"year\")!.innerHTML = config.year;\n\nrenderBoard(config);\n",["72","73"],"E:\\Programming\\the-game-of-metropolitical-war\\src\\Insurgent.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\Hegemon.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\Board.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewHegemonPlacement.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewInsurgentPlacement.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewInsurgentMovement.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewHexes.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoIntelligence.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoGameplay.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoWinning.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoHegemon.tsx",["74"],"/* eslint-disable jsx-a11y/alt-text */\r\nexport const InfoHegemon = () => {\r\n  return (\r\n    <div>\r\n      The Hegemon is built up around ISR values (Intelligence, Surveillance and\r\n      Reconnaissance)\r\n      <img src=\"images/3d/hegemon-3d-2.gif\"></img>\r\n      <h2></h2>\r\n    </div>\r\n  );\r\n};\r\n","E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoInsurgents.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewHex.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewPoint.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewHeightMove.tsx",[],["75","76"],{"ruleId":"77","severity":1,"message":"78","line":68,"column":7,"nodeType":"79","messageId":"80","endLine":68,"endColumn":23},{"ruleId":"77","severity":1,"message":"81","line":274,"column":7,"nodeType":"79","messageId":"80","endLine":274,"endColumn":29},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":8,"column":7,"nodeType":"88","endLine":8,"endColumn":11},{"ruleId":"82","replacedBy":"89"},{"ruleId":"84","replacedBy":"90"},"@typescript-eslint/no-unused-vars","'generateHegemons' is assigned a value but never used.","Identifier","unusedVar","'generateInsurgentSwarm' is assigned a value but never used.","no-native-reassign",["91"],"no-negated-in-lhs",["92"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement",["91"],["92"],"no-global-assign","no-unsafe-negation"]