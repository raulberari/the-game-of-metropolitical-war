[{"E:\\Programming\\the-game-of-metropolitical-war\\src\\index.tsx":"1","E:\\Programming\\the-game-of-metropolitical-war\\src\\Insurgent.tsx":"2","E:\\Programming\\the-game-of-metropolitical-war\\src\\Hegemon.tsx":"3","E:\\Programming\\the-game-of-metropolitical-war\\src\\Board.tsx":"4","E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewHegemonPlacement.tsx":"5","E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewInsurgentPlacement.tsx":"6","E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewInsurgentMovement.tsx":"7","E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewHexes.tsx":"8","E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoIntelligence.tsx":"9","E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoGameplay.tsx":"10","E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoWinning.tsx":"11","E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoHegemon.tsx":"12","E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoInsurgents.tsx":"13","E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewHex.tsx":"14","E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewPoint.tsx":"15","E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewHeightMove.tsx":"16","E:\\Programming\\the-game-of-metropolitical-war\\src\\Settings.tsx":"17","E:\\Programming\\the-game-of-metropolitical-war\\src\\Root.tsx":"18"},{"size":9531,"mtime":1609017132809,"results":"19","hashOfConfig":"20"},{"size":13305,"mtime":1608650461026,"results":"21","hashOfConfig":"20"},{"size":8060,"mtime":1608645506931,"results":"22","hashOfConfig":"20"},{"size":32477,"mtime":1609017422864,"results":"23","hashOfConfig":"20"},{"size":1798,"mtime":1608858782440,"results":"24","hashOfConfig":"20"},{"size":1576,"mtime":1608859318433,"results":"25","hashOfConfig":"20"},{"size":1989,"mtime":1608859254036,"results":"26","hashOfConfig":"20"},{"size":2053,"mtime":1608859881802,"results":"27","hashOfConfig":"20"},{"size":2094,"mtime":1608928393763,"results":"28","hashOfConfig":"20"},{"size":6818,"mtime":1608929556880,"results":"29","hashOfConfig":"20"},{"size":811,"mtime":1608835180393,"results":"30","hashOfConfig":"20"},{"size":2469,"mtime":1608929693991,"results":"31","hashOfConfig":"20"},{"size":3892,"mtime":1608929861357,"results":"32","hashOfConfig":"20"},{"size":6852,"mtime":1608862683382,"results":"33","hashOfConfig":"20"},{"size":8289,"mtime":1608859177783,"results":"34","hashOfConfig":"20"},{"size":5691,"mtime":1608858083548,"results":"35","hashOfConfig":"20"},{"size":3608,"mtime":1608937485294,"results":"36","hashOfConfig":"20"},{"size":1339,"mtime":1608935366851,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},"1vf4w3s",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"41"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Programming\\the-game-of-metropolitical-war\\src\\index.tsx",["78","79","80"],"/* eslint-disable jsx-a11y/heading-has-content */\nimport \"./index.css\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport config from \"./config/new-york.json\";\n\nimport { Display } from \"rot-js\";\nimport { isCellValid, isSpaceAvailable } from \"./Hegemon\";\nimport { Board } from \"./Board\";\nimport { Root } from \"./Root\";\nimport ReactDOM from \"react-dom\";\nimport {\n  isPointOnRails,\n  isVertexValid,\n  sortHexesInsideInsurgent,\n} from \"./Insurgent\";\nimport { Game, Hegemon, Insurgent } from \"./types\";\n\n//@ts-ignore\nimport backgroundMusicAudio from \"./sounds/tears-in-rain.mp3\";\nconst backgroundMusic = new Audio(backgroundMusicAudio);\nbackgroundMusic.volume = 0.2;\nbackgroundMusic.preload = \"auto\";\nbackgroundMusic.loop = true;\nbackgroundMusic.autoplay = true;\n\nexport const renderBoard = (config: any, backgroundMusic: HTMLAudioElement) => {\n  const cellToColor: Record<number, string> = {\n    0: \"rgb(255, 255, 255)\",\n    1: \"rgb(58, 76, 105)\",\n    2: \"rgb(77, 76, 76)\",\n    3: \"rgba(58, 76, 105, 0.4)\",\n  };\n\n  var display = new Display({\n    width: config.height * 2,\n    height: config.width,\n    layout: \"hex\",\n    border: 0.4,\n    spacing: 4,\n    transpose: true,\n  });\n\n  for (let x = 0; x < config.width; x++) {\n    for (let y = x % 2; y < config.height * 2; y += 2) {\n      let bg = cellToColor[config.board[y][x]];\n\n      display.draw(y, x, \"\", \"rgb(125, 125, 125)\", bg);\n    }\n  }\n  const gameContainer = display.getContainer()!;\n  const boardDiv = document.getElementById(\"board\")!;\n  boardDiv.appendChild(gameContainer);\n  // Muzica maestre\n  backgroundMusic.play();\n\n  // const textElements = [];\n  // for (const location of config.locations) {\n  //   textElements.push(\n  //     <p\n  //       style={{\n  //         position: \"absolute\",\n  //         top: location.top,\n  //         left: location.left,\n  //         fontFamily: \"Nova Square\",\n  //         color: location.color,\n  //         fontWeight: 500,\n  //         fontSize: location.fontSize,\n  //         userSelect: \"none\",\n  //         transform: location.rotate,\n  //         zIndex: 1,\n  //       }}\n  //     >\n  //       {location.name}\n  //     </p>\n  //   );\n  // }\n  // Render board text\n  for (const location of config.locations) {\n    const p = document.createElement(\"p\");\n\n    p.textContent = location.name;\n    p.style.position = \"absolute\";\n    p.style.color = \"black\";\n    p.style.top = location.top;\n    p.style.left = location.left;\n    p.style.fontFamily = \"Nova Square\";\n    p.style.color = location.color;\n    p.style.fontWeight = \"500\";\n    p.style.fontSize = location.fontSize;\n    p.style.userSelect = \"none\";\n    p.style.transform = location.rotate;\n    p.style.zIndex = \"1\";\n\n    boardDiv.appendChild(p);\n  }\n\n  // Render title\n  document.getElementById(\"title\")!.innerHTML = config.title;\n  document.getElementById(\"year\")!.innerHTML = config.year;\n};\n\nconst generateHegemons = (hegemons: Hegemon[], count: number) => {\n  for (let idx = 0; idx < count; idx++) {\n    let piece: Hegemon;\n    if (!isSpaceAvailable(hegemons, config.board)) {\n      break;\n    }\n\n    do {\n      const col = Math.floor(Math.round(Math.random() * 19));\n      const row = Math.floor(Math.random() * 30);\n\n      piece = { id: uuidv4(), col: col, row: row, moves: config.hegemonMoves };\n    } while (!isCellValid(piece, hegemons, config.board));\n\n    hegemons.push(piece);\n  }\n};\n\nconst generateInsurgent = (insurgents: Insurgent[]) => {\n  let piece: Insurgent;\n  do {\n    const col1 = Math.floor(Math.round(Math.random() * 21 - 1));\n    const row1 = Math.floor(Math.random() * 31 - 1);\n\n    let col2 = JSON.parse(JSON.stringify(col1));\n    let row2 = JSON.parse(JSON.stringify(row1));\n    row2 += 1;\n\n    let col3 = JSON.parse(JSON.stringify(col2));\n    let row3 = JSON.parse(JSON.stringify(row2));\n\n    if (Math.random() < 0.5) {\n      col3 = col2 - 1;\n      row3 = col3 % 2 === 0 ? Math.max(row1, row2) : Math.min(row1, row2);\n    } else {\n      col3 = col2 + 1;\n      row3 = col3 % 2 === 0 ? Math.max(row1, row2) : Math.min(row1, row2);\n    }\n\n    piece = {\n      id: uuidv4(),\n      hex1: {\n        id: uuidv4(),\n        col: col1,\n        row: row1,\n      },\n      hex2: {\n        id: uuidv4(),\n        col: col2,\n        row: row2,\n      },\n      hex3: {\n        id: uuidv4(),\n        col: col3,\n        row: row3,\n      },\n      orientation:\n        Math.random() < 0.33 ? \"base\" : Math.random() < 0.5 ? \"down\" : \"up\",\n      willBeAttacked: false,\n      attacked: 0,\n      moves: config.insurgentMoves,\n    };\n    // Sort hexes before checking\n    sortHexesInsideInsurgent(piece);\n  } while (!isVertexValid(piece, insurgents, config.board));\n\n  return piece;\n};\nconst generateInsurgentNeighbor = (\n  insurgent: Insurgent,\n  insurgents: Insurgent[]\n) => {\n  // No verification\n\n  if (insurgent.hex1.col < insurgent.hex2.col) {\n    // 33% chance each\n    const chance = Math.random();\n    if (chance < 0.33) {\n      const right: Insurgent = {\n        id: uuidv4(),\n\n        hex1: {\n          id: uuidv4(),\n          col: insurgent.hex1.col + 2,\n          row: insurgent.hex1.row,\n        },\n        hex2: insurgent.hex2,\n        hex3: insurgent.hex3,\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(right);\n\n      return right;\n    } else if (chance < 0.66) {\n      const leftUp: Insurgent = {\n        id: uuidv4(),\n\n        hex1: insurgent.hex1,\n        hex2: insurgent.hex2,\n        hex3: {\n          id: uuidv4(),\n          col: insurgent.hex3.col - 1,\n          row:\n            insurgent.hex3.col % 2 === 0\n              ? insurgent.hex3.row - 2\n              : insurgent.hex3.row - 1,\n        },\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(leftUp);\n      return leftUp;\n    } else {\n      const leftBottom: Insurgent = {\n        id: uuidv4(),\n\n        hex1: insurgent.hex1,\n        hex2: {\n          id: uuidv4(),\n          col: insurgent.hex2.col - 1,\n          row:\n            insurgent.hex2.col % 2 === 0\n              ? insurgent.hex2.row + 1\n              : insurgent.hex2.row + 2,\n        },\n        hex3: insurgent.hex3,\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(leftBottom);\n      return leftBottom;\n    }\n  } else {\n    // 33% chance each\n    const chance = Math.random();\n    if (chance < 0.33) {\n      const left: Insurgent = {\n        id: uuidv4(),\n\n        hex1: insurgent.hex1,\n        hex2: insurgent.hex2,\n        hex3: {\n          id: uuidv4(),\n          col: insurgent.hex3.col - 2,\n          row: insurgent.hex3.row,\n        },\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(left);\n      return left;\n    } else if (chance < 0.66) {\n      const rightUp: Insurgent = {\n        id: uuidv4(),\n\n        hex1: insurgent.hex1,\n        hex2: {\n          id: uuidv4(),\n          col: insurgent.hex2.col + 1,\n          row:\n            insurgent.hex2.col % 2 === 0\n              ? insurgent.hex2.row - 2\n              : insurgent.hex2.row - 1,\n        },\n        hex3: insurgent.hex3,\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(rightUp);\n      return rightUp;\n    } else {\n      const rightDown: Insurgent = {\n        id: uuidv4(),\n\n        hex1: {\n          id: uuidv4(),\n          col: insurgent.hex1.col + 1,\n          row:\n            insurgent.hex1.col % 2 === 0\n              ? insurgent.hex1.row + 1\n              : insurgent.hex1.row + 2,\n        },\n        hex2: insurgent.hex2,\n        hex3: insurgent.hex3,\n        orientation: \"base\",\n        willBeAttacked: false,\n        attacked: 0,\n        moves: config.insurgentMoves,\n      };\n      sortHexesInsideInsurgent(rightDown);\n      return rightDown;\n    }\n  }\n};\n\nconst generateInsurgentSwarm = (insurgents: Insurgent[], count: number) => {\n  let initialPiece: Insurgent = generateInsurgent(insurgents);\n\n  const swarm: Insurgent[] = [];\n  if (count > 0) {\n    insurgents.push(initialPiece);\n    swarm.push(initialPiece);\n\n    for (let idx = 1; idx < count; idx++) {\n      let piece: Insurgent;\n      do {\n        const randomNo = Math.floor(Math.random() * swarm.length);\n        piece = generateInsurgentNeighbor(swarm[randomNo], insurgents);\n        if (!isPointOnRails(piece, config.board)) {\n          piece.orientation =\n            Math.random() < 0.33 ? \"base\" : Math.random() < 0.5 ? \"up\" : \"down\";\n        }\n      } while (!isVertexValid(piece, insurgents, config.board));\n      insurgents.push(piece);\n      swarm.push(piece);\n    }\n  }\n};\n\n// Generate hegemons and insurgents\nlet hegemons: Hegemon[] = [];\nlet insurgents: Insurgent[] = [];\n\n// generateHegemons(hegemons, 50);\n// generateInsurgentSwarm(insurgents, 25);\n// generateInsurgentSwarm(insurgents, 25);\n// generateInsurgentSwarm(insurgents, 25);\n\nconst game: Game = {\n  gameplayState: \"preStart\",\n  deadInsurgents: 0,\n  deadHegemons: 0,\n};\n// Render hegemons and insurgents\nconst element = (\n  <Board\n    hegemons={hegemons}\n    insurgents={insurgents}\n    game={game}\n    config={config}\n    backgroundMusic={backgroundMusic}\n  />\n);\n\nReactDOM.render(element, document.getElementById(\"board\")!);\n\nrenderBoard(config, backgroundMusic);\n",["81","82"],"E:\\Programming\\the-game-of-metropolitical-war\\src\\Insurgent.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\Hegemon.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\Board.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewHegemonPlacement.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewInsurgentPlacement.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewInsurgentMovement.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewHexes.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoIntelligence.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoGameplay.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoWinning.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoHegemon.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\info-content\\InfoInsurgents.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewHex.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewPoint.tsx",[],["83","84"],"E:\\Programming\\the-game-of-metropolitical-war\\src\\PreviewHeightMove.tsx",[],"E:\\Programming\\the-game-of-metropolitical-war\\src\\Settings.tsx",["85","86","87","88","89","90"],"/* eslint-disable jsx-a11y/alt-text */\r\n\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport React, { Dispatch, SetStateAction } from \"react\";\r\n\r\nimport { Config } from \"./types\";\r\n\r\nexport const Settings = (props: {\r\n  closeSettings: () => void;\r\n  config: Config;\r\n  setConfig: Dispatch<SetStateAction<Config>>;\r\n  sfx: HTMLAudioElement[];\r\n  sfxVolumes: number[];\r\n  ambientSound: HTMLAudioElement;\r\n  backgroundMusic: HTMLAudioElement;\r\n}) => {\r\n  const {\r\n    closeSettings,\r\n    config,\r\n    setConfig,\r\n    sfx,\r\n    sfxVolumes,\r\n    ambientSound,\r\n    backgroundMusic,\r\n  } = props;\r\n  const [sfxValue, setSfxValue] = React.useState(sfx[0].volume * 100);\r\n  const [ambientSoundValue, setAmbientSoundValue] = React.useState(\r\n    ambientSound.volume * 100\r\n  );\r\n  const [backgroundMusicValue, setBackgroundMusicValue] = React.useState(\r\n    backgroundMusic.volume * 100\r\n  );\r\n\r\n  const handleSFXSlider = (\r\n    event: React.ChangeEvent<{}>,\r\n    newValue: number | number[]\r\n  ) => {\r\n    // @ts-ignore\r\n    setSfxValue(newValue);\r\n    for (let i = 0; i < sfx.length; i++) {\r\n      const ratio = sfxValue / 100 / sfxVolumes[0];\r\n      if (isNaN(sfxVolumes[i] * ratio)) {\r\n        sfx[i].volume = 0;\r\n      } else {\r\n        sfx[i].volume = Math.min(sfxVolumes[i] * ratio, 1);\r\n      }\r\n    }\r\n  };\r\n  const handleAmbientSlider = (\r\n    event: React.ChangeEvent<{}>,\r\n    newValue: number | number[]\r\n  ) => {\r\n    // @ts-ignore\r\n    setAmbientSoundValue(newValue);\r\n    ambientSound.volume = ambientSoundValue / 100;\r\n  };\r\n  const handleBackgroundMusicSlider = (\r\n    event: React.ChangeEvent<{}>,\r\n    newValue: number | number[]\r\n  ) => {\r\n    // @ts-ignore\r\n    setBackgroundMusicValue(newValue);\r\n    backgroundMusic.volume = backgroundMusicValue / 100;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      id=\"settingsContainer\"\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      <div className=\"closeInfoPanel\">\r\n        <span id=\"closeSettings\" onClick={closeSettings}>\r\n          ✕\r\n        </span>\r\n      </div>\r\n      <img\r\n        className=\"infoImage\"\r\n        src={process.env.PUBLIC_URL + \"/images/visuals/drone-swarm.jpg\"}\r\n      />\r\n      <h1 style={{ textAlign: \"center\" }}>SETTINGS</h1>\r\n      <div id=\"settingsContentContainer\">\r\n        <div className=\"settingItem\">\r\n          <span className=\"settingName\">Sound Effects</span>\r\n          <div className=\"sliderContainer\">\r\n            <Slider\r\n              value={sfxValue}\r\n              onChange={handleSFXSlider}\r\n              aria-labelledby=\"continuous-slider\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"settingItem\">\r\n          <span className=\"settingName\">Ambient Sounds</span>\r\n\r\n          <div className=\"sliderContainer\">\r\n            <Slider\r\n              value={ambientSoundValue}\r\n              onChange={handleAmbientSlider}\r\n              aria-labelledby=\"continuous-slider\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"settingItem\">\r\n          <span className=\"settingName\">Music</span>\r\n\r\n          <div className=\"sliderContainer\">\r\n            <Slider\r\n              value={backgroundMusicValue}\r\n              onChange={handleBackgroundMusicSlider}\r\n              aria-labelledby=\"continuous-slider\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","E:\\Programming\\the-game-of-metropolitical-war\\src\\Root.tsx",["91","92"],{"ruleId":"93","severity":1,"message":"94","line":10,"column":10,"nodeType":"95","messageId":"96","endLine":10,"endColumn":14},{"ruleId":"93","severity":1,"message":"97","line":103,"column":7,"nodeType":"95","messageId":"96","endLine":103,"endColumn":23},{"ruleId":"93","severity":1,"message":"98","line":309,"column":7,"nodeType":"95","messageId":"96","endLine":309,"endColumn":29},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"99","replacedBy":"103"},{"ruleId":"101","replacedBy":"104"},{"ruleId":"93","severity":1,"message":"105","line":4,"column":10,"nodeType":"95","messageId":"96","endLine":4,"endColumn":20},{"ruleId":"93","severity":1,"message":"106","line":5,"column":8,"nodeType":"95","messageId":"96","endLine":5,"endColumn":19},{"ruleId":"93","severity":1,"message":"107","line":6,"column":8,"nodeType":"95","messageId":"96","endLine":6,"endColumn":16},{"ruleId":"93","severity":1,"message":"108","line":7,"column":8,"nodeType":"95","messageId":"96","endLine":7,"endColumn":14},{"ruleId":"93","severity":1,"message":"109","line":23,"column":5,"nodeType":"95","messageId":"96","endLine":23,"endColumn":11},{"ruleId":"93","severity":1,"message":"110","line":24,"column":5,"nodeType":"95","messageId":"96","endLine":24,"endColumn":14},{"ruleId":"93","severity":1,"message":"111","line":2,"column":10,"nodeType":"95","messageId":"96","endLine":2,"endColumn":16},{"ruleId":"93","severity":1,"message":"110","line":17,"column":18,"nodeType":"95","messageId":"96","endLine":17,"endColumn":27},"@typescript-eslint/no-unused-vars","'Root' is defined but never used.","Identifier","unusedVar","'generateHegemons' is assigned a value but never used.","'generateInsurgentSwarm' is assigned a value but never used.","no-native-reassign",["112"],"no-negated-in-lhs",["113"],["112"],["113"],"'makeStyles' is defined but never used.","'FormControl' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'config' is assigned a value but never used.","'setConfig' is assigned a value but never used.","'config' is defined but never used.","no-global-assign","no-unsafe-negation"]